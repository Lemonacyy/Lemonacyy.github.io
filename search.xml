<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL功能实现：算子下推之LIMIT OFFSET Pushdown</title>
      <link href="/2024/06/22/MySQL%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0%EF%BC%9A%E7%AE%97%E5%AD%90%E4%B8%8B%E6%8E%A8%E4%B9%8BLIMIT_OFFSET_pushdown/"/>
      <url>/2024/06/22/MySQL%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0%EF%BC%9A%E7%AE%97%E5%AD%90%E4%B8%8B%E6%8E%A8%E4%B9%8BLIMIT_OFFSET_pushdown/</url>
      
        <content type="html"><![CDATA[<p>该功能将单表查询的LIMIT OFFSET操作下推到InnoDB，避免回表操作和降低格式转换的开销，有效提高扫描性能。</p><span id="more"></span><blockquote><p>代码基于MySQL8.0.32</p></blockquote><h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h1><h2 id="1-1-LimitOffsetIterator"><a href="#1-1-LimitOffsetIterator" class="headerlink" title="1.1 LimitOffsetIterator"></a>1.1 LimitOffsetIterator</h2><p>在社区MySQL的设计中，Limit Offset是通过迭代器<code>LimitOffsetIterator</code>实现的。</p><p>每一个带有Limit Offset的query都对应着一个<code>LimitOffsetIterator</code>迭代器，当执行命令进行读取时，首先调用的就是<code>LimitOffsetIterator::Read()</code>，之后再根据query的具体类型调用其他迭代器的read方法。</p><p>例如对于index scan：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># k为索引</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sbtest1 <span class="keyword">order</span> <span class="keyword">by</span> k limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>它的调用逻辑是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">0</span>  row_search_mvcc</span><br><span class="line">#<span class="number">1</span>  in ha_innobase::index_read </span><br><span class="line">#<span class="number">2</span>  in ha_innobase::index_first</span><br><span class="line">#<span class="number">3</span>  in handler::ha_index_first</span><br><span class="line">#<span class="number">4</span>  in IndexScanIterator&lt;<span class="literal">false</span>&gt;::Read</span><br><span class="line">#<span class="number">5</span>  in LimitOffsetIterator::Read</span><br><span class="line">#<span class="number">6</span>  in Query_expression::ExecuteIteratorQuery</span><br></pre></td></tr></table></figure><p>对于table scan：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sbtest1 limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>它的调用逻辑是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">0</span>  row_search_mvcc</span><br><span class="line">#<span class="number">1</span>  in ha_innobase::index_read</span><br><span class="line">#<span class="number">2</span>  in ha_innobase::index_first</span><br><span class="line">#<span class="number">3</span>  in ha_innobase::rnd_next</span><br><span class="line">#<span class="number">4</span>  in handler::ha_rnd_next</span><br><span class="line">#<span class="number">5</span>  in TableScanIterator::Read</span><br><span class="line">#<span class="number">6</span>  in LimitOffsetIterator::Read</span><br><span class="line">#<span class="number">7</span>  in Query_expression::ExecuteIteratorQuery</span><br></pre></td></tr></table></figure><p>（当然，也不一定都是最先调用<code>LimitOffsetIterator::Read()</code>，例如order by一个没有索引的列，是最后才调用<code>LimitOffsetIterator::Read()</code>的，但是这种情况不在优化范围内，就不讨论了。）</p><p>目前的社区MySQL，对于OFFSET都是在server层进行处理，虽然OFFSET的数据都是需要丢弃的无效数据（之后的代码也可以看出来是直接丢弃），但是存储引擎仍然需要把数据返回给server层。这个过程中，存储引擎需要把数据转换为MySQL数据格式，如果是二级索引还可能需要回表获得全部数据，这些无效的数据增加了额外的开销，如果OFFSET的值较大，开销也会非常明显。</p><p><code>LimitOffsetIterator</code>采用for循环来跳过OFFSET的数据，执行顺序标注1 2 3：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置迭代器的参数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">LimitOffsetIterator::Init</span><span class="params">()</span> </span>&#123; <span class="comment">// 1 首先初始化迭代器</span></span><br><span class="line">  <span class="keyword">if</span> (m_source-&gt;<span class="built_in">Init</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (m_offset &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    m_seen_rows = m_limit;</span><br><span class="line">    m_needs_offset = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    m_seen_rows = <span class="number">0</span>;</span><br><span class="line">    m_needs_offset = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LimitOffsetIterator::Read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (m_seen_rows &gt;= m_limit) &#123; <span class="comment">// 2 初始化时设置了m_seen_rows = m_limit，首先会进入这个分枝</span></span><br><span class="line">                                <span class="comment">// 8 m_limit =limit+offset，所以读完limit+offset还会回到这里</span></span><br><span class="line">    <span class="keyword">if</span> (m_needs_offset) &#123;</span><br><span class="line">      <span class="keyword">for</span> (ha_rows row_idx = <span class="number">0</span>; row_idx &lt; m_offset; ++row_idx) &#123; <span class="comment">// 3 循环OFFSET次</span></span><br><span class="line">        <span class="type">int</span> err = m_source-&gt;<span class="built_in">Read</span>(); <span class="comment">// 4 读取一行数据，InnoDB层并不知道这一行会被过滤掉，所以会走全部的逻辑</span></span><br><span class="line">        <span class="keyword">if</span> (err != <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m_skipped_rows != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">          ++*m_skipped_rows;</span><br><span class="line">        &#125;</span><br><span class="line">        m_source-&gt;<span class="built_in">UnlockRow</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      m_seen_rows = m_offset;</span><br><span class="line">      m_needs_offset = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m_seen_rows &gt;= m_limit) &#123;  <span class="comment">// 9 完成了全部的读取，返回-1，表示顺利读完了</span></span><br><span class="line">      <span class="keyword">if</span> (m_count_all_rows) &#123;</span><br><span class="line">        <span class="keyword">while</span> (m_source-&gt;<span class="built_in">Read</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">          ++*m_skipped_rows;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="type">int</span> result = m_source-&gt;<span class="built_in">Read</span>(); <span class="comment">// 5 已经跳过了OFFSET行，接着来开始正常读取</span></span><br><span class="line">                                       <span class="comment">// 7 这个函数会被上层函数调用多次，直到读完limit+offset行，所以又来了</span></span><br><span class="line">  <span class="keyword">if</span> (m_reject_multiple_rows) &#123;</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">      ++m_seen_rows;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m_seen_rows - m_offset &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">my_error</span>(ER_SUBQUERY_NO_1_ROW, <span class="built_in">MYF</span>(<span class="number">0</span>));</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ++m_seen_rows;</span><br><span class="line">  <span class="keyword">return</span> result; <span class="comment">// 6 读取到的一行，返回一行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上层函数<code>Query_expression::ExecuteIteratorQuery</code>会循环调用<code>LimitOffsetIterator::Read()</code>，直到完成读取：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Query_expression::ExecuteIteratorQuery</span><span class="params">(THD *thd)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123; <span class="comment">// 死循环</span></span><br><span class="line">      <span class="type">int</span> error = m_root_iterator-&gt;<span class="built_in">Read</span>();</span><br><span class="line">      <span class="built_in">DBUG_EXECUTE_IF</span>(<span class="string">&quot;bug13822652_1&quot;</span>, thd-&gt;killed = THD::KILL_QUERY;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (error &gt; <span class="number">0</span> || thd-&gt;<span class="built_in">is_error</span>())  <span class="comment">// Fatal error</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (error &lt; <span class="number">0</span>) <span class="comment">// 收到-1，也就是读完了，就退出</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (thd-&gt;killed)  <span class="comment">// Aborted by user</span></span><br><span class="line">      &#123;</span><br><span class="line">        thd-&gt;<span class="built_in">send_kill_message</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ++*send_records_ptr;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (query_result-&gt;<span class="built_in">send_data</span>(thd, *fields)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      thd-&gt;<span class="built_in">get_stmt_da</span>()-&gt;<span class="built_in">inc_current_row_for_condition</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由代码可知，在社区MySQL的原生逻辑中，InnoDB对LIMIT OFFSET无感，过滤操作都是由server层来处理的，因此产生了大量不必要的操作，InnoDB层不必要的读取、不必要的格式转换、不必要的回表、不必要的代码间交互……也就导致了很多不必要的开销。</p><h2 id="2-2-条件处理"><a href="#2-2-条件处理" class="headerlink" title="2.2 条件处理"></a>2.2 条件处理</h2><p>在设计LIMIT OFFSET下推时，需要考虑到有谓词条件的查询如何处理，这里分成两种情况，一种是谓词条件可以下推的，另一种是不能下推的。</p><h3 id="2-2-1-FilterIterator"><a href="#2-2-1-FilterIterator" class="headerlink" title="2.2.1 FilterIterator"></a>2.2.1 FilterIterator</h3><p>先不考虑ICP的情况，<code>FilterIterator</code>它接收一行流，输出符合条件的行，用来实现WHERE&#x2F;HAVING。</p><p>对一个带有where clause的query，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 首先不讨论优化器对索引下推的优化，针对FilterIterator迭代器，先关闭ICP</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> session optimizer_switch<span class="operator">=</span><span class="string">&#x27;index_condition_pushdown=off&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> c <span class="operator">&gt;</span> <span class="number">10</span> limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>它的调用逻辑是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">0</span>  FilterIterator::Read</span><br><span class="line">#<span class="number">1</span>  in LimitOffsetIterator::Read</span><br><span class="line">#<span class="number">2</span>  in Query_expression::ExecuteIteratorQuery</span><br></pre></td></tr></table></figure><p>因为本文讲的是Limit Offset优化，所以还是带上了Limit Offset clause。如果去掉Limit Offset clause，调用逻辑是这样的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">0</span>  FilterIterator::Read</span><br><span class="line">#<span class="number">1</span>  in Query_expression::ExecuteIteratorQuery</span><br></pre></td></tr></table></figure><p><code>FilterIterator</code>迭代器在内部还会继续调用一些迭代器对象进行读操作，并且进行过滤：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">FilterIterator::Read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (;;) &#123; <span class="comment">// 死循环</span></span><br><span class="line">    <span class="type">int</span> err = m_source-&gt;<span class="built_in">Read</span>();   <span class="comment">// m_source对应其他各种类型的迭代器，例如全表扫描就是TableScanIterator</span></span><br><span class="line">                                  <span class="comment">// 读取一行数据</span></span><br><span class="line">    <span class="keyword">if</span> (err != <span class="number">0</span>) <span class="keyword">return</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> matched = m_condition-&gt;<span class="built_in">val_int</span>();  <span class="comment">// 判断这一行数据是否符合条件</span></span><br><span class="line">                                            <span class="comment">// m_condition 代表 SQL 的 where 条件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">thd</span>()-&gt;killed) &#123;</span><br><span class="line">      <span class="built_in">thd</span>()-&gt;<span class="built_in">send_kill_message</span>();</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* check for errors evaluating the condition */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">thd</span>()-&gt;<span class="built_in">is_error</span>()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!matched) &#123;    <span class="comment">// 如果不匹配的话就continue，继续读下一行</span></span><br><span class="line">      m_source-&gt;<span class="built_in">UnlockRow</span>();</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Successful row.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;          <span class="comment">// 如果匹配的话就直接return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>where条件比较的具体流程这里就不展开了，可以参考这篇文章：<a href="https://www.bigspring.cn/post/16821215761127/">带你读 MySQL 源码：where 条件怎么过滤记录？</a></p><h3 id="2-2-2-Index-Condition-Pushdown"><a href="#2-2-2-Index-Condition-Pushdown" class="headerlink" title="2.2.2 Index Condition Pushdown"></a>2.2.2 Index Condition Pushdown</h3><p>索引下推是指将部分server层负责的事情，交给了引擎层去处理。</p><p>如上节所述，在没有使用ICP的情况下，对于带有where条件的查询，MySQL的处理流程是：</p><ul><li>server层发起读操作</li><li>存储引擎读取索引记录（不是完整的行记录）</li><li>（如果需要回表）根据索引中的主键值，定位并读取完整行记录</li><li>存储引擎把记录交给server层去检测该记录是否满足WHERE条件</li></ul><p>使用ICP的情况下，查询过程：</p><ul><li>server层发起读操作</li><li>存储引擎读取索引记录（不是完整的行记录）</li><li>判断WHERE条件部分能否用索引中的列来做检查，条件不满足，则处理下一行索引记录</li><li>（如果需要回表）条件满足，使用索引中的主键去定位并读取完整的行记录</li><li>存储引擎把记录交给server层，server层检测该记录是否满足WHERE条件的其余部分</li></ul><p>请注意，ICP只会下推index包括的部分，where条件的其余部分还会再返回到server层判断。</p><p>这篇文章主要针对LIMIT OFFSET的实现，因此不涉及ICP的原理，只展开介绍ICP的使用条件：</p><ul><li>只能用于range、 ref、 eq_ref、ref_or_null访问方法；</li><li>只能用于InnoDB和 MyISAM存储引擎及其分区表；</li><li>对InnoDB存储引擎来说，索引下推只适用于二级索引;</li><li>不支持虚拟列上的二级索引；</li><li>引用子查询的条件无法下推；</li><li>引用存储函数的条件无法下推。 存储引擎无法调用存储函数；</li><li>触发条件无法下推；</li><li>条件无法下推到包含对系统变量的引用的派生表。</li></ul><h2 id="2-3-test-if-cheaper-ordering"><a href="#2-3-test-if-cheaper-ordering" class="headerlink" title="2.3 test_if_cheaper_ordering"></a>2.3 test_if_cheaper_ordering</h2><p>如果使用了order by子句，优化器在进行完索引选择后，会走进<code>test_if_cheaper_ordering</code>函数，判断是否有索引能够提供排序，并且使用索引性能更好的话会更新索引的选择，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sbtest1 <span class="keyword">order</span> <span class="keyword">by</span> k limit <span class="number">2</span> <span class="keyword">offset</span> <span class="number">1000</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>   <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> sbtest1 <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">9680</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> filesort <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">1.62</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sbtest1 <span class="keyword">order</span> <span class="keyword">by</span> k limit <span class="number">2</span> <span class="keyword">offset</span> <span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+-------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>   <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+-------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> sbtest1 <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> k_1  <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">12</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+-------+---------------+------+---------+------+------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">3.12</span> sec)</span><br></pre></td></tr></table></figure><p>limit+offset的值会很大程度上影响优化器对索引的选择。</p><h1 id="3-LIMIT-OFFSET下推"><a href="#3-LIMIT-OFFSET下推" class="headerlink" title="3 LIMIT OFFSET下推"></a>3 LIMIT OFFSET下推</h1><h2 id="3-1-实现方案"><a href="#3-1-实现方案" class="headerlink" title="3.1 实现方案"></a>3.1 实现方案</h2><p>虽然叫做LIMIT OFFSET下推，实际上也只是下推了OFFSET。</p><p>在LIMIT OFFSET下推的实现中，优化器会识别能够将LIMIT OFFSET下推到存储引擎的场景，存储引擎接收到下推信息后，直接在引擎层过滤，不需要再返回到server层过滤。</p><p>基于第二节的分析，有以下需要考虑的地方：</p><ul><li>如果有ORDER BY，索引能够提供排序，也就是说ORDER BY的所有item必须能被index处理，即order_by_item[i] &#x3D; index_item[i]（order_by_item[x] &#x3D; index_item[y]也不行）</li><li>对于有ORDER BY的条件，开启LIMIT OFFSET下推后，对应的开销为：limit+offset的二级索引扫描开销+limit的回表开销，需要处理test_if_cheaper_ordering函数中的开销计算</li><li>如果有WHERE，必须开启了ICP，并且index能够处理所有的where item，即where_item[x] &#x3D; index_item[j]</li><li>如果是普通的全表扫描并且没有where，直接下推</li></ul><blockquote><p><del>感觉写太细会被公司追杀</del>（不是），就这样了就这样了</p></blockquote><h2 id="3-2-使用效果"><a href="#3-2-使用效果" class="headerlink" title="3.2 使用效果"></a>3.2 使用效果</h2><h3 id="3-2-1-simple-query"><a href="#3-2-1-simple-query" class="headerlink" title="3.2.1 simple query"></a>3.2.1 simple query</h3><p>指最简单的limit offset clause，不涉及order by、where等。这种情况下，节省的是格式转换的时间。</p><p>开启前：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> SESSION optimizer_switch<span class="operator">=</span><span class="string">&#x27;offset_pushdown=off&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sbtest1 limit <span class="number">2</span> <span class="keyword">offset</span> <span class="number">40000</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> k     <span class="operator">|</span> c                                                                                                                       <span class="operator">|</span> pad                                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">40001</span> <span class="operator">|</span> <span class="number">23269</span> <span class="operator">|</span> <span class="number">65934409306</span><span class="number">-54833178226</span><span class="number">-83299171103</span><span class="number">-73001829127</span><span class="number">-94123355105</span><span class="number">-25127543744</span><span class="number">-93045425748</span><span class="number">-41939295365</span><span class="number">-34800213402</span><span class="number">-04277271955</span> <span class="operator">|</span> <span class="number">74123658087</span><span class="number">-90820734898</span><span class="number">-58586408322</span><span class="number">-50059533663</span><span class="number">-78383737393</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">40002</span> <span class="operator">|</span> <span class="number">26638</span> <span class="operator">|</span> <span class="number">20699358787</span><span class="number">-14533048685</span><span class="number">-79744303993</span><span class="number">-58374349073</span><span class="number">-40433900207</span><span class="number">-44531255318</span><span class="number">-19931413956</span><span class="number">-83692808537</span><span class="number">-99249801003</span><span class="number">-48167126517</span> <span class="operator">|</span> <span class="number">23587435458</span><span class="number">-66265788369</span><span class="number">-37345537494</span><span class="number">-71548591883</span><span class="number">-44228900243</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.43</span> sec)</span><br></pre></td></tr></table></figure><p>开启后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> SESSION optimizer_switch<span class="operator">=</span><span class="string">&#x27;offset_pushdown=on&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sbtest1 limit <span class="number">2</span> <span class="keyword">offset</span> <span class="number">40000</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> k     <span class="operator">|</span> c                                                                                                                       <span class="operator">|</span> pad                                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">40001</span> <span class="operator">|</span> <span class="number">23269</span> <span class="operator">|</span> <span class="number">65934409306</span><span class="number">-54833178226</span><span class="number">-83299171103</span><span class="number">-73001829127</span><span class="number">-94123355105</span><span class="number">-25127543744</span><span class="number">-93045425748</span><span class="number">-41939295365</span><span class="number">-34800213402</span><span class="number">-04277271955</span> <span class="operator">|</span> <span class="number">74123658087</span><span class="number">-90820734898</span><span class="number">-58586408322</span><span class="number">-50059533663</span><span class="number">-78383737393</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">40002</span> <span class="operator">|</span> <span class="number">26638</span> <span class="operator">|</span> <span class="number">20699358787</span><span class="number">-14533048685</span><span class="number">-79744303993</span><span class="number">-58374349073</span><span class="number">-40433900207</span><span class="number">-44531255318</span><span class="number">-19931413956</span><span class="number">-83692808537</span><span class="number">-99249801003</span><span class="number">-48167126517</span> <span class="operator">|</span> <span class="number">23587435458</span><span class="number">-66265788369</span><span class="number">-37345537494</span><span class="number">-71548591883</span><span class="number">-44228900243</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.17</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-2-2-with-ORDER-BY"><a href="#3-2-2-with-ORDER-BY" class="headerlink" title="3.2.2 with ORDER BY"></a>3.2.2 with ORDER BY</h3><p>这种情况可以减少二级索引回表以及格式转换的时间，还会修改优化器索引的选择。</p><p>开启前：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> SESSION optimizer_switch<span class="operator">=</span><span class="string">&#x27;offset_pushdown=off&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sbtest1 <span class="keyword">order</span> <span class="keyword">by</span> k limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">40000</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+---------------+------+---------+------+-------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>   <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>  <span class="operator">|</span> filtered <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+---------------+------+---------+------+-------+----------+----------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> sbtest1 <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">49392</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> filesort <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+------+---------------+------+---------+------+-------+----------+----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sbtest1 <span class="keyword">order</span> <span class="keyword">by</span> k limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">40000</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> k     <span class="operator">|</span> c                                                                                                                       <span class="operator">|</span> pad                                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">16467</span> <span class="operator">|</span> <span class="number">25212</span> <span class="operator">|</span> <span class="number">05524558464</span><span class="number">-21351614823</span><span class="number">-19455180694</span><span class="number">-02508573953</span><span class="number">-46198155011</span><span class="number">-22897663910</span><span class="number">-52979779890</span><span class="number">-02520173241</span><span class="number">-59937693606</span><span class="number">-65525956902</span> <span class="operator">|</span> <span class="number">80171462825</span><span class="number">-39560434349</span><span class="number">-04532096291</span><span class="number">-75702245793</span><span class="number">-27504420316</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.82</span> sec)</span><br></pre></td></tr></table></figure><p>开启后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> SESSION optimizer_switch<span class="operator">=</span><span class="string">&#x27;offset_pushdown=on&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sbtest1 <span class="keyword">order</span> <span class="keyword">by</span> k limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">40000</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>   <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>  <span class="operator">|</span> filtered <span class="operator">|</span> Extra                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> sbtest1 <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> k_1  <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">40001</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">offset</span> pushdown <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sbtest1 <span class="keyword">order</span> <span class="keyword">by</span> k limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">40000</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> k     <span class="operator">|</span> c                                                                                                                       <span class="operator">|</span> pad                                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">17460</span> <span class="operator">|</span> <span class="number">25212</span> <span class="operator">|</span> <span class="number">95786792857</span><span class="number">-67186777060</span><span class="number">-84780501526</span><span class="number">-85412679449</span><span class="number">-09494988083</span><span class="number">-47534487301</span><span class="number">-64881259654</span><span class="number">-58615852578</span><span class="number">-02747184038</span><span class="number">-63230906244</span> <span class="operator">|</span> <span class="number">35737297434</span><span class="number">-65137229735</span><span class="number">-54394668444</span><span class="number">-59481871240</span><span class="number">-15207174851</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.12</span> sec)</span><br></pre></td></tr></table></figure><p>由于k_1不是唯一索引且该优化更改了优化器对索引的选择，所以出现了结果“不一致”的情况。事实上，如果关闭优化时加上force idx，结果和开启优化后是一致的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> SESSION optimizer_switch<span class="operator">=</span><span class="string">&#x27;offset_pushdown=off&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sbtest1 force index (k_1) <span class="keyword">order</span> <span class="keyword">by</span> k limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">40000</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> k     <span class="operator">|</span> c                                                                                                                       <span class="operator">|</span> pad                                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">17460</span> <span class="operator">|</span> <span class="number">25212</span> <span class="operator">|</span> <span class="number">95786792857</span><span class="number">-67186777060</span><span class="number">-84780501526</span><span class="number">-85412679449</span><span class="number">-09494988083</span><span class="number">-47534487301</span><span class="number">-64881259654</span><span class="number">-58615852578</span><span class="number">-02747184038</span><span class="number">-63230906244</span> <span class="operator">|</span> <span class="number">35737297434</span><span class="number">-65137229735</span><span class="number">-54394668444</span><span class="number">-59481871240</span><span class="number">-15207174851</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">3.55</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-2-3-with-WHERE"><a href="#3-2-3-with-WHERE" class="headerlink" title="3.2.3 with WHERE"></a>3.2.3 with WHERE</h3><p>减少了二级索引回表的时间。</p><p>（这一点上，优化器本身也有bug，比如这个场景明明主键索引更快，但是索引可以提供where的判断，就选择了走二级索引，因此开启优化后性能大幅度提升。）</p><p>开启前：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> SESSION optimizer_switch<span class="operator">=</span><span class="string">&#x27;offset_pushdown=off&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sbtest1 <span class="keyword">where</span> k <span class="operator">&gt;</span> <span class="number">10</span> limit <span class="number">2</span> <span class="keyword">offset</span> <span class="number">40000</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>   <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>  <span class="operator">|</span> filtered <span class="operator">|</span> Extra                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> sbtest1 <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> k_1           <span class="operator">|</span> k_1  <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">24696</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="keyword">condition</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+-------+---------------+------+---------+------+-------+----------+-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sbtest1 <span class="keyword">where</span> k <span class="operator">&gt;</span> <span class="number">10</span> limit <span class="number">2</span> <span class="keyword">offset</span> <span class="number">40000</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> k     <span class="operator">|</span> c                                                                                                                       <span class="operator">|</span> pad                                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">17460</span> <span class="operator">|</span> <span class="number">25212</span> <span class="operator">|</span> <span class="number">95786792857</span><span class="number">-67186777060</span><span class="number">-84780501526</span><span class="number">-85412679449</span><span class="number">-09494988083</span><span class="number">-47534487301</span><span class="number">-64881259654</span><span class="number">-58615852578</span><span class="number">-02747184038</span><span class="number">-63230906244</span> <span class="operator">|</span> <span class="number">35737297434</span><span class="number">-65137229735</span><span class="number">-54394668444</span><span class="number">-59481871240</span><span class="number">-15207174851</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">17916</span> <span class="operator">|</span> <span class="number">25212</span> <span class="operator">|</span> <span class="number">04630834215</span><span class="number">-48289588558</span><span class="number">-37060157958</span><span class="number">-19039535998</span><span class="number">-67914209804</span><span class="number">-83953685330</span><span class="number">-63180100401</span><span class="number">-92321018403</span><span class="number">-58551589022</span><span class="number">-27920090585</span> <span class="operator">|</span> <span class="number">48802690852</span><span class="number">-20491511540</span><span class="number">-01465315378</span><span class="number">-08853817627</span><span class="number">-45611825215</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">3.76</span> sec)</span><br></pre></td></tr></table></figure><p>开启后：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sbtest1 <span class="keyword">where</span> k <span class="operator">&gt;</span> <span class="number">10</span> limit <span class="number">2</span> <span class="keyword">offset</span> <span class="number">40000</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+-------+---------------+------+---------+------+-------+----------+----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>   <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>  <span class="operator">|</span> filtered <span class="operator">|</span> Extra                                        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+-------+---------------+------+---------+------+-------+----------+----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> sbtest1 <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> k_1           <span class="operator">|</span> k_1  <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">24696</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="keyword">condition</span>; <span class="keyword">Using</span> <span class="keyword">offset</span> pushdown <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+---------+------------+-------+---------------+------+---------+------+-------+----------+----------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sbtest1 <span class="keyword">where</span> k <span class="operator">&gt;</span> <span class="number">10</span> limit <span class="number">2</span> <span class="keyword">offset</span> <span class="number">40000</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> k     <span class="operator">|</span> c                                                                                                                       <span class="operator">|</span> pad                                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">17460</span> <span class="operator">|</span> <span class="number">25212</span> <span class="operator">|</span> <span class="number">95786792857</span><span class="number">-67186777060</span><span class="number">-84780501526</span><span class="number">-85412679449</span><span class="number">-09494988083</span><span class="number">-47534487301</span><span class="number">-64881259654</span><span class="number">-58615852578</span><span class="number">-02747184038</span><span class="number">-63230906244</span> <span class="operator">|</span> <span class="number">35737297434</span><span class="number">-65137229735</span><span class="number">-54394668444</span><span class="number">-59481871240</span><span class="number">-15207174851</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">17916</span> <span class="operator">|</span> <span class="number">25212</span> <span class="operator">|</span> <span class="number">04630834215</span><span class="number">-48289588558</span><span class="number">-37060157958</span><span class="number">-19039535998</span><span class="number">-67914209804</span><span class="number">-83953685330</span><span class="number">-63180100401</span><span class="number">-92321018403</span><span class="number">-58551589022</span><span class="number">-27920090585</span> <span class="operator">|</span> <span class="number">48802690852</span><span class="number">-20491511540</span><span class="number">-01465315378</span><span class="number">-08853817627</span><span class="number">-45611825215</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------+-------------------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.19</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-3-TPC-H结果"><a href="#3-3-TPC-H结果" class="headerlink" title="3.3 TPC-H结果"></a>3.3 TPC-H结果</h3><p>这里我参考了阿里云PolarDB的测试方法：<a href="https://zhuanlan.zhihu.com/p/540426487">PolarDB MySQL计算下推（三）- Limit Offset下推</a>，用同样规格的数据和同样的方法进行了测试。</p><p>针对四种场景：</p><ul><li>Q1: 普通Limit Offset场景，访问主表且无谓词条件</li><li>Q2: 带有谓词条件的Limit Offset场景，访问主键，且包含主键范围条件</li><li>Q3: 访问二级索引，且包含二级索引范围条件，同时需要回表</li><li>Q4: 带有Order by且可以利用索引序的Limit offset场景</li></ul><p>优化效果为：</p><p><img src="https://pic.imgdb.cn/item/66769b60d9c307b7e98c3ef4.png" alt="limit_offset_pushdown"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> feature </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL捉虫：Binlog Event出现700101时间戳</title>
      <link href="/2024/06/10/MySQL%E6%8D%89%E8%99%AB%EF%BC%9ABinlog%20Event%E5%87%BA%E7%8E%B0700101%E6%97%B6%E9%97%B4%E6%88%B3/"/>
      <url>/2024/06/10/MySQL%E6%8D%89%E8%99%AB%EF%BC%9ABinlog%20Event%E5%87%BA%E7%8E%B0700101%E6%97%B6%E9%97%B4%E6%88%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-现象"><a href="#1-现象" class="headerlink" title="1 现象"></a>1 现象</h1><p>DBA报了一个问题，说是Binlog Event的时间戳出现了700101，版本是 MySQL 5.6.49。</p><blockquote><p>虽然是很老的版本了，但国内还有不少人用，既然自己遇到了并且查清楚了，就顺手记录一下。</p></blockquote><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span>  <span class="built_in">log</span>/mysql-bin.000005.sql</span></span><br><span class="line">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;</span><br><span class="line">/*!40019 SET @@session.max_insert_delayed_threads=0*/;</span><br><span class="line">/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;</span><br><span class="line">DELIMITER /*!*/;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">at 4</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">700101  8:00:00 server <span class="built_in">id</span> 2680489852  end_log_pos 120 CRC32 0x80775fa2     Start: binlog v 4, server v 5.6.49-2.0.0.2-<span class="built_in">log</span> created 700101  8:00:00</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warning: this binlog is either <span class="keyword">in</span> use or was not closed properly.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">at 120</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">700101  8:00:00 server <span class="built_in">id</span> 2680489852  end_log_pos 191 CRC32 0x9d9d0d24     Previous-GTIDs</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">41897c6e-2219-11ef-a135-fa202031598c:1-2</span></span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">End of <span class="built_in">log</span> file</span></span><br><span class="line">ROLLBACK /* added by mysqlbinlog */;</span><br><span class="line">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;</span><br><span class="line">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;</span><br></pre></td></tr></table></figure><p>注：8:00:00是加上了北京时区的时间，实际上是全0的时间戳</p><h1 id="2-调查"><a href="#2-调查" class="headerlink" title="2 调查"></a>2 调查</h1><p>发现errlog里会有如下信息：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Status information:</span><br><span class="line"></span><br><span class="line">Current dir: # 我省略掉了</span><br><span class="line">Running threads: 0  Stack size: 196608</span><br><span class="line">Current locks:</span><br><span class="line">lock: 0x7fbd720c5760:</span><br><span class="line"></span><br><span class="line">lock: 0x7fbd7220bc80:</span><br><span class="line"></span><br><span class="line">lock: 0x7fbd7220b8c0:</span><br><span class="line"></span><br><span class="line">lock: 0x7fbd7220b780:</span><br><span class="line"></span><br><span class="line">lock: 0x7fbd72112f60:</span><br><span class="line"></span><br><span class="line">lock: 0x7fbd7210fd60:</span><br><span class="line"></span><br><span class="line">lock: 0x7fbd72121f60:</span><br><span class="line"></span><br><span class="line">lock: 0x7fbd72154960:</span><br><span class="line"></span><br><span class="line">lock: 0x7fbd72150360:</span><br><span class="line"></span><br><span class="line">lock: 0x7fbe51fc8160:</span><br><span class="line"></span><br><span class="line">lock: 0x7fbe1712a360:</span><br><span class="line"></span><br><span class="line">lock: 0x14cb5c0:</span><br><span class="line"></span><br><span class="line">lock: 0x14cb500:</span><br><span class="line"></span><br><span class="line">lock: 0x14ca780:</span><br><span class="line"></span><br><span class="line">lock: 0x14ca6c0:</span><br><span class="line"></span><br><span class="line">lock: 0x14ca600:</span><br><span class="line"></span><br><span class="line"># 略</span><br></pre></td></tr></table></figure><p>这是SIGHUP信号导致的（<a href="https://dev.mysql.com/doc/refman/5.7/en/unix-signal-response.html%EF%BC%89%EF%BC%8C">https://dev.mysql.com/doc/refman/5.7/en/unix-signal-response.html），</a><br>&#x2F;proc&#x2F;$PID&#x2F;status的SigCgt 也可以表示当前进程捕获到了SIGHUP信号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SigPnd: 0000000000000000</span><br><span class="line">ShdPnd: 0000000000000000</span><br><span class="line">SigBlk: 0000000000087007</span><br><span class="line">SigIgn: 0000000000001006</span><br><span class="line">SigCgt: 00000001800066e9</span><br></pre></td></tr></table></figure><p>SigCgt每一位代表一个信号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">kill</span> -l</span></span><br><span class="line"> 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP</span><br><span class="line"> 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1</span><br><span class="line">11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM</span><br><span class="line">16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP</span><br><span class="line">21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR</span><br><span class="line">31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-1  64) SIGRTMAX</span><br></pre></td></tr></table></figure><p>可以确认mysqld进程收到了SIGHUP信号。</p><p>SIGHUP会导致实例重新装载grant table、flush tables、flush logs、flush 各种缓存，有点类似于重启实例。</p><p>mysqld调用函数signal_hand处理接收到的信号，如果是SIGHUP信号，会调用函数reload_acl_and_cache来执行刚才所说的一系列操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">0</span>  <span class="built_in">reload_acl_and_cache</span> (thd=<span class="number">0x0</span>, options=<span class="number">32815</span>, tables=<span class="number">0x0</span>, write_to_binlog=<span class="number">0x7fbd721af5dc</span>)</span><br><span class="line">#<span class="number">1</span>  <span class="number">0x000000000069dd3d</span> <span class="function">in <span class="title">signal_hand</span> <span class="params">(arg=<span class="number">0x0</span>)</span> </span></span><br></pre></td></tr></table></figure><p>需要注意的是函数reload_acl_and_cache的输入参数中，thd的值是空的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">pthread_handler_t</span> <span class="title">signal_hand</span><span class="params">(<span class="type">void</span> *arg MY_ATTRIBUTE((unused)))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// ... 省略一些无关代码</span></span><br><span class="line">      <span class="keyword">switch</span> (sig) &#123;</span><br><span class="line">    <span class="keyword">case</span> SIGHUP:</span><br><span class="line">      <span class="keyword">if</span> (!abort_loop)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="type">int</span> not_used;</span><br><span class="line">        <span class="built_in">mysql_print_status</span>();   <span class="comment">// Print some debug info</span></span><br><span class="line">        <span class="built_in">reload_acl_and_cache</span>((THD*) <span class="number">0</span>,</span><br><span class="line">                             (REFRESH_LOG | REFRESH_TABLES | REFRESH_FAST |</span><br><span class="line">                              REFRESH_GRANT |</span><br><span class="line">                              REFRESH_THREADS | REFRESH_HOSTS),</span><br><span class="line">                             (TABLE_LIST*) <span class="number">0</span>, &amp;not_used); <span class="comment">// Flush logs</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* reenable logs after the options were reloaded */</span></span><br><span class="line">      <span class="comment">// ...省略一些无关代码</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  <span class="comment">// ...省略一些无关代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数reload_acl_and_cache中，会调用类似flush binary logs的逻辑，结束当前binlog，开启下一个binlog。</p><p>但是，正如之前所说，传入该函数的thd为空值，所以这个函数会new一个新的thd，但是MySQL5.6的逻辑中，THD的构造函数和初始化都没有设置时间，set_globals函数也没有设置时间，这就导致刷新日志时，当前线程的时间都是0（或者说不确定值，取决于编译器）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> ((options &amp; REFRESH_BINARY_LOG) || (options &amp; REFRESH_RELAY_LOG ))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      If reload_acl_and_cache() is called from SIGHUP handler we have to</span></span><br><span class="line"><span class="comment">      allocate temporary THD for execution of binlog/relay log rotation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    THD *tmp_thd= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (!thd &amp;&amp; (thd= (tmp_thd= <span class="keyword">new</span> THD)))</span><br><span class="line">    &#123;</span><br><span class="line">      thd-&gt;thread_stack= (<span class="type">char</span> *) (&amp;tmp_thd);</span><br><span class="line">      thd-&gt;<span class="built_in">store_globals</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (options &amp; REFRESH_BINARY_LOG)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Writing this command to the binlog may result in infinite loops</span></span><br><span class="line"><span class="comment">        when doing mysqlbinlog|mysql, and anyway it does not really make</span></span><br><span class="line"><span class="comment">        sense to log it automatically (would cause more trouble to users</span></span><br><span class="line"><span class="comment">        than it would help them)</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      tmp_write_to_binlog= <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (mysql_bin_log.<span class="built_in">is_open</span>())</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (mysql_bin_log.<span class="built_in">rotate_and_purge</span>(thd, <span class="literal">true</span>))</span><br><span class="line">          *write_to_binlog= <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 之后略</span></span><br></pre></td></tr></table></figure><p>之后在写入binlog event时，可以看到：</p><p><img src="https://pic.imgdb.cn/item/66654a175e6d1bfa0585d69c.png" alt="gdb_pic"></p><p>这就导致binlog日志出现了700101的时间戳。</p><h1 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3 解决方案"></a>3 解决方案</h1><p>在THD::init()函数中设置线程时间为当前时间即可。</p><p>MySQL在5.7.5之后的版本和8.0的全部版本都修复了这个问题，可以参考相关patch：<a href="https://github.com/mysql/mysql-server/commit/917fc1b47c14e560e598bfed787e699b3096d4bf">https://github.com/mysql/mysql-server/commit/917fc1b47c14e560e598bfed787e699b3096d4bf</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Bugs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL源码分析：优化器深潜（二）- PREPARE的执行逻辑</title>
      <link href="/2024/06/09/MySQL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%9A%E4%BC%98%E5%8C%96%E5%99%A8%E6%B7%B1%E6%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89%20-%20PREPARE%E7%9A%84%E6%89%A7%E8%A1%8C%E9%80%BB%E8%BE%91/"/>
      <url>/2024/06/09/MySQL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%9A%E4%BC%98%E5%8C%96%E5%99%A8%E6%B7%B1%E6%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89%20-%20PREPARE%E7%9A%84%E6%89%A7%E8%A1%8C%E9%80%BB%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<p>resolve主要对应prepare函数（sql&#x2F;sql_resolver.cc）。</p><p>查询语句在经过parse后，就构成了最初级的抽象语法树(AST)，即query expression作为root的嵌套结构。prepare阶段主要完成2件事情：</p><ol><li>负责对AST的resolve，包括所有涉及的tables&#x2F;columns，以及每一个查询中的表达式(Item)。对子查询进行初步解析，尝试是否可以合并到外层；</li><li>基于启发式规则，完成一些query transformation，包括将子查询转换为semi-join，outer join简化为inner join，derived table展开到上层，消除常量表达式等。</li></ol><p>这一阶段的transformation是完全基于启发式的，不考虑代价因素。</p><span id="more"></span><blockquote><p>代码基于MySQL8.0.32。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql_execute_command</span><br><span class="line">  |-&gt; Sql_cmd_dml::execute</span><br><span class="line">  |  |-&gt; Sql_cmd_dml::prepare</span><br><span class="line">  |  |-&gt; lock_tables</span><br><span class="line">  |  |-&gt; Sql_cmd_dml::execute_inner <span class="comment">// SELECT_LEX没有execute方法</span></span><br><span class="line">  |  |                              <span class="comment">// 会调用unit-&gt;execute</span></span><br><span class="line">  |  |-&gt; <span class="comment">// do partial cleanup</span></span><br><span class="line">  |  |-&gt; THD::save_current_query_costs</span><br><span class="line">  |  |-&gt; THD::update_previous_found_rows</span><br><span class="line">  |  |-&gt; reset_statement_timer</span><br></pre></td></tr></table></figure><p>对Sql_cmd_dml::prepare进行展开：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line">Sql_cmd_dml::prepare</span><br><span class="line">|-&gt; Sql_cmd_select::precheck <span class="comment">// 检查是否有权限</span></span><br><span class="line">|  |-&gt; check_global_access <span class="comment">// 检查是否有全局访问权限</span></span><br><span class="line">|  |-&gt; (<span class="keyword">if</span> tables) check_table_access <span class="comment">// 检查是否有表的访问权限</span></span><br><span class="line">|  |-&gt; (<span class="keyword">else</span>) check_access <span class="comment">// 检查是否有全局和DB的访问权限</span></span><br><span class="line">|  |-&gt; check_locking_clause_access <span class="comment">// 如果query有加锁，是否有权限执行</span></span><br><span class="line">|-&gt; open_tables_for_query <span class="comment">// 将所有需要访问的表打开，获得TABLE表对象。</span></span><br><span class="line">|  |                      <span class="comment">// 会先获取MDL的S锁，然后才获取表资源，防止对同一个表的元信息出现并发读写</span></span><br><span class="line">|  |-&gt; open_tables</span><br><span class="line">|  |  | <span class="comment">// 如果是执行LOCK TABLES或者执行的DDL（non-lock tables状态），需要获得可以升级的semi-exclusive元数据锁SNW、 SNRW</span></span><br><span class="line">|  |  | <span class="comment">// 如果是在LOCK TABLES状态下，无法获取新的锁，所以需要检查线程已经获得了的锁</span></span><br><span class="line">|  |  |-&gt; (<span class="keyword">if</span> thd-&gt;locked_tables_mode) open_tables_check_upgradable_mdl</span><br><span class="line">|  |  |-&gt; (<span class="keyword">if</span> thd-&gt;locked_tables_mode) acquire_backup_lock_in_lock_tables_mode</span><br><span class="line">|  |  |-&gt; (<span class="keyword">else</span>) lock_table_names <span class="comment">// 获取强MDL锁 (SRO, SNW, SNRW)</span></span><br><span class="line">|  |  |-&gt; open_and_process_table <span class="comment">// 对每张表循环进行该操作，该步骤结束后还会对MRG_MYISAM表进行一些操作，这里略</span></span><br><span class="line">|  |     | <span class="comment">// 如果是information_schema表，需要创建schema表</span></span><br><span class="line">|  |     |-&gt; (<span class="keyword">if</span> schema_table) mysql_schema_table <span class="comment">// 创建I_S表</span></span><br><span class="line">|  |     |-&gt; (<span class="keyword">if</span> schema_table) check_and_update_table_version <span class="comment">// 检查版本是否一致，来确定是否需要重新parse</span></span><br><span class="line">|  |     | <span class="comment">// 如果是information_schema表，到了这里直接结束，返回</span></span><br><span class="line">|  |     |-&gt; open_table <span class="comment">// 填充Table_ref::table</span></span><br><span class="line">|  |     |  |-&gt; open_table_get_mdl_lock</span><br><span class="line">|  |     |  |  |-&gt; MDL_context::<span class="built_in">acquire_lock</span>() <span class="comment">// 获取lock，如果遇到锁冲突，那么等待冲突的锁被释放</span></span><br><span class="line">|  |     |  | <span class="comment">// 如果对象为view，需要做额外的操作，在此先略过不表</span></span><br><span class="line">|  |     |  | <span class="comment">// 找到一个空闲的TABLE和TABLE_SHARE或者new出来两个新的</span></span><br><span class="line">|  |     |  |-&gt; TABLE::init</span><br><span class="line">|  |     |-&gt; check_and_update_table_version <span class="comment">// 检查版本是否一致，来确定是否需要重新parse</span></span><br><span class="line">|  |-&gt; open_secondary_engine_tables <span class="comment">// 判断secondary engine是否能做这个query，如果能的话就用它来做</span></span><br><span class="line">|-&gt; Sql_cmd_select::prepare_inner <span class="comment">// statement-specific preparation</span></span><br><span class="line">   |-&gt; <span class="comment">// 根据不同的sql command类型，首先初始化不同类型的result</span></span><br><span class="line">   | <span class="comment">// 如果这条query没有UNION/INTERSECT/EXCEPT和multi-level ORDER，认为它是simple的</span></span><br><span class="line">   | <span class="comment">// 也就是m_query_term的类型就是Query_block</span></span><br><span class="line">   | <span class="comment">// 对于simple的unit，会直接调用当前唯一子节点select的prepare</span></span><br><span class="line">   | <span class="comment">// 否则则调用unit-&gt;prepare，并且在unit-&gt;prepare里会遍历调用select-&gt;prepare</span></span><br><span class="line">   | <span class="comment">// Query_block是代表查询块，而Query_expression是包含多个查询块的查询表达式，包括UNION AND/OR的查询块</span></span><br><span class="line">   | <span class="comment">//（如SELECT FROM t1 union SELECT FROM t2）或者有多Level的ORDER BY/LIMIT</span></span><br><span class="line">   | <span class="comment">// (如SELECT * FROM t1 ORDER BY a LIMIT 10) ORDER BY b LIMIT 5</span></span><br><span class="line">   |-&gt; (<span class="keyword">if</span> simple) Query_block::prepare <span class="comment">// select-&gt;prepare，不排除select可能有subquery。具体分析见else</span></span><br><span class="line">   |-&gt; (<span class="keyword">else</span>) Query_expression::prepare <span class="comment">// unit-&gt;prepare</span></span><br><span class="line">      | <span class="comment">// for循环，遍历这个Query_expression中的每一个Query_block</span></span><br><span class="line">      |-&gt; Query_block::prepare <span class="comment">// 解析表和列信息。</span></span><br><span class="line">      |  |                     <span class="comment">// 解析所有表达式，例如..</span></span><br><span class="line">      |  |                     <span class="comment">// ..WHERE子句、JOIN条件、GROUP BY子句、HAVING子句、ORDER BY子句、LIMIT子句</span></span><br><span class="line">      |  |                     <span class="comment">// 递归处理所有的子查询。</span></span><br><span class="line">      |  |                     <span class="comment">// 对AST树执行永久转换，包括semi-join转换、derived table转换、..</span></span><br><span class="line">      |  |                     <span class="comment">// ..消除常量值和冗余子句（例如 ORDER BY、GROUP BY）</span></span><br><span class="line">      |  |-&gt; propagate_nullability <span class="comment">// 传递null到join的内表列表，判断表是否nullable（可能包含全为null的行）</span></span><br><span class="line">      |  |                         <span class="comment">// nullable更准确的说法是contain_null_row</span></span><br><span class="line">      |  |                         <span class="comment">// 如果是nullable，access method不能为EQ_REF，outer join不能优化为inner join</span></span><br><span class="line">      |  |-&gt; <span class="comment">// 先根据Query_block的位置来判断是否可以merge derived table</span></span><br><span class="line">      |  | <span class="comment">// 一个Query_block允许merge需要满足以下三个条件之一：</span></span><br><span class="line">      |  | <span class="comment">// 1. 该Query_block是最外层的</span></span><br><span class="line">      |  | <span class="comment">// 2. 该Query_block的master在SELECT STATEMENT中不存在子查询</span></span><br><span class="line">      |  | <span class="comment">// 3. 如果该Query_block是第一层子查询，则只要该SQL是SELECT或者SET语句即可</span></span><br><span class="line">      |  | <span class="comment">//    如果不是第一层子查询，则只要外层Query_block是允许merge即可</span></span><br><span class="line">      |  | <span class="comment">// 之后在Query_block::resolve_placeholder_tables函数里判断是否支持和进行merge</span></span><br><span class="line">      |  | <span class="comment">// 对于derived table只有两种处理方式: 1. 合并到上层，即消除掉了 2. 物化</span></span><br><span class="line">      |  |-&gt; Query_block::setup_tables <span class="comment">// 解析和设置查询块的leaf_tables</span></span><br><span class="line">      |  |  |                          <span class="comment">// 构建leaf_tables，包括base tables和derived tables列表，..</span></span><br><span class="line">      |  |  |                          <span class="comment">// ..用于后续优化</span></span><br><span class="line">      |  |  |-&gt; make_leaf_tables <span class="comment">// 递归设置leaf tables</span></span><br><span class="line">      |  |  |-&gt; <span class="comment">// 遍历每一个leaf tables，设置table no，设置hint，统计leaf table的数量和分区表的数量</span></span><br><span class="line">      |  |-&gt; (如果有) Query_block::resolve_placeholder_tables <span class="comment">// 处理derived table、view和table function</span></span><br><span class="line">      |  |  | <span class="comment">// for循环：遍历每一张表</span></span><br><span class="line">      |  |  |-&gt; <span class="comment">// 如果该表已经merged过了，或是由于使用transform_grouped_to_derived()被调用到，</span></span><br><span class="line">      |  |  |-&gt; <span class="comment">// 已经决定使用materialized table方式，continue</span></span><br><span class="line">      |  |  |-&gt; Table_ref::resolve_derived <span class="comment">// 递归解析derived table和view</span></span><br><span class="line">      |  |  |  |                           <span class="comment">// setup_tables不会递归调用，而是只解决本层的tables</span></span><br><span class="line">      |  |  |  |                           <span class="comment">// 并统计出本层derived table的个数</span></span><br><span class="line">      |  |  |  |                           <span class="comment">// 它会在这里专门递归处理derived table对应的Query_expression</span></span><br><span class="line">      |  |  |  |-&gt; Query_expression::prepare <span class="comment">// 对derived table对应的子查询做递归处理</span></span><br><span class="line">      |  |  |-&gt; Table_ref::is_mergeable</span><br><span class="line">      |  |  |  | <span class="comment">// 该派生表能否进行merge，除了上面提到的基本约束外，还要满足：</span></span><br><span class="line">      |  |  |  | <span class="comment">// 1. 派生表没有被标记为需要物化。</span></span><br><span class="line">      |  |  |  | <span class="comment">//    例如，创建视图时指定CREATE ALGORITHM=TEMPTABLE VIEW，那么对这个视图查询不会进行merge</span></span><br><span class="line">      |  |  |  | <span class="comment">// 2. 该派生表对应的Query_block不包含GROUP，HAVING，DISTINCT，LIMIT， WINDOWS，集合操作（UNION，INTERSECT等）</span></span><br><span class="line">      |  |  |  | <span class="comment">// 3. 该派生表对应的Query_block中的表数量不为0</span></span><br><span class="line">      |  |  |  | <span class="comment">// 4. HINT或者optimizer_switch没有禁止derived_merge</span></span><br><span class="line">      |  |  |-&gt; (<span class="keyword">if</span> is_mergable) Query_block::merge_derived <span class="comment">// 改变Query_expression/Query_block结构</span></span><br><span class="line">      |  |  |  |                                            <span class="comment">// 判断这个derived table或者view是否可以被merge，可以则merge</span></span><br><span class="line">      |  |  |  |                                            <span class="comment">// 即将Query expression合并到外层query block中</span></span><br><span class="line">      |  |  |  | <span class="comment">// 再做一系列的检查看是否可以merge:</span></span><br><span class="line">      |  |  |  | <span class="comment">// 1. 外层query block是否允许merge，例如CREATE VIEW/SHOW CREATE这样的命令，不允许做merge</span></span><br><span class="line">      |  |  |  | <span class="comment">// 2. 基于启发式，检查derived子查询的投影列是否有子查询，有则不做merge，这里就是认为用户这么定义derived table</span></span><br><span class="line">      |  |  |  | <span class="comment">//    意思就是要做物化而不是展开的，所以不merge到外层</span></span><br><span class="line">      |  |  |  | <span class="comment">// 3. 如果外层有straight_join，而derived子查询中有semi-join/anti-join，则不允许merge</span></span><br><span class="line">      |  |  |  | <span class="comment">// 4. 外层表的数量达到MySQL能处理的最大值 (61个)</span></span><br><span class="line">      |  |  |  | <span class="comment">// 通过检查后，开始merge:</span></span><br><span class="line">      |  |  |  | <span class="comment">// 1. 把内层join列表合并到外层中</span></span><br><span class="line">      |  |  |  | <span class="comment">// 2. 把where条件与外层的where条件做AND组合</span></span><br><span class="line">      |  |  |  | <span class="comment">// 3. 把投影列合并到外层投影列中</span></span><br><span class="line">      |  |  |-&gt; <span class="comment">// 如果derived table/view执行了merge，continue</span></span><br><span class="line">      |  |  |-&gt; (<span class="keyword">if</span> is_table_function) Table_ref::setup_table_function <span class="comment">// 处理表函数</span></span><br><span class="line">      |  |  | <span class="comment">// 对于剩下不能merge的derived table，会转为物化方式去处理。</span></span><br><span class="line">      |  |  | <span class="comment">// 但此时只是做一些变量设置等预处理，实际的物化执行是在Execute阶段执行。</span></span><br><span class="line">      |  |  |-&gt; (<span class="keyword">if</span> table is <span class="literal">nullptr</span>) Table_ref::setup_materialized_derived <span class="comment">// 设置物化Derived Table</span></span><br><span class="line">      |  |  |  |-&gt; Table_ref::setup_materialized_derived_tmp_table <span class="comment">// 设置一个临时表包含物化derived table的所有行数据</span></span><br><span class="line">      |  |  |  |-&gt; Query_expression::check_materialized_derived_query_blocks <span class="comment">// 设置属于当前derived table所在的查询块结构</span></span><br><span class="line">      |  |  | <span class="comment">// 退出for循环（from Query_block::resolve_placeholder_tables）</span></span><br><span class="line">      |  |-&gt; Query_block::check_view_privileges <span class="comment">// 如果是view，还有一些权限检查</span></span><br><span class="line">      |  |-&gt; setup_natural_join_row_types <span class="comment">// 预先计算并存储 NATURAL/USING 连接的行类型</span></span><br><span class="line">      |  |  | <span class="comment">// while循环</span></span><br><span class="line">      |  |  |-&gt; store_top_level_join_columns</span><br><span class="line">      |  |  |  |-&gt; store_top_level_join_columns <span class="comment">// while循环：递归处理所有的 natural/using 节点</span></span><br><span class="line">      |  |  |  |-&gt; mark_common_columns <span class="comment">// 找出 join 的左右表之间的共同列，并将其转化为 join on</span></span><br><span class="line">      |  |  |  |-&gt; store_natural_using_join_columns <span class="comment">// 标准构造select *的输出列，并储存到join_columns中</span></span><br><span class="line">      |  |  |-&gt; Table_ref::first_leaf_for_name_resolution</span><br><span class="line">      |  |  | <span class="comment">// 退出while循环（from setup_natural_join_row_types）</span></span><br><span class="line">      |  |  |-&gt; Table_ref::first_leaf_for_name_resolution</span><br><span class="line">      |  |-&gt; Query_block::setup_wild <span class="comment">// 将SELECT *的通配符展开成具体的fields</span></span><br><span class="line">      |  |-&gt; Query_block::setup_base_ref_items <span class="comment">// 预估将要加入到 base_ref_items 中元素的个数，申请空间</span></span><br><span class="line">      |  |  | <span class="comment">// base_ref_items记录了所有Item的位置，方便查询块的其他Item可以进行引用，</span></span><br><span class="line">      |  |  | <span class="comment">// 或者通过Item_ref及其Item_ref子类进行直接引用。</span></span><br><span class="line">      |  |  | <span class="comment">// 例如子查询的引用（Item_view_ref）、 聚合函数引用（Item_aggregate_ref）、</span></span><br><span class="line">      |  |  | <span class="comment">// 外查询列的引用（Item_outer_ref）、subquery子查询产生NULL value的引用辅助（Item_ref_null_helper）</span></span><br><span class="line">      |  |  | <span class="comment">// base_ref_items 的最终大小与 group by、order by、select cluase、</span></span><br><span class="line">      |  |  | <span class="comment">// having clause、聚合函数、窗口函数以及标量子查询的数量有关</span></span><br><span class="line">      |  |-&gt; setup_fields <span class="comment">// 对select_fields进行列权限检查、初始化base_ref_items</span></span><br><span class="line">      |  |  | <span class="comment">// for循环：遍历 select item fields，并将处理好的 item 放入 base_ref_items 中</span></span><br><span class="line">      |  |  |-&gt; Item::split_sum_func <span class="comment">// 提取表达式中的聚合函数及其参数，放入 fields 当中</span></span><br><span class="line">      |  |  | <span class="comment">// 退出for循环（from setup_fields）</span></span><br><span class="line">      |  |-&gt; Query_block::setup_conds <span class="comment">// 解析和关联列到Where和Join条件</span></span><br><span class="line">      |  |  |-&gt; simplify_const_condition <span class="comment">// 如果发现可以删除的const条件，则会用true/false来替代整个的条件</span></span><br><span class="line">      |  |  |-&gt; (<span class="keyword">if</span> nested_join) Query_block::setup_join_cond</span><br><span class="line">      |  |  |  | <span class="comment">// for循环，遍历所有的table</span></span><br><span class="line">      |  |  |  |-&gt; Query_block::setup_join_cond <span class="comment">// 如果有nested join，则递归</span></span><br><span class="line">      |  |  |  |-&gt; <span class="comment">// 如果存在A [LEFT] JOIN B ON join_cond，则 TABLE_LIST-&gt;join_cond 在解析后不为空</span></span><br><span class="line">      |  |  |  |-&gt; <span class="comment">// 但优化过程中 inner join 的 join cond 会被优化进where_cond 里然后变为NULL</span></span><br><span class="line">      |  |  |  | <span class="comment">// for循环结束（from simplify_const_condition）</span></span><br><span class="line">      |  |-&gt; Query_block::setup_group <span class="comment">// 解析和设置GROUP BY语句</span></span><br><span class="line">      |  |  |-&gt; find_order_in_list <span class="comment">// 对于GROUP BY和ORDER BY子句的列，找到实际的列</span></span><br><span class="line">      |  |  |                      <span class="comment">// 如果是GROUP BY，搜索select fields和table columns</span></span><br><span class="line">      |  |  |                      <span class="comment">// 如果是ORDER BY，只搜索select fields</span></span><br><span class="line">      |  |-&gt; m_having_cond-&gt;fix_fields <span class="comment">// 处理having子句的条件</span></span><br><span class="line">      |  |-&gt; Query_block::resolve_rollup <span class="comment">// 解析和设置ROLLUP语句</span></span><br><span class="line">      |  |-&gt; Query_block::resolve_rollup_item</span><br><span class="line">      |  |-&gt; setup_order <span class="comment">// 解析和设置ORDER BY语句</span></span><br><span class="line">      |  |  |-&gt; find_order_in_list</span><br><span class="line">      |  |-&gt; fulltext_uses_rollup_column <span class="comment">// 检查是否有对MATCH不合理的调用</span></span><br><span class="line">      |  |                               <span class="comment">// MATCH只适用于基本列，不能和rollup一起用</span></span><br><span class="line">      |  |-&gt; Query_block::resolve_limits <span class="comment">// 解析OFFSET和LIMIT子句</span></span><br><span class="line">      |  |-&gt; Query_block::remove_redundant_subquery_clauses <span class="comment">// 去掉一些不规范的多余的语句</span></span><br><span class="line">      |  |  | <span class="comment">// 对于Table Subquery的表达式，通常是IN/ANY/ALL/EXISTS/etc，</span></span><br><span class="line">      |  |  | <span class="comment">// 如果没有聚合函数和Having子句，通常可以考虑删除不必要的ORDER BY/DISTINCT/GROUP BY</span></span><br><span class="line">      |  |  | <span class="comment">// 支持三种REMOVE_ORDER | REMOVE_DISTINCT | REMOVE_GROUP</span></span><br><span class="line">      |  |  | <span class="comment">// 如果是SINGLEROW_SUBS的子查询，只考虑删除REMOVE_ORDER</span></span><br><span class="line">      |  |-&gt; Window::setup_windows1 <span class="comment">// 解析和设置Window函数</span></span><br><span class="line">      |  |  | <span class="comment">// for循环，遍历window函数列表</span></span><br><span class="line">      |  |  |-&gt; Window::resolve_window_ordering <span class="comment">// 解析m_partition_by</span></span><br><span class="line">      |  |  |-&gt; Window::resolve_window_ordering <span class="comment">// 解析m_order_by</span></span><br><span class="line">      |  |  | <span class="comment">// 退出for循环（from Window::setup_windows1）</span></span><br><span class="line">      |  |  |-&gt; <span class="comment">// 处理inter-window的引用关系，但必须是一个有向无环图（DAG）</span></span><br><span class="line">      |  |  | <span class="comment">// for循环，遍历window函数列表</span></span><br><span class="line">      |  |  |-&gt; Window::check_unique_name <span class="comment">// 是否唯一名字</span></span><br><span class="line">      |  |  |-&gt; Window::setup_ordering_cached_items <span class="comment">// 创建window order by的引用items</span></span><br><span class="line">      |  |  |                                       <span class="comment">// 传入参数是w.m_partition_by</span></span><br><span class="line">      |  |  |-&gt; Window::setup_ordering_cached_items <span class="comment">// 创建window partition by的引用items</span></span><br><span class="line">      |  |  |                                       <span class="comment">// 传入参数是w.m_order_by</span></span><br><span class="line">      |  |  |-&gt; Window::check_window_functions1 <span class="comment">// 检查窗口函数特征</span></span><br><span class="line">      |  |  | <span class="comment">// 退出for循环（from Window::setup_windows1）</span></span><br><span class="line">      |  |-&gt; Query_block::setup_order_final <span class="comment">// 完全解析完query block后，对ORDER BY子句做最后的设置</span></span><br><span class="line">      |  |                                  <span class="comment">// 检查 ORDER BY 子句是否多余，拆分任何聚合函数</span></span><br><span class="line">      |  |-&gt; Query_block::resolve_subquery</span><br><span class="line">      |  |  | <span class="comment">// 解析条件中带有子查询的语句，做一些早期的无限制的子查询转换，包括：</span></span><br><span class="line">      |  |  | <span class="comment">// 1. 标记subquery是否变成semi-join</span></span><br><span class="line">      |  |  | <span class="comment">// 2. 标记subquery是否执行时采用materialization方案</span></span><br><span class="line">      |  |  | <span class="comment">// 3. 如果目前还没有子查询的执行方式，即无法使用semi-join/anti-join执行的子查询，做IN-&gt;EXISTS转换</span></span><br><span class="line">      |  |  | <span class="comment">// 4. 重写single-column的IN/ALL/ANY子查询</span></span><br><span class="line">      |  |  | <span class="comment">// 5. 如果是ALL/ANY单值subquery谓词，尝试用MIN/MAX子查询转换</span></span><br><span class="line">      |  |-&gt; Query_block::transform_scalar_subqueries_to_join_with_derived <span class="comment">// 标量子查询转换成Derived Table</span></span><br><span class="line">      |  |-&gt; Item::split_sum_func2<span class="comment">// 提取表达式中的聚合函数及其参数，放入 fields 当中.</span></span><br><span class="line">      |  |-&gt; setup_ftfuncs <span class="comment">// 全文索引的prepare工作</span></span><br><span class="line">      |  |-&gt; Query_block::flatten_subqueries <span class="comment">// 扁平化子查询，完成子查询到semijoin的最终转换</span></span><br><span class="line">      |  |-&gt; Query_block::apply_local_transforms <span class="comment">// 应用当前查询块转换</span></span><br><span class="line">      |  |  |-&gt; Query_block::push_conditions_to_derived_tables <span class="comment">// 下推条件到Derived Table</span></span><br><span class="line">      |  |  |  | <span class="comment">// 循环每一个物化表处理 WHERE condition</span></span><br><span class="line">      |  |  |  |-&gt; Condition_pushdown::make_cond_for_derived <span class="comment">// 生成可以下推到派生表的条件</span></span><br><span class="line">      |  |  |  |  |-&gt; Condition_pushdown::extract_cond_for_table <span class="comment">// 提取和当前只和派生表相关的条件</span></span><br><span class="line">      |  |  |  |  |-&gt; Condition_pushdown::push_past_window_functions <span class="comment">// 生成推到派生表HAVING Clause的条件</span></span><br><span class="line">      |  |  |  |  |-&gt; Condition_pushdown::push_past_group_by <span class="comment">// 生成推到派生表 WHERER Clause的条件</span></span><br><span class="line">      |  |  |  |  |  |-&gt;Condition_pushdown::make_remainder_cond <span class="comment">// 生成下推之后剩余的条件</span></span><br><span class="line">      |  |  |  | <span class="comment">// 自顶向下，产生的下推条件可以被下推到嵌套在派生表内部派生表</span></span><br><span class="line">      |  |  |  |-&gt; Query_block::push_conditions_to_derived_tables <span class="comment">// 递归</span></span><br><span class="line">      |  |-&gt; Window::eliminate_unused_objects <span class="comment">// 消除无用多余的窗口函数</span></span><br><span class="line">      |  |-&gt; Query_block::resolve_rollup_wfs <span class="comment">// 是否在存在ROLLUP的情况下，将窗口函数内的分组依据字段引用替换为引用</span></span><br><span class="line">      |-&gt; <span class="comment">// 处理每一个item</span></span><br><span class="line">      | <span class="comment">// 退出for循环（from Query_expression::prepar）</span></span><br><span class="line">      |-&gt; Query_expression::check_materialized_derived_query_blocks</span><br><span class="line">      | <span class="comment">// SQL feature T101: 递归计算可空(nullable)数组</span></span><br><span class="line">      |-&gt; Query_expression::prepare_query_term</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL源码分析：优化器深潜（一）- SELECT的语法树结构</title>
      <link href="/2024/04/27/MySQL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%9A%E4%BC%98%E5%8C%96%E5%99%A8%E6%B7%B1%E6%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89-SELECT%E7%9A%84%E8%AF%AD%E6%B3%95%E6%A0%91%E7%BB%93%E6%9E%84/"/>
      <url>/2024/04/27/MySQL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%9A%E4%BC%98%E5%8C%96%E5%99%A8%E6%B7%B1%E6%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89-SELECT%E7%9A%84%E8%AF%AD%E6%B3%95%E6%A0%91%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>优化器是一个非常复杂的模块，我将优化器的分析分为三篇，分别是前瞻（语法树结构）、重写、和优化。</p><p>语法树的解析属于parser的部分，但优化器会对语法树进行解析（resolve）和变换（transform），所以在这里也需要介绍语法树的相关内容。</p><p>本文是第一部分：SELECT的语法树结构。</p><span id="more"></span><blockquote><p>代码基于MySQL8.0.32。</p></blockquote><h1 id="0-序"><a href="#0-序" class="headerlink" title="0 序"></a>0 序</h1><p>MySQL的查询优化器是一个非常高级的系统组件，它的主要作用是为数据库优化器提供最佳执行计划，以实现最优查询性能。在MySQL中，优化器负责以下几个方面的工作：</p><ul><li>语法分析和语义检查：在查询语句输入后，优化器会首先对语句进行语法分析和语义检查，以确保查询语句的合法性和正确性。</li><li>查询重写：当用户提交一个查询时，优化器会分析查询的语句，然后对其进行优化重写，生成一个新的查询语句，以提高查询性能。</li><li>查询优化：优化器会考虑多种可能的查询路径，并通过成本估计器来计算每个路径的成本。然后，它会选择最佳的查询路径，以确保查询在最短时间内完成。</li><li>查询执行：优化器将优化后的查询语句传递给执行引擎，执行引擎则会执行查询计划，返回结果。</li></ul><p>也就是说优化器的输入是一个语法树，输出是一个执行树（也称为执行计划）。</p><h1 id="1-相关概念"><a href="#1-相关概念" class="headerlink" title="1 相关概念"></a>1 相关概念</h1><p>词法扫描器将 SQL 语句字符串分解为 tokens，语法分析器将 tokens 组装成语法树的子树结构，并 Reduce 为基本查询结构，最终生成 SQL 语法解析树。</p><h2 id="1-1-query-specification"><a href="#1-1-query-specification" class="headerlink" title="1.1 query specification"></a>1.1 query specification</h2><p>MySQL中对于一个<code>query block</code>的描述结构，代码中常见为select&#x2F;query_block。</p><p>对应<code>&lt;query specification&gt;</code>用以描述查询规范或定义，表示一个 SELECT主体部分，通常包括查询的各个组成部分，例如要选择的列、查询的表、过滤条件等。</p><p><code>query specification</code>有prepare和optimize方法，没有execute方法，<code>query expression</code>（1.2介绍）有execute方法。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  [<span class="keyword">DISTINCT</span> <span class="operator">|</span> <span class="keyword">ALL</span>] select_list</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  table_reference</span><br><span class="line">[<span class="keyword">WHERE</span></span><br><span class="line">  search_condition]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  grouping_column_reference,...]</span><br><span class="line">[<span class="keyword">HAVING</span></span><br><span class="line">  search_condition]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  order_column_reference [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>],...];</span><br></pre></td></tr></table></figure><p><code>&lt;query specification&gt;</code>的BNF文法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">query_specification:</span><br><span class="line">          SELECT_SYM</span><br><span class="line">          select_options</span><br><span class="line">          select_item_list</span><br><span class="line">          into_clause</span><br><span class="line">          opt_from_clause</span><br><span class="line">          opt_where_clause</span><br><span class="line">          opt_group_clause</span><br><span class="line">          opt_having_clause</span><br><span class="line">          opt_window_clause</span><br><span class="line">          &#123;</span><br><span class="line">            $$= NEW_PTN PT_query_specification(</span><br><span class="line">                                      $1,  // SELECT_SYM</span><br><span class="line">                                      $2,  // select_options</span><br><span class="line">                                      $3,  // select_item_list</span><br><span class="line">                                      $4,  // into_clause</span><br><span class="line">                                      $5,  // from</span><br><span class="line">                                      $6,  // where</span><br><span class="line">                                      $7,  // group</span><br><span class="line">                                      $8,  // having</span><br><span class="line">                                      $9,  // windows</span><br><span class="line">                                      @5.raw.is_empty()); // implicit FROM</span><br><span class="line">          &#125;</span><br><span class="line">        | SELECT_SYM</span><br><span class="line">          select_options</span><br><span class="line">          select_item_list</span><br><span class="line">          opt_from_clause</span><br><span class="line">          opt_where_clause</span><br><span class="line">          opt_group_clause</span><br><span class="line">          opt_having_clause</span><br><span class="line">          opt_window_clause</span><br><span class="line">          &#123;</span><br><span class="line">            $$= NEW_PTN PT_query_specification(</span><br><span class="line">                                      $1,  // SELECT_SYM</span><br><span class="line">                                      $2,  // select_options</span><br><span class="line">                                      $3,  // select_item_list</span><br><span class="line">                                      NULL,// no INTO clause</span><br><span class="line">                                      $4,  // from</span><br><span class="line">                                      $5,  // where</span><br><span class="line">                                      $6,  // group</span><br><span class="line">                                      $7,  // having</span><br><span class="line">                                      $8,  // windows</span><br><span class="line">                                      @4.raw.is_empty()); // implicit FROM</span><br><span class="line">          &#125;</span><br><span class="line">        ;</span><br></pre></td></tr></table></figure><h2 id="1-2-query-expression"><a href="#1-2-query-expression" class="headerlink" title="1.2 query expression"></a>1.2 query expression</h2><p>MySQL中对于一个<code>query expression</code>的描述结构，代码中常见简称为unit。</p><p><code>Query_expression</code>对应<code>&lt;query expression&gt;</code>用于描述查询表达式。</p><p>一个<code>query expression</code>表示一组由UNION &#x2F; INTERSECT &#x2F; EXCEPT等SELECT级别的逻辑操作组合成的一组SELECT结构，不过目前仅支持UNION、INTERSECT和EXCEPT，因此只是简单的列表结构。同时<code>query expression</code>也根据query的结构形成递归包含关系。</p><p>一个<code>query expression</code>中可能包含多个<code>query specification</code>，而<code>query specification</code>内部则也可能嵌套包含其他<code>query expression</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">SELECT</span> column1 <span class="keyword">FROM</span> table1 <span class="keyword">WHERE</span> condition1)</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line">(<span class="keyword">SELECT</span> column2 <span class="keyword">FROM</span> table2 <span class="keyword">WHERE</span> condition2);</span><br></pre></td></tr></table></figure><p>SQL 表达式可能是一条简单的 SELECT，也可能是多条SELECT的代数运算，例如: UNION、INTERSET 或者EXCEPT 运算。所以<code>Query_expression</code>的数据结构中主要维护的是表达式或者语句之间关系，而<code>Query_block (query specification)</code> 代表的是某条具体的SQL。</p><p><code>&lt;query expression&gt;</code>的BNF文法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">query_expression:</span><br><span class="line">          query_expression_body</span><br><span class="line">          opt_order_clause</span><br><span class="line">          opt_limit_clause</span><br><span class="line">          &#123;</span><br><span class="line">            $$ = NEW_PTN PT_query_expression($1.body, $2, $3);</span><br><span class="line">          &#125;</span><br><span class="line">        | with_clause</span><br><span class="line">          query_expression_body</span><br><span class="line">          opt_order_clause</span><br><span class="line">          opt_limit_clause</span><br><span class="line">          &#123;</span><br><span class="line">            $$= NEW_PTN PT_query_expression($1, $2.body, $3, $4);</span><br><span class="line">          &#125;</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">query_expression_body:</span><br><span class="line">          query_primary</span><br><span class="line">          &#123;</span><br><span class="line">            $$ = &#123;$1, false&#125;;</span><br><span class="line">          &#125;</span><br><span class="line">        | query_expression_parens %prec SUBQUERY_AS_EXPR</span><br><span class="line">          &#123;</span><br><span class="line">            $$ = &#123;$1, true&#125;;</span><br><span class="line">          &#125;</span><br><span class="line">        | query_expression_body UNION_SYM union_option query_expression_body</span><br><span class="line">          &#123;</span><br><span class="line">            $$ = &#123;NEW_PTN PT_union($1.body, $3, $4.body, $4.is_parenthesized),</span><br><span class="line">                  false&#125;;</span><br><span class="line">          &#125;</span><br><span class="line">        | query_expression_body EXCEPT_SYM union_option query_expression_body</span><br><span class="line">          &#123;</span><br><span class="line">            $$ = &#123;NEW_PTN PT_except($1.body, $3, $4.body, $4.is_parenthesized),</span><br><span class="line">                  false&#125;;</span><br><span class="line">          &#125;</span><br><span class="line">        | query_expression_body INTERSECT_SYM union_option query_expression_body</span><br><span class="line">          &#123;</span><br><span class="line">            $$ = &#123;NEW_PTN PT_intersect($1.body, $3, $4.body, $4.is_parenthesized),</span><br><span class="line">                  false&#125;;</span><br><span class="line">          &#125;</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">query_expression_parens:</span><br><span class="line">          &#x27;(&#x27; query_expression_parens &#x27;)&#x27;                       &#123; $$ = $2; &#125;</span><br><span class="line">        | &#x27;(&#x27; query_expression_with_opt_locking_clauses&#x27;)&#x27;      &#123; $$ = $2; &#125;</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">query_primary:</span><br><span class="line">          query_specification</span><br><span class="line">          &#123;</span><br><span class="line">            // Bison doesn&#x27;t get polymorphism.</span><br><span class="line">            $$= $1;</span><br><span class="line">          &#125;</span><br><span class="line">        | table_value_constructor</span><br><span class="line">          &#123;</span><br><span class="line">            $$= NEW_PTN PT_table_value_constructor($1);</span><br><span class="line">          &#125;</span><br><span class="line">        | explicit_table</span><br><span class="line">          &#123;</span><br><span class="line">            auto item_list= NEW_PTN PT_select_item_list;</span><br><span class="line">            auto asterisk= NEW_PTN Item_asterisk(@$, nullptr, nullptr);</span><br><span class="line">            if (item_list == nullptr || asterisk == nullptr ||</span><br><span class="line">                item_list-&gt;push_back(asterisk))</span><br><span class="line">              MYSQL_YYABORT;</span><br><span class="line">            $$= NEW_PTN PT_explicit_table(&#123;&#125;, item_list, $1);</span><br><span class="line">          &#125;</span><br><span class="line">        ;</span><br></pre></td></tr></table></figure><h2 id="1-3-示意图"><a href="#1-3-示意图" class="headerlink" title="1.3 示意图"></a>1.3 示意图</h2><p><img src="https://pic.imgdb.cn/item/662c94760ea9cb140331c7e7.png" alt="Item_example"></p><p>图中用括号圈起来的部分，就是一个UNIT<code>(Query_expression)</code>，而每个SELECT token开始的一个查询块，就是一个<code>query specification</code>，而在外层的<code>query specification</code>中，会嵌套子查询，用一个<code>query expression</code>描述，子查询中可以是任意查询形态，再包含多个<code>query specification</code>，从而形成<code>query expression -&gt; query specification -&gt; query expression -&gt; query specification</code> … 这种相互嵌套的结构。</p><p><code>derived table</code>就是图中FROM字句中的tt，对应<code>query_expression2</code>和内部的<code>query specification3/4</code>。</p><p>Item是MySQL的一个基础对象，MySQL中对于<code>query expression</code>的描述结构，例如on条件&#x2F;where条件&#x2F;having&#x2F;投影列等，都是用这个类来描述一个个表达式的。这里先介绍一个概念，更详细的Item架构本文放在2.4来介绍。</p><blockquote><p>需要注意select item list和item并不是一个东西，根据<code>query_specification</code>的BNF范式，只有select的列才是select item list（之后会是<code>query_block</code>中的field</p></blockquote><h1 id="2-重要数据结构"><a href="#2-重要数据结构" class="headerlink" title="2 重要数据结构"></a>2 重要数据结构</h1><h2 id="2-1-查询块Query-block"><a href="#2-1-查询块Query-block" class="headerlink" title="2.1 查询块Query_block"></a>2.1 查询块Query_block</h2><p><code>query specification</code>在代码中对应的结构是<code>Query_block</code>。</p><p>一个查询块对应着一条基本的SELECT语句的语法结构。</p><ul><li>master：指向查询块的上层表达式（外部查询表达式）</li><li>slave：执行属于该查询块的第一个查询表达式（子查询）</li><li>neighbors：link_next、link_prev分别指向同层同级别的邻居查询块、查询块列表</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Query_block</span> : <span class="keyword">public</span> Query_term &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    Intrusive linked list of all query blocks within the same</span></span><br><span class="line"><span class="comment">    query expression.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  Query_block *next&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">  <span class="comment">/// The query expression containing this query block.</span></span><br><span class="line">  Query_expression *master&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">  <span class="comment">/// The first query expression contained within this query block.</span></span><br><span class="line">  Query_expression *slave&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">  <span class="comment">/// Intrusive double-linked global list of query blocks.</span></span><br><span class="line">  Query_block *link_next&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">  Query_block **link_prev&#123;<span class="literal">nullptr</span>&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="function">Query_expression *<span class="title">master_query_expression</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> master; &#125;</span><br><span class="line">  <span class="function">Query_expression *<span class="title">first_inner_query_expression</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> slave; &#125;</span><br><span class="line">  <span class="function">Query_block *<span class="title">outer_query_block</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> master-&gt;<span class="built_in">outer_query_block</span>(); &#125;</span><br><span class="line">  <span class="function">Query_block *<span class="title">next_query_block</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> next; &#125;</span><br><span class="line">  <span class="function">Query_block *<span class="title">next_select_in_list</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> link_next; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-查询表达式Query-expression"><a href="#2-2-查询表达式Query-expression" class="headerlink" title="2.2 查询表达式Query_expression"></a>2.2 查询表达式Query_expression</h2><p><code>query expression</code>在代码中对应的结构叫<code>Query_expression</code>。</p><p>查询式中的查询块形成一个树形结构，表达了嵌套形式的查询操作。</p><p>查询表达式由一个或多个查询块组成，多个查询块表示查询表达式有UNION、INTERSECT、EXCEPT操作，或者利用查询块来描述子查询结构。</p><ul><li>master：指向查询表达式的上层查询块（外部查询块）</li><li>slave：执行属于该表达式的第一个查询块</li><li>neighbors：next、prev分别指向同层同级别的邻居查询表达式、查询表达式列表。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Query_expression</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    Intrusive double-linked list of all query expressions</span></span><br><span class="line"><span class="comment">    immediately contained within the same query block.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  Query_expression *next;</span><br><span class="line">  Query_expression **prev;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    The query block wherein this query expression is contained,</span></span><br><span class="line"><span class="comment">    NULL if the query block is the outer-most one.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  Query_block *master;</span><br><span class="line">  <span class="comment">/// The first query block in this query expression.</span></span><br><span class="line">  Query_block *slave;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/// @return the query block this query expression belongs to as subquery</span></span><br><span class="line">  <span class="function">Query_block *<span class="title">outer_query_block</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> master; &#125;</span><br><span class="line">  <span class="comment">/// @return the first query block inside this query expression</span></span><br><span class="line">  <span class="function">Query_block *<span class="title">first_query_block</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> slave; &#125;</span><br><span class="line">  <span class="comment">/// @return the next query expression within same query block (next subquery)</span></span><br><span class="line">  <span class="function">Query_expression *<span class="title">next_query_expression</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> next; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-LEX"><a href="#2-3-LEX" class="headerlink" title="2.3 LEX"></a>2.3 LEX</h2><p>从LEX可以定位到语法树中最外层的查询表达式和第一个查询块，也可以直接遍历所有的查询块。</p><p>然后根据以上查询块和查询表达式的关系，从最外层的查询表达式的第一个查询块进行查询处理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LEX</span> : <span class="keyword">public</span> Query_tables_list &#123;</span><br><span class="line">  Query_expression *unit;  <span class="comment">///&lt; Outer-most query expression</span></span><br><span class="line">  <span class="comment">/// @todo: query_block can be replaced with unit-&gt;first-select()</span></span><br><span class="line">  Query_block *query_block;            <span class="comment">///&lt; First query block</span></span><br><span class="line">  Query_block *all_query_blocks_list;  <span class="comment">///&lt; List of all query blocks</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="comment">/* current Query_block in parsing */</span></span><br><span class="line">  Query_block *m_current_query_block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-Item"><a href="#2-4-Item" class="headerlink" title="2.4 Item"></a>2.4 Item</h2><p>Item是MySQL的一个基础对象，MySQL中对于<code>query expression</code>的描述结构，例如on条件&#x2F;where条件&#x2F;having&#x2F;投影列等，都是用这个类来描述一个个表达式的。</p><p>Item系统是MySQL SQL层代码中最为复杂的子系统之一。Item是一个基础类，在他的基础上派生了很多子孙。这些子类基本描述所有SQL语句中的对象：</p><ul><li>一个文本字符串&#x2F;数值对象 </li><li>一个数据表的某一列（例如，select c1,c2 from dual…中的c1，c2）</li><li>一个比较动作，例如c1&gt;10</li><li>一个WHERE子句的所有信息</li><li>…</li></ul><p>在语法解析树中，这些Item以一颗树的形式存在，大量的 Item 结构 MySQL 源码使用一个 Item 基类来表示在关系查询中出现的任意类型的expression (表达式)。</p><p>Item类作为一个抽象类，定义了一套基本的接口行为，通过继承与多态，Item的子类实现对通用接口的重载从而完成特定功能的封装。</p><p>从类的继承关系角度来看，下面一些常见的继承Item的子类：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Class Item</span><br><span class="line">+--Item_row</span><br><span class="line">+--Item_basic_constant</span><br><span class="line">   +--Item_num</span><br><span class="line">      +--Item_int</span><br><span class="line">      +--Item_decimal</span><br><span class="line">      +--Item_float</span><br><span class="line">   +--Item_null</span><br><span class="line">   +--Item_string</span><br><span class="line">   +--Item_json</span><br><span class="line">   +--..</span><br><span class="line">+--Item_ident</span><br><span class="line">   +--Item_field</span><br><span class="line">   +--Item_ref</span><br><span class="line">+--Item_param</span><br><span class="line">+--Item_result_field</span><br><span class="line">   +--Item_subselect</span><br><span class="line">      +--Item_singlerow_subselect</span><br><span class="line">      +--Item_exists_subselect</span><br><span class="line">   +--Item_func</span><br><span class="line">      +--Item_str_func</span><br><span class="line">      +--Item_sum</span><br><span class="line">      +--Item_timeval_func</span><br><span class="line">      +--...</span><br><span class="line">+--...</span><br></pre></td></tr></table></figure><blockquote><p>推荐阅读：<a href="https://www.orczhou.com/index.php/2012/11/more-about-mysql-item/">MySQL源代码：关于MySQL的Item对象</a></p></blockquote><p>可以看到，Item基本上代码SQL语句中的所有对象，例如<code>Item_sum</code>描述sum函数&#x2F;<code>Item_like</code>描述LIKE字符匹配函数Item系统构成了表达式树。</p><p>例如下面的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(column1) <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> column2 <span class="operator">=</span> <span class="variable">@x</span>;</span><br></pre></td></tr></table></figure><p>MySQL需要一系列的Item来描述上面的SQL：一个描述column1对象，描述UPPER函数的对象，还有描述WHERE语句的几个相关的Item对象。Item对象可以理解做一个特殊的数据对象。</p><p>再例如一个WHERE条件：</p><p><img src="https://pic.imgdb.cn/item/662c97b20ea9cb1403390cfc.png" alt="where_example"></p><blockquote><p>source: <a href="https://www.orczhou.com/index.php/2012/11/more-about-mysql-item/">https://www.orczhou.com/index.php/2012/11/more-about-mysql-item/</a></p></blockquote><h1 id="3-语法树示例"><a href="#3-语法树示例" class="headerlink" title="3 语法树示例"></a>3 语法树示例</h1><p>语法树示例大量参照了CSDN博主<code>抡着鼠标扛大旗</code>的博客<a href="https://blog.csdn.net/u010502974/article/details/134996395">【MySQL·8.0·源码】MySQL 语法树结构</a>，在原作者的基础上丰富了一些语法树的架构图，在此向原作者表示感谢！</p><p>e.g1：UNION+ORDER BY</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t3 <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/662c995f0ea9cb14033cd4d4.png" alt="eg1"></p><p>e.g2：UNION+INTERSECT+EXCEPT+ORDER BY+LIMIT</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">((</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1</span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t2</span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t3</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> c1 LIMIT <span class="number">5</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">INTERSECT</span> </span><br><span class="line">  (((</span><br><span class="line">      <span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line">      <span class="keyword">FROM</span> t3</span><br><span class="line">      <span class="keyword">ORDER</span> <span class="keyword">BY</span> c1</span><br><span class="line">      LIMIT <span class="number">1</span></span><br><span class="line">    )</span><br><span class="line">   )</span><br><span class="line">   <span class="keyword">EXCEPT</span></span><br><span class="line">      <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t4 </span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> c1</span><br><span class="line">  LIMIT <span class="number">4</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> c1</span><br><span class="line">LIMIT <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/662c99600ea9cb14033cd5c1.png" alt="eg2"></p><p>e.g3：带VIEW和FROM子句子查询的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1)</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">  (<span class="keyword">select</span> tmp1.<span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2) <span class="keyword">as</span> tmp1,</span><br><span class="line">  (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t3 <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> v1) <span class="keyword">as</span> tmp2);</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/662c99600ea9cb14033cd61c.png" alt="eg3"></p><p>e.g4：WHERE子句带子查询的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> c1 <span class="keyword">in</span> (<span class="keyword">select</span> c2 <span class="keyword">from</span> t2 <span class="keyword">where</span> t2.c1 <span class="operator">&lt;</span> <span class="number">20</span>);</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/662c99600ea9cb14033cd671.png" alt="eg4"></p><p>e.g5：普通JOIN查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t3, (t1, t2) <span class="keyword">where</span> t1.c1 <span class="operator">=</span> t2.c2;</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/662c99960ea9cb14033d4d4f.png" alt="eg5"></p><p>e.g6：LEFT OUTER JOIN</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span>(t2, t3) <span class="keyword">on</span> t1.c1 <span class="operator">=</span> t2.c1 <span class="keyword">and</span> t1.c2 <span class="operator">=</span> t3.c2 <span class="keyword">where</span> t1.c1 <span class="operator">=</span> t2.c2;</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/662c99970ea9cb14033d4dda.png" alt="eg6"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL功能介绍：使用Optimizer_Trace分析优化器行为</title>
      <link href="/2024/02/07/MySQL%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D%EF%BC%9A%E4%BD%BF%E7%94%A8Optimizer_Trace%E5%88%86%E6%9E%90%E4%BC%98%E5%8C%96%E5%99%A8%E8%A1%8C%E4%B8%BA/"/>
      <url>/2024/02/07/MySQL%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D%EF%BC%9A%E4%BD%BF%E7%94%A8Optimizer_Trace%E5%88%86%E6%9E%90%E4%BC%98%E5%8C%96%E5%99%A8%E8%A1%8C%E4%B8%BA/</url>
      
        <content type="html"><![CDATA[<p>注：本文基于MySQL8.0.32，优化器使用CBO成本模型。</p><h1 id="1-功能概述"><a href="#1-功能概述" class="headerlink" title="1 功能概述"></a>1 功能概述</h1><p>此优化器可以跟踪执行语句的解析、优化、执行的全过程，生成人类和程序可读的输出，以帮助理解 MySQL 优化器所采取的决策和操作。</p><h1 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2 使用方法"></a>2 使用方法</h1><p>在 MySQL 5.6 以及之后的版本中，MySQL提出了一个 optimizer trace 的功能，这个功能可以让我们方便的查看优化器生成执行计划的整个过程，这个功能的开启与关闭由系统变量 optimizer_trace 决定：</p><span id="more"></span><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;optimizer_trace&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------------------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name   <span class="operator">|</span> <span class="keyword">Value</span>                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------------------+</span></span><br><span class="line"><span class="operator">|</span> optimizer_trace <span class="operator">|</span> enabled<span class="operator">=</span>off,one_line<span class="operator">=</span>off <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------------------+</span></span><br></pre></td></tr></table></figure><p>这个功能默认是关闭的。</p><p>one_line控制输出格式，如果为 on 那么所有输出都将在一行中展示，不适合阅读，所以建议保持其默认值，即off。</p><p>优化器跟踪使用 JSON 格式。 它基本上是一个结构化日志文件，显示查询优化器采取了哪些操作。</p><p>每个连接都存储最后执行的语句的踪迹， 可以通过读取<code>information_schema.optimizer_trace</code>表来查看。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> information_schema.optimizer_trace\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">       <span class="keyword">Table</span>: OPTIMIZER_TRACE</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> `OPTIMIZER_TRACE` (</span><br><span class="line">  `QUERY` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `TRACE` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `MISSING_BYTES_BEYOND_MAX_MEM_SIZE` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `INSUFFICIENT_PRIVILEGES` tinyint <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3</span><br></pre></td></tr></table></figure><p><code>information_schema.optimizer_trace</code>表包含四列：</p><ul><li>QUERY：执行的语句</li><li>TRACE：以JSON格式输出query执行时收集的统计信息</li><li>MISSING_BYTES_BEYOND_MAX_MEM_SIZE：如果踪迹比较大，记录会被截断，该列记录了缺少的字节数</li><li>INSUFFICIENT_PRIVILEGES：是否有权限查看执行计划的生成过程，0有权限，1无权限</li></ul><p>每个踪迹都使用字符串来储存，变量<code>optimizer_trace_max_mem_size</code>限制了当前踪迹的最大内存使用量，当内存使用达到该限制，当前的踪迹记录会不完整，<code>information_schema.optimizer_trace</code>表的<code>MISSING_BYTES_BEYOND_MAX_MEM_SIZE</code>列会写出踪迹缺少的字节数。</p><p>开启并使用optimizer trace：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> optimizer_trace<span class="operator">=</span>&quot;enabled=on&quot;;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> a<span class="operator">&lt;</span><span class="number">10</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">                            QUERY: <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> a<span class="operator">&lt;</span><span class="number">10</span></span><br><span class="line">                            TRACE: &#123;</span><br><span class="line">  &quot;steps&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;join_preparation&quot;: &#123; ... &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;join_optimization&quot;: &#123;</span><br><span class="line">        &quot;select_id&quot;: <span class="number">1</span>,</span><br><span class="line">        &quot;steps&quot;: [</span><br><span class="line">          &#123; &quot;condition_processing&quot;: &#123; ... &#125; &#125;,</span><br><span class="line">          &#123; &quot;table_dependencies&quot;: [ ... ] &#125;,</span><br><span class="line">          &#123; &quot;ref_optimizer_key_uses&quot;: [ ... ] &#125;,</span><br><span class="line">          &#123; &quot;rows_estimation&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;range_analysis&quot;: &#123;</span><br><span class="line">                   &quot;analyzing_range_alternatives&quot; : &#123; ... &#125;,</span><br><span class="line">                  &quot;chosen_range_access_summary&quot;: &#123; ... &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;selectivity_for_indexes&quot; : &#123; ... &#125;,</span><br><span class="line">                &quot;selectivity_for_columns&quot; : &#123; ... &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123; &quot;considered_execution_plans&quot;: [ ... ] &#125;,</span><br><span class="line">          &#123; &quot;attaching_conditions_to_tables&quot;: &#123; ... &#125; &#125;</span><br><span class="line">         ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;join_execution&quot;: &#123; ... &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">MISSING_BYTES_BEYOND_MAX_MEM_SIZE: <span class="number">0</span></span><br><span class="line">          INSUFFICIENT_PRIVILEGES: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>默认情况下，每个新跟踪都会覆盖以前的跟踪。 因此，如果语句包含子语句（例如：调用存储过程、存储函数、触发器），则顶部语句和子语句都会生成跟踪，但在执行结束时，只有最后一个子语句的跟踪可见。</p><blockquote><p>一般情况下，SELECT和EXPLAIN SELECT会产生同样的输出。但是如果涉及到子查询也有例外。例如：<br>SELECT … WHERE x IN (subq1) AND y IN (subq2)</p><p>如果第一个子查询的谓词IN固定为false，那么对第二个子查询就不会有jOIN::optimize()的优化；但是EXPLAIN SELECT会分析所有的子查询。</p></blockquote><h1 id="3-输出解读"><a href="#3-输出解读" class="headerlink" title="3 输出解读"></a>3 输出解读</h1><p>对于任何一个SELECT，优化过程都分为三个阶段：</p><ul><li><code>join_preparation</code>：展示了query的重写（rewrite），位于sql_resolver.cc 的 <code>Query_block::prepare()</code> 函数中，主要功能是解析 AST 上的各个 SQL 子句，同时也完成子查询相关的转换和优化，比如转换成 semi join，推导 table information，常量消除，冗余表达式消除等</li><li><code>join_optimization</code>：主要负责指令的优化，位于 sql_optimizer.cc 的 <code>JOIN::optimize()</code> 函数中，该函数包含了查询优化的主要逻辑，通过一系列逻辑等价的 query rewrite，cost based join optimization，rule-based access path selection 等优化步骤将 Query_block 优化成 query execution plan（QEP）</li><li><code>join_execution</code>：执行阶段，位于 sql_union.cc 的 <code>Query_expression::ExecuteIteratorQuery()</code> 函数中，主要负责查询执行<br>上述步骤仅适用于一个 SELECT。 如果查询有子查询，每个 SELECT 都会有这些步骤，并且会有额外的步骤&#x2F;重写来处理子查询构造本身。</li></ul><h2 id="3-1-join-preparation"><a href="#3-1-join-preparation" class="headerlink" title="3.1 join_preparation"></a>3.1 join_preparation</h2><p>在SQL的preparation阶段，主要是做语义解析、语法检测、永久性的基于规则的转换包括转换外连接成内连接、合并视图或者派生表和一些子查询转换。</p><p>几个典型的转换过程在trace中的体现：</p><h3 id="3-1-1-派生表合并"><a href="#3-1-1-派生表合并" class="headerlink" title="3.1.1 派生表合并"></a>3.1.1 派生表合并</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1) tt;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;derived&quot;: &#123;</span><br><span class="line">              &quot;table&quot;: &quot;`` `tt`&quot;,</span><br><span class="line">              &quot;select#&quot;: <span class="number">2</span>,</span><br><span class="line">              &quot;merged&quot;: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># 变化为：</span><br><span class="line"># <span class="keyword">select</span> `t1`.`a` <span class="keyword">AS</span> `a` <span class="keyword">from</span> `t1`</span><br></pre></td></tr></table></figure><h3 id="3-1-2-标量子查询直接替代"><a href="#3-1-2-标量子查询直接替代" class="headerlink" title="3.1.2 标量子查询直接替代"></a>3.1.2 标量子查询直接替代</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> a <span class="operator">=</span> (<span class="keyword">select</span> <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;join_preparation&quot;: &#123;</span><br><span class="line">              &quot;select#&quot;: <span class="number">2</span>,</span><br><span class="line">              &quot;steps&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;expanded_query&quot;: &quot;/* select#2 */ select 1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">...</span><br><span class="line"># 变化为</span><br><span class="line"># <span class="comment">/* select#1 */</span> <span class="keyword">select</span> `t1`.`a` <span class="keyword">AS</span> `a` <span class="keyword">from</span> `t1` <span class="keyword">where</span> (`t1`.`a` <span class="operator">=</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="3-1-3-IN子查询变SEMI-JOIN"><a href="#3-1-3-IN子查询变SEMI-JOIN" class="headerlink" title="3.1.3 IN子查询变SEMI-JOIN"></a>3.1.3 IN子查询变SEMI-JOIN</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> a <span class="keyword">in</span> (<span class="keyword">select</span> a <span class="keyword">from</span> t2);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;transformation&quot;: &#123;</span><br><span class="line">              &quot;select#&quot;: <span class="number">2</span>,</span><br><span class="line">              &quot;from&quot;: &quot;IN (SELECT)&quot;,</span><br><span class="line">              &quot;to&quot;: &quot;semijoin&quot;,</span><br><span class="line">              &quot;chosen&quot;: <span class="literal">true</span>,</span><br><span class="line">              &quot;transformation_to_semi_join&quot;: &#123;</span><br><span class="line">                &quot;subquery_predicate&quot;: &quot;`t1`.`a` in (/* select#2 */ select `t2`.`a` from `t2`)&quot;,</span><br><span class="line">                &quot;embedded in&quot;: &quot;WHERE&quot;,</span><br><span class="line">                &quot;semi-join condition&quot;: &quot;(`t1`.`a` = `t2`.`a`)&quot;,</span><br><span class="line">                &quot;decorrelated_predicates&quot;: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    &quot;outer&quot;: &quot;`t1`.`a`&quot;,</span><br><span class="line">                    &quot;inner&quot;: &quot;`t2`.`a`&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># 变化为：</span><br><span class="line"># <span class="keyword">select</span> `t1`.`a` <span class="keyword">AS</span> `a` <span class="keyword">from</span> `t1` semi <span class="keyword">join</span> (`t2`) <span class="keyword">where</span> ((`t1`.`a` <span class="operator">=</span> `t2`.`a`))</span><br></pre></td></tr></table></figure><h3 id="3-1-4-EXISTS子查询变SEMI-JOIN"><a href="#3-1-4-EXISTS子查询变SEMI-JOIN" class="headerlink" title="3.1.4 EXISTS子查询变SEMI-JOIN"></a>3.1.4 EXISTS子查询变SEMI-JOIN</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> a, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> t1_count <span class="keyword">from</span> t1 <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2 <span class="keyword">where</span> a<span class="operator">=</span>b <span class="keyword">and</span> a <span class="operator">&lt;</span> c) <span class="keyword">group</span> <span class="keyword">by</span> a <span class="keyword">order</span> <span class="keyword">by</span> a;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;transformation&quot;: &#123;</span><br><span class="line">              &quot;select#&quot;: <span class="number">2</span>,</span><br><span class="line">              &quot;from&quot;: &quot;IN (SELECT)&quot;,</span><br><span class="line">              &quot;to&quot;: &quot;semijoin&quot;,</span><br><span class="line">              &quot;chosen&quot;: <span class="literal">true</span>,</span><br><span class="line">              &quot;transformation_to_semi_join&quot;: &#123;</span><br><span class="line">                &quot;subquery_predicate&quot;: &quot;exists(/* select#2 */ select 1 from `t2` where ((`t2`.`a` = `t2`.`b`) and (`t2`.`a` &lt; `t2`.`c`)))&quot;,</span><br><span class="line">                &quot;embedded in&quot;: &quot;WHERE&quot;,</span><br><span class="line">                &quot;evaluating_constant_semijoin_conditions&quot;: [</span><br><span class="line">                ],</span><br><span class="line">                &quot;semi-join condition&quot;: &quot;((`t2`.`a` = `t2`.`b`) and (`t2`.`a` &lt; `t2`.`c`))&quot;,</span><br><span class="line">                &quot;decorrelated_predicates&quot;: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    &quot;outer&quot;: &quot;1&quot;,</span><br><span class="line">                    &quot;inner&quot;: &quot;1&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              &#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># 变化为：</span><br><span class="line"># <span class="comment">/* select#1 */</span> <span class="keyword">select</span> `t1`.`a` <span class="keyword">AS</span> `a`,<span class="built_in">count</span>(<span class="number">0</span>) <span class="keyword">AS</span> `t1_count` <span class="keyword">from</span> `t1` semi <span class="keyword">join</span> (`t2`) <span class="keyword">where</span> ((`t2`.`a` <span class="operator">=</span> `t2`.`b`) <span class="keyword">and</span> (`t2`.`a` <span class="operator">&lt;</span> `t2`.`c`)) <span class="keyword">group</span> <span class="keyword">by</span> `t1`.`a` <span class="keyword">order</span> <span class="keyword">by</span> `t1`.`a`</span><br></pre></td></tr></table></figure><h3 id="3-1-5-子查询IN到EXISTS"><a href="#3-1-5-子查询IN到EXISTS" class="headerlink" title="3.1.5 子查询IN到EXISTS"></a>3.1.5 子查询IN到EXISTS</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> t1.b <span class="keyword">in</span> (<span class="keyword">select</span> <span class="built_in">sum</span>(a) <span class="keyword">from</span> t1);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">                  &quot;transformation&quot;: &#123;</span><br><span class="line">                    &quot;select#&quot;: <span class="number">2</span>,</span><br><span class="line">                    &quot;from&quot;: &quot;IN (SELECT)&quot;,</span><br><span class="line">                    &quot;to&quot;: &quot;EXISTS (CORRELATED SELECT)&quot;,</span><br><span class="line">                    &quot;chosen&quot;: <span class="literal">true</span>,</span><br><span class="line">                    &quot;evaluating_constant_having_conditions&quot;: [</span><br><span class="line">                    ]</span><br><span class="line">                  &#125;</span><br><span class="line">...</span><br><span class="line"># 变化为：</span><br><span class="line"># <span class="comment">/* select#1 */</span> <span class="keyword">select</span> `t1`.`a` <span class="keyword">AS</span> `a`,`t1`.`b` <span class="keyword">AS</span> `b` <span class="keyword">from</span> `t1` <span class="keyword">where</span> <span class="operator">&lt;</span>in_optimizer<span class="operator">&gt;</span>(`t1`.`b`,<span class="operator">&lt;</span><span class="keyword">exists</span><span class="operator">&gt;</span>(<span class="comment">/* select#2 */</span> <span class="keyword">select</span> <span class="built_in">sum</span>(`t1`.`a`) <span class="keyword">from</span> `t1` <span class="keyword">having</span> (<span class="operator">&lt;</span>cache<span class="operator">&gt;</span>(`t1`.`b`) <span class="operator">=</span> <span class="operator">&lt;</span>ref_null_helper<span class="operator">&gt;</span>(<span class="built_in">sum</span>(`t1`.`a`)))))</span><br></pre></td></tr></table></figure><h3 id="3-1-6-转换的标量子查询转换成Derived-Table"><a href="#3-1-6-转换的标量子查询转换成Derived-Table" class="headerlink" title="3.1.6 转换的标量子查询转换成Derived Table"></a>3.1.6 转换的标量子查询转换成Derived Table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> b, <span class="built_in">max</span>(a) <span class="keyword">AS</span> ma <span class="keyword">from</span> t1 <span class="keyword">group</span> <span class="keyword">by</span> b <span class="keyword">having</span> ma <span class="operator">&lt;</span> (<span class="keyword">select</span> <span class="built_in">max</span>(t2.a) <span class="keyword">from</span> t2 <span class="keyword">where</span> t2.b<span class="operator">=</span>t1.b);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;derived&quot;: &#123;</span><br><span class="line">              &quot;table&quot;: &quot; `derived_1_2`&quot;,</span><br><span class="line">              &quot;select#&quot;: <span class="number">2</span>,</span><br><span class="line">              &quot;materialized&quot;: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;transformation&quot;: &#123;</span><br><span class="line">              &quot;select#&quot;: <span class="number">2</span>,</span><br><span class="line">              &quot;from&quot;: &quot;scalar subquery&quot;,</span><br><span class="line">              &quot;to&quot;: &quot;derived table&quot;,</span><br><span class="line">              &quot;expanded_query&quot;: &quot;/* select#1 */ select `t1`.`b` AS `b`,max(`t1`.`a`) AS `ma` from (`t1` left join (/* select#2 */ select max(`t2`.`a`) AS `max(t2.a)`,`t2`.`b` AS `b` from `t2` group by `t2`.`b`) `derived_1_2` on((`derived_1_2`.`b` = `t1`.`b`))) group by `t1`.`b` having (`ma` &lt; `derived_1_2`.`max(t2.a)`)&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="3-1-7-SEMI-JOIN转换为NESTED-JOIN"><a href="#3-1-7-SEMI-JOIN转换为NESTED-JOIN" class="headerlink" title="3.1.7 SEMI-JOIN转换为NESTED-JOIN"></a>3.1.7 SEMI-JOIN转换为NESTED-JOIN</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">inner</span> <span class="keyword">join</span> t2 <span class="keyword">on</span> t1.b<span class="operator">=</span>t2.b;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;transformations_to_nested_joins&quot;: &#123;</span><br><span class="line">              &quot;transformations&quot;: [</span><br><span class="line">                &quot;JOIN_condition_to_WHERE&quot;,</span><br><span class="line">                &quot;parenthesis_removal&quot;</span><br><span class="line">              ],</span><br><span class="line">              &quot;expanded_query&quot;: &quot;/* select#1 */ select `t1`.`a` AS `a`,`t1`.`b` AS `b`,`t2`.`a` AS `a`,`t2`.`b` AS `b` from `t1` join `t2` where (`t1`.`b` = `t2`.`b`)&quot;</span><br><span class="line">            &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>注意：LEFT JOIN 不能把JOIN优化为WHERE：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">left</span> <span class="keyword">join</span> t2 <span class="keyword">on</span> t1.b<span class="operator">=</span>t2.b;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;transformations_to_nested_joins&quot;: &#123;</span><br><span class="line">              &quot;transformations&quot;: [</span><br><span class="line">                &quot;parenthesis_removal&quot;</span><br><span class="line">              ],</span><br><span class="line">              &quot;expanded_query&quot;: &quot;/* select#1 */ select `t1`.`a` AS `a`,`t1`.`b` AS `b`,`t2`.`a` AS `a`,`t2`.`b` AS `b` from `t1` left join `t2` on((`t1`.`b` = `t2`.`b`))&quot;</span><br><span class="line">            &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>但是LEFT JOIN右表加条件可以优化为JOIN：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">left</span> <span class="keyword">join</span> t2 <span class="keyword">on</span> t1.b <span class="operator">=</span> t2.b <span class="keyword">where</span> t2.a<span class="operator">=</span><span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;transformations_to_nested_joins&quot;: &#123;</span><br><span class="line">              &quot;transformations&quot;: [</span><br><span class="line">                &quot;outer_join_to_inner_join&quot;,</span><br><span class="line">                &quot;JOIN_condition_to_WHERE&quot;,</span><br><span class="line">                &quot;parenthesis_removal&quot;</span><br><span class="line">              ],</span><br><span class="line">              &quot;expanded_query&quot;: &quot;/* select#1 */ select `t1`.`a` AS `a`,`t1`.`b` AS `b`,`t2`.`a` AS `a`,`t2`.`b` AS `b` from `t1` join `t2` where ((`t2`.`a` = 5) and (`t1`.`b` = `t2`.`b`))&quot;</span><br><span class="line">            &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="3-2-join-optimization"><a href="#3-2-join-optimization" class="headerlink" title="3.2 join_optimization"></a>3.2 join_optimization</h2><p>该阶段会做一些prepare后续的逻辑转换，主要有优化器基于cost的优化过程，包括访问方式、连接方法和顺序，以及一些针对执行计划的特定优化。会解决一些遗留的一些逻辑转换规则，如NOT消除、等值传递、常量计算和条件移除。</p><p>join_optimization主要包括：</p><ul><li>condition_processing：WHERE&#x2F;ON&#x2F;HAVING 条件中的基本重写（basic rewrite）</li><li>substitute_generated_columns：构造进行 ref 和 eq_ref 访问的可能方法</li><li>table_dependencies：表的依赖信息</li><li>ref_optimizer_key_uses：查看SQL中每个表可以使用的ref索引，用于后续计算访问和连接代价</li><li>pulled_out_semijoin_tables：把semi-join优化为inner-join</li><li>rows_estimation：估算表行数和扫描的代价。如果查询中存在range扫描的话，对range扫描进行计划分析及代价估算</li><li>execution_plan_for_potential_materialization：计算子查询优化策略的花费，选择最优</li><li>considered_execution_plans：对比各可行计划的代价，选择相对最优的执行计划</li><li>attaching_conditions_to_tables：一旦join的连接顺序确定，添加附加条件，使得条件尽可能筛选单表数据</li><li>optimizing_distinct_group_by_order_by：于优化DISTINCT，GROUP BY、ORDER BY子句，例如将 distinct 转换为 group by，消除不必要的 trivial order by</li><li>reconsidering_access_paths_for_index_ordering：最终对排序再进行一次索引选择优化</li><li>finalizing_table_conditions：进行最后一轮的 condition 优化，这一步主要是去除冗余的 filter，将缓存表达式中的常量，避免每一行数据都重新计算等，得到最终的、经过优化后的表条件</li><li>refine_plan：优化后的执行计划</li><li>considering_tmp_tables：为执行计划中各个 SQL 算子按需分配 tmp table</li></ul><p>MySQL中基于成本的优化主要在optimize阶段，在单表查询时会主要关注optimize阶段的rows_estimation过程（预估不同单表访问方法的访问成本）这个过程，这个过程深入分析了对单表查询的各种执行方案的成本。在多表连接查询的时候，需要更多关注considered_execution_plans过程（分析各种可能的执行计划及成本）这个过程，这个过程里会写明各种不同的连接方式所对应的成本。</p><p>优化器最终会选择成本最低的那种方案来作为最终的执行计划，也就是使用 explain 语句所展现出的那种方案。</p><h3 id="3-2-1表访问方式"><a href="#3-2-1表访问方式" class="headerlink" title="3.2.1表访问方式"></a>3.2.1表访问方式</h3><p>表访问方式主要分为 Table Scan（全表扫描）、Index Look Up （ref访问）方式、Index Scan（索引扫描），Range Index Scan（索引范围查询）和一些替代的 Quick Range Scan（快速范围访问方式）。每一种分类是可以独立计算选出最佳方案，最终在所有类型的最佳方案中选择代价最低的访问方式。除了 Table Scan 是全表扫描方式之外，其余都属于索引扫描，只是根据索引的定义情况和利用索引的执行方式不同，区分了多种类型而已。 </p><p>通常优化器使用索引的原则如下：</p><ul><li>索引列作为过滤条件出现在 WHERE、HAVING、ON 子句中，这样有利于利用索引过滤元组</li><li>索引列是被连接的表（内表）对象的列且存在于连接条件中，连接条件会出现在 WHERE、ON、USING 子句中</li><li>索引列出现在 AGGRE 子句中，例如在索引列上求 MIN、MAX 值等</li><li>索引列出现在 GROUP BY 、ORDER BY 、DISTINCT，可以利用有序索引避免排序操作</li></ul><p>访问类型，是较为重要的一个指标，结果值从好到坏依次是：</p><p>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL </p><p>一般来说，得保证查询至少达到range级别，最好能达到ref。</p><ul><li>system：表仅有一行（&#x3D;系统表）。</li><li>const：表中最多一个匹配行，它将在查询开始前先被读取。因为仅有一行，在这行的列值可被优化器的剩余部分认为是常数。const 类型用于用常数值比较 primary key 或 unique 索引的所有部分时。</li><li>eq_ref：对于每个来自于前面的表的行组合，从该表中读取一行。这可能是除了 const 类型外最好的连接类型。它用在一个索引的所有部分被连接使用并且索引是 UNIQUE 或 PRIMARY KEY 时。eq_ref 可以用于使用 &#x3D; 操作符比较的带索引的列。比较值可以为常量或一个使用在该表前面所读取的表的列的表达式。</li><li>ref：对于每个来自于前面的表的行组合，所有匹配索引值的行将从这张表中读取。同时需要满足连接只使用键的最左前缀，且键不是 UNIQUE 或 PRIMARY KEY（换句话说，如果连接不能基于关键字选择单个行的话），则使用 ref。如果使用的键仅仅匹配少量行，该连接类型是不错的。ref 可以用于使用 &#x3D; 或 &lt;&#x3D;&gt; 操作符的带索引的列。</li><li>ref_or_null：该联接类型如同 ref，但是添加 了MySQL 可以专门搜索包含 NULL 值的行。在解决子查询中经常使用该连接类型的优化。</li><li>index_merge：该连接类型表示使用了索引合并优化方法。在这种情况下，key 列包含了使用的索引的清单，key_len 包含了使用的索引的最长的关键元素。</li><li>unique_subquery：该类型替换了下面形式的 IN 子查询的 ref：value IN (SELECT primary_key FROM single_table WHERE some_expr); unique_subquery 是一个索引查找函数，可以完全替换子查询，效率更高。</li><li>index_subquery：该类型类似于 unique_subquery。可以替换 IN 子查询，但只适合下列形式的子查询中的非唯一索引：value IN SELECT key_column FROM single_table WHERE some_expr</li><li>range：只检索给定范围的行，使用一个索引来选择行。key 列显示使用了哪个索引。key_len 包含所使用索引的最长关键元素。在该类型中 ref 列为 NULL。当使用&#x3D;、&lt;&gt;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;、IS NULL、&lt;&#x3D;&gt;、BETWEEN 或者 IN 操作符，用常量比较关键字列时，可以使用 range</li><li>index：该联接类型与 ALL 相同，除了只有索引树被扫描。这通常比 ALL 快，因为索引文件通常比数据文件小。</li><li>all：对于每个来自于先前的表的行组合，进行完整的表扫描。如果表是第一个没被标记为 const 的表，这通常性能很差。通常可以增加更多的索引而不要使用 ALL，使得行能基于前面的表中的常数值或列值被检索出。</li></ul><p>接下来，从join_optimization各个part入手，分析这一过程。</p><h3 id="3-2-2-condition-processing"><a href="#3-2-2-condition-processing" class="headerlink" title="3.2.2 condition_processing"></a>3.2.2 condition_processing</h3><p>condition_processing对应sql&#x2F;sql_optimizer.cc的optimize_cond函数，主要优化查询的 where 和 having 条件（on也是一种where），主要完成以下优化：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">condition_processing&#123; ：条件句处理。</span><br><span class="line">    transformation&#123;：转换类型句。这三次的转换分别是</span><br><span class="line">        equality_propagation（等值条件句转换），如：a = b and b = c and c = 5，推导出a = b = c = 5</span><br><span class="line">        constant_propagation（常量条件句转换），如：根据 x=42 推导出所有多元等式 (x, y, z, …) 中的字段都等于 42</span><br><span class="line">        trivial_condition_removal（无效条件移除的转换），消除那些始终为true或者为false的条件，如：1 = 1</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>example：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> a <span class="keyword">from</span> t1 <span class="keyword">where</span> a<span class="operator">=</span>b <span class="keyword">and</span> b<span class="operator">=</span>c <span class="keyword">group</span> <span class="keyword">by</span> a,b <span class="keyword">having</span> a<span class="operator">=</span>b <span class="keyword">and</span> b<span class="operator">=</span><span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;condition_processing&quot;: &#123;</span><br><span class="line">              &quot;condition&quot;: &quot;WHERE&quot;,</span><br><span class="line">              &quot;original_condition&quot;: &quot;((`t1`.`a` = `t1`.`b`) and (`t1`.`b` = `t1`.`c`))&quot;,</span><br><span class="line">              &quot;steps&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;transformation&quot;: &quot;equality_propagation&quot;,</span><br><span class="line">                  &quot;resulting_condition&quot;: &quot;(multiple equal(`t1`.`a`, `t1`.`b`, `t1`.`c`))&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;transformation&quot;: &quot;constant_propagation&quot;,</span><br><span class="line">                  &quot;resulting_condition&quot;: &quot;(multiple equal(`t1`.`a`, `t1`.`b`, `t1`.`c`))&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;transformation&quot;: &quot;trivial_condition_removal&quot;,</span><br><span class="line">                  &quot;resulting_condition&quot;: &quot;multiple equal(`t1`.`a`, `t1`.`b`, `t1`.`c`)&quot;</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;condition_processing&quot;: &#123;</span><br><span class="line">              &quot;condition&quot;: &quot;HAVING&quot;,</span><br><span class="line">              &quot;original_condition&quot;: &quot;((`t1`.`a` = `t1`.`b`) and (`t1`.`b` = 5))&quot;,</span><br><span class="line">              &quot;steps&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;transformation&quot;: &quot;constant_propagation&quot;,</span><br><span class="line">                  &quot;resulting_condition&quot;: &quot;((`t1`.`a` = 5) and (`t1`.`b` = 5))&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;transformation&quot;: &quot;trivial_condition_removal&quot;,</span><br><span class="line">                  &quot;resulting_condition&quot;: &quot;((`t1`.`a` = 5) and (`t1`.`b` = 5))&quot;</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="3-2-3-substitute-generated-columns"><a href="#3-2-3-substitute-generated-columns" class="headerlink" title="3.2.3 substitute_generated_columns"></a>3.2.3 substitute_generated_columns</h3><p>substitute_generated_columns对应sql&#x2F;optimizer.cc的substitute_gc函数，主要检查 query 的 where 条件、order by 、order by等，将其中的表达式替换为匹配的 generated column，进而可以让优化器来选择functional index。</p><blockquote><p>MySQL从8.0.13开始支持functional index。Functional index类似于ORACLE的Function-Based Indexes。该索引可以根据将索引定义的表达式的值按照索引顺序存到索引里，进而减少表达式的计算，加速查询。</p></blockquote><p>example：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> t1 <span class="keyword">add</span> index fun_abs((<span class="built_in">abs</span>(a)));</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> a <span class="keyword">from</span> t1 <span class="keyword">where</span> <span class="built_in">abs</span>(a)<span class="operator">=</span><span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;substitute_generated_columns&quot;: &#123;</span><br><span class="line">              &quot;resulting_condition&quot;: &quot;(abs(`a`) = 5)&quot;</span><br><span class="line">            &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>详见：<a href="http://mysql.taobao.org/monthly/2019/02/06/">MySQL · 源码分析 · 8.0 Functional index的实现过程</a></p><h3 id="3-2-4-table-dependencies"><a href="#3-2-4-table-dependencies" class="headerlink" title="3.2.4 table_dependencies"></a>3.2.4 table_dependencies</h3><p>table_dependencies对应sql&#x2F;sql_optimizer.cc的trace_table_dependencies函数，负责分析表之间的依赖关系。主要有：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;table_dependencies&quot;: &#123;</span><br><span class="line">    &quot;table&quot;: 涉及的表名，如果有别名，也会展示出来</span><br><span class="line">    &quot;row_may_be_null&quot;: 行是否可能为NULL，指JOIN操作之后，这张表里的数据是不是可能为NULL。如果语句中使用了LEFT JOIN，则后一张表的该参数会显示为true</span><br><span class="line">    &quot;map_bit&quot;: 表的映射编号，从0开始递增</span><br><span class="line">    &quot;depends_on_map_bits&quot;: 依赖的映射表。主要是当使用STRAIGHT_JOIN强行控制连接顺序或者LEFT JOIN/RIGHT JOIN有顺序差别时，会在该参数展示前置表的map_bit值</span><br></pre></td></tr></table></figure><p>example：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 straight_join t2 <span class="keyword">on</span> t1.a<span class="operator">=</span>t2.a;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;table_dependencies&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;table&quot;: &quot;`t1`&quot;,</span><br><span class="line">                &quot;row_may_be_null&quot;: <span class="literal">false</span>,</span><br><span class="line">                &quot;map_bit&quot;: <span class="number">0</span>,</span><br><span class="line">                &quot;depends_on_map_bits&quot;: [</span><br><span class="line">                ]</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;table&quot;: &quot;`t2`&quot;,</span><br><span class="line">                &quot;row_may_be_null&quot;: <span class="literal">false</span>,</span><br><span class="line">                &quot;map_bit&quot;: <span class="number">1</span>,</span><br><span class="line">                &quot;depends_on_map_bits&quot;: [</span><br><span class="line">                  <span class="number">0</span></span><br><span class="line">                ]</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="3-2-5-ref-optimizer-key-uses"><a href="#3-2-5-ref-optimizer-key-uses" class="headerlink" title="3.2.5 ref_optimizer_key_uses"></a>3.2.5 ref_optimizer_key_uses</h3><p>ref_optimizer_key_uses对应sql&#x2F;sql_optimizer.cc的update_ref_and_keys函数，查看SQL中每个表可以使用的ref索引，用于后续计算访问和连接代价。如果使用了组合索引的多个部分（例如本例，用到了index(from_date, to_date) 的多列索引），则会在ref_optimizer_key_uses下列出多个元素，每个元素中会列出ref使用的索引及对应值。</p><p>ref是必须为等值比较的方式，通常在单表条件和多表连接的条件中。</p><p>example：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> a <span class="keyword">from</span> t1 <span class="keyword">where</span> <span class="built_in">abs</span>(a)<span class="operator">=</span><span class="number">5</span>; # KEY `fun_abs` ((<span class="built_in">abs</span>(`a`)))</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;ref_optimizer_key_uses&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;table&quot;: &quot;`t1`&quot;,</span><br><span class="line">                &quot;field&quot;: &quot;abs(`a`)&quot;,</span><br><span class="line">                &quot;equals&quot;: &quot;5&quot;,</span><br><span class="line">                &quot;null_rejecting&quot;: <span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>ref是必须为等值比较的方式，如果条件是大于或者小于，这里就不会显示。</p><h3 id="3-2-6-pulled-out-semijoin-tables"><a href="#3-2-6-pulled-out-semijoin-tables" class="headerlink" title="3.2.6 pulled_out_semijoin_tables"></a>3.2.6 pulled_out_semijoin_tables</h3><p>pulled_out_semijoin_tables对应sql&#x2F;sql_optimizer.cc的pull_out_semijoin_tables函数，用于把semi-join优化为inner-join。优化的条件，是子查询的目标列，使用了主键或唯一键。</p><p>该函数检查semi-join nest中的function dependency(例如EQ_REF(outer_table))，对于这种table，从semi-join nest中抽取出来，放到外层join nest-&gt;join_list中。</p><p>对于EQ_REF，是保证能join到，且只能join到一条的，所以对于存在性语义（where exist）来说，这个inner table表是没有用的，抽取出来后，semi-join nest的相关字段都要调整，sj-nest将可能被标记为correlated（内层条件变为了相关条件）</p><p>这个试了好久里面都是空的……以后有机会看到再补充吧</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> t1.a <span class="keyword">in</span> (<span class="keyword">select</span> t2.a <span class="keyword">from</span> t2); # KEY `primary_key` (`a`)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;pulled_out_semijoin_tables&quot;: [</span><br><span class="line">            ]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="3-2-7-rows-estimation"><a href="#3-2-7-rows-estimation" class="headerlink" title="3.2.7 rows_estimation"></a>3.2.7 rows_estimation</h3><p>rows_estimation对应sql&#x2F;sql_optimizer.cc的JOIN::estimate_rowcount函数，用于估算需要扫描的记录数，并在后续的优化过程中持续计算每个候选执行计划的 cost。</p><p>优化器的成本模型也由server和engine两层来组成，包含查询执行期间发生的操作的成本估计信息。Server层进行连接管理、权限链接，查询缓存（8.0已废弃）、语法解析、查询优化ICP等操作。在存储引擎层执行具体的数据存取操作。</p><ul><li>server_cost:一般服务层操作的优化器成本估算<ul><li>disk_temptable_create_cost： 代表了基于磁盘的存储引擎（InnoDB 和MyISAM）中创建临时表的成本估算</li><li>disk_temptable_row_cost： 代表了基于磁盘的存储引擎（InnoDB 和MyISAM）中写入或读取一条记录的成本</li><li>key_compare_cost：比较记录键的开销</li><li>memory_temptable_create_cost：在 MEMORY 存储引擎中创建内部临时表的评估成本</li><li>memory_temptable_row_cost：在 MEMORY 存储引擎中读取或写入内部临时表一条记录的评估成本</li><li>row_evaluate_cost：检测一条记录是否符合搜索条件的成本</li></ul></li><li>engine_cost:用于存储引擎的操作的优化器成本估算<ul><li>io_block_read_cost：从磁盘读取索引或数据块的开销</li><li>memory_block_read_cost：类似于io_block_read_cost，但表示从内存中的数据库缓冲区读取索引或数据块的开销</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span>  <span class="operator">*</span> <span class="keyword">FROM</span> mysql.server_cost;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+------------+---------------------+---------+---------------+</span></span><br><span class="line"><span class="operator">|</span> cost_name                    <span class="operator">|</span> cost_value <span class="operator">|</span> last_update         <span class="operator">|</span> comment <span class="operator">|</span> default_value <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+------------+---------------------+---------+---------------+</span></span><br><span class="line"><span class="operator">|</span> disk_temptable_create_cost   <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-02</span><span class="number">-04</span> <span class="number">11</span>:<span class="number">15</span>:<span class="number">41</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>            <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> disk_temptable_row_cost      <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-02</span><span class="number">-04</span> <span class="number">11</span>:<span class="number">15</span>:<span class="number">41</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>           <span class="number">0.5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> key_compare_cost             <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-02</span><span class="number">-04</span> <span class="number">11</span>:<span class="number">15</span>:<span class="number">41</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>          <span class="number">0.05</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> memory_temptable_create_cost <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-02</span><span class="number">-04</span> <span class="number">11</span>:<span class="number">15</span>:<span class="number">41</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> memory_temptable_row_cost    <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-02</span><span class="number">-04</span> <span class="number">11</span>:<span class="number">15</span>:<span class="number">41</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>           <span class="number">0.1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> row_evaluate_cost            <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-02</span><span class="number">-04</span> <span class="number">11</span>:<span class="number">15</span>:<span class="number">41</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>           <span class="number">0.1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------------+------------+---------------------+---------+---------------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span>  <span class="operator">*</span> <span class="keyword">FROM</span> mysql.engine_cost;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+------------------------+------------+---------------------+---------+---------------+</span></span><br><span class="line"><span class="operator">|</span> engine_name <span class="operator">|</span> device_type <span class="operator">|</span> cost_name              <span class="operator">|</span> cost_value <span class="operator">|</span> last_update         <span class="operator">|</span> comment <span class="operator">|</span> default_value <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+------------------------+------------+---------------------+---------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">default</span>     <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span> io_block_read_cost     <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-02</span><span class="number">-04</span> <span class="number">11</span>:<span class="number">15</span>:<span class="number">41</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">default</span>     <span class="operator">|</span>           <span class="number">0</span> <span class="operator">|</span> memory_block_read_cost <span class="operator">|</span>       <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">2024</span><span class="number">-02</span><span class="number">-04</span> <span class="number">11</span>:<span class="number">15</span>:<span class="number">41</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>          <span class="number">0.25</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+------------------------+------------+---------------------+---------+---------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>Server层主要是CPU代价，Engine层主要是IO代价，代价模型将操作分为两类io_cost和cpu_cost，io_cost+cpu_cost就是总的cost。</p><p>基于以上成本值，分析rows_estimation部分。</p><p>rows_estimation主要由以下部分组成：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rows_estimation&#123; ：估算表行数和扫描的代价。如果查询中存在range扫描的话，对range扫描进行计划分析及代价估算。</span><br><span class="line">  table_scan：全表扫描的行数(rows)以及所需要的代价(cost)</span><br><span class="line">  potential_range_indexes：该阶段会列出表中所有的索引并分析其是否可用，并且还会列出索引中可用的列字段</span><br><span class="line">  best_covering_index_scan：如果有覆盖索引，列出覆盖索引情况</span><br><span class="line">  setup_range_conditions：如果有可下推的条件，则带条件考虑范围查询</span><br><span class="line">  group_index_range：当使用了GROUP BY或DISTINCT时，是否有合适的索引可用</span><br><span class="line">                     当未使用GROUP BY或DISTINCT时，会显示chosen=false, cause=not_group_by_or_distinct；</span><br><span class="line">                    如使用了GROUP BY或DISTINCT，但是多表查询时，会显示chosen=false，cause =not_single_table。</span><br><span class="line">                    其他情况下会尝试分析可用的索引（potential_group_range_indexes）并计算对应的扫描行数及其所需代价</span><br><span class="line">  skip_scan_range：是否使用了skip_scan_range</span><br><span class="line">  analyzing_range_alternatives ：分析可选方案的代价。</span><br><span class="line">  chosen_range_access_summary：</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>省略不涉及的部分，针对各个小模块展开说明。</p><p><strong>table_scan:</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;table&quot;: &quot;`t2`&quot;,</span><br><span class="line">&quot;range_analysis&quot;: &#123;</span><br><span class="line">  &quot;table_scan&quot;: &#123;     # 全表扫描的代价评估</span><br><span class="line">    &quot;rows&quot;: 5,        # 全表扫描的行数</span><br><span class="line">    &quot;cost&quot;: 2.85      # 全表扫描的代价，等于io_cost(页数) + 1.1 + cpu_cost(行数) + 1.0，即 0.25 + 1.1 + 0.1*5 + 1 = 2.85</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>详细的cost计算及分析：</p><p><code>io_cost = clustered_index_size (统计信息中的主键页数) * avg_single_page_cost(读取一个页的平均成本)</code></p><p>其中：</p><p><code>avg_single_page_cost = pages_in_memory_percent * memory_block_read_cost + pages_on_disk_percent * io_block_read_cost</code></p><p>pages_in_memory_percent  为已经加载到 Buffer Pool 中的叶结点占所有叶结点的比例</p><p>pages_on_disk_percent 为没有加载到 Buffer Pool 中的叶结点占所有叶结点的比例</p><p>所以当数据已经全部读取到buffer pool中的时候：</p><p><code>io_cost=clustered_index_size * memory_block_read_cost</code></p><p>都没有读取到buffer pool中的时候：</p><p><code>io_cost=clustered_index_size * io_block_read_cost</code></p><p>当部分数据在buffer pool中，部分数据需要从磁盘读取时，这时的系数介于0.25到1之间。</p><p><code>cpu_cost = n_rows(统计信息中记录数) * row_evaluate_cost</code></p><p><strong>potential_range_indexes:</strong></p><p>首先先列出该表可以使用RANGE扫描的key索引列表，并且还会列出索引中可用的列字段。</p><p>这里直接会判定是否所以可以被考虑，”usable”代表是否可能被用到，”cause”代表被拒绝的原因。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&quot;table&quot;: &quot;`t2`&quot;,</span><br><span class="line">&quot;range_analysis&quot;: &#123;</span><br><span class="line">...</span><br><span class="line">&quot;potential_range_indexes&quot;: [</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;index&quot;: &quot;ka&quot;,</span><br><span class="line">    &quot;usable&quot;: <span class="literal">false</span>,</span><br><span class="line">    &quot;cause&quot;: &quot;not_applicable&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;index&quot;: &quot;kb&quot;,</span><br><span class="line">    &quot;usable&quot;: <span class="literal">true</span>,</span><br><span class="line">    &quot;key_parts&quot;: [</span><br><span class="line">      &quot;b&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p><strong>best_covering_index_scan:</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;table&quot;: &quot;`t5`&quot;,</span><br><span class="line">&quot;range_analysis&quot;: &#123;</span><br><span class="line">...</span><br><span class="line">  &quot;best_covering_index_scan&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &quot;kb&quot;,</span><br><span class="line">    &quot;cost&quot;: 0.550549,</span><br><span class="line">    &quot;chosen&quot;: true</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>当然，即使有覆盖索引，也可能出现由于过滤性不强导致全表扫描方式代价比覆盖索引代价低，而选择全表扫描的情况。</p><p>走索引的成本的计算方法和全表扫描的计算方法类似，其中io_cost与搜索的区间数有关，在无需回表的情况下，计算方式为：</p><p><code>io_cost = (要读取的索引页的数量) * avg_single_page_cost</code></p><p><code>cpu_cost = (记录数) * row_evaluate_cost</code></p><blockquote><p>avg_single_page_cost &#x3D; pages_in_memory_percent * memory_block_read_cost + pages_on_disk_percent * io_block_read_cost</p><p>pages_in_memory_percent  为已经加载到 Buffer Pool 中的叶结点占所有叶结点的比例</p><p>pages_on_disk_percent 为没有加载到 Buffer Pool 中的叶结点占所有叶结点的比例</p></blockquote><p><strong>setup_range_conditions:</strong></p><p>如果有可下推的条件，则带条件考虑范围查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;table&quot;: &quot;`t6`&quot;,</span><br><span class="line">&quot;range_analysis&quot;: &#123;</span><br><span class="line">...</span><br><span class="line">  &quot;setup_range_conditions&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;impossible_condition&quot;: &#123;</span><br><span class="line">        &quot;cause&quot;: &quot;value_out_of_range&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;impossible_range&quot;: <span class="literal">true</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这里有一个bug report：Different results return when executing the same query with different plans </p><p><strong>group_index_range：</strong></p><p>接下来就开始查看是否有快速范围查找的方式（Quick Range Scan），如group_index_range和skip_scan_range等。</p><p>当使用了GROUP BY或DISTINCT时，是否有合适的索引可用。</p><p>当未使用GROUP BY或DISTINCT时，会显示chosen&#x3D;false, cause&#x3D;not_group_by_or_distinct，如果可以使用，也有可能因为cost原因没有选择。</p><p>如使用了GROUP BY或DISTINCT，但是多表查询时，会显示chosen&#x3D;false，cause &#x3D;not_single_table。</p><p>其他情况下会尝试分析可用的索引（potential_group_range_indexes）并计算对应的扫描行数及其所需代价。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 一个不能使用的例子</span><br><span class="line">&quot;table&quot;: &quot;`t4`&quot;,</span><br><span class="line">&quot;range_analysis&quot;: &#123;</span><br><span class="line">...</span><br><span class="line">  &quot;group_index_range&quot;: &#123;</span><br><span class="line">    &quot;potential_group_range_indexes&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;index&quot;: &quot;PRIMARY&quot;,</span><br><span class="line">        &quot;usable&quot;: <span class="literal">false</span>,</span><br><span class="line">        &quot;cause&quot;: &quot;not_covering&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># 一个可以使用的例子</span><br><span class="line">&quot;table&quot;: &quot;`t3`&quot;,</span><br><span class="line">&quot;range_analysis&quot;: &#123;</span><br><span class="line">...</span><br><span class="line">  &quot;group_index_range&quot;: &#123;</span><br><span class="line">    &quot;potential_group_range_indexes&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;index&quot;: &quot;PRIMARY&quot;,</span><br><span class="line">        &quot;covering&quot;: <span class="literal">true</span>,</span><br><span class="line">        &quot;rows&quot;: <span class="number">6</span>,</span><br><span class="line">        &quot;cost&quot;: <span class="number">1.15</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如果存在满足的index，还有可能输出best_group_range_summary，如下。</p><p><strong>best_group_range_summary：</strong></p><p>对于group_index_range步骤中判断的多个满足的index，评估哪个应该被放弃：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&quot;table&quot;: &quot;`t4`&quot;,</span><br><span class="line">&quot;range_analysis&quot;: &#123;</span><br><span class="line">...</span><br><span class="line">  &quot;best_group_range_summary&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;index_group&quot;,</span><br><span class="line">    &quot;index&quot;: &quot;ka&quot;,</span><br><span class="line">    &quot;group_attribute&quot;: <span class="keyword">null</span>,</span><br><span class="line">    &quot;min_aggregate&quot;: <span class="literal">false</span>,</span><br><span class="line">    &quot;max_aggregate&quot;: <span class="literal">false</span>,</span><br><span class="line">    &quot;distinct_aggregate&quot;: <span class="literal">false</span>,</span><br><span class="line">    &quot;rows&quot;: <span class="number">6</span>,</span><br><span class="line">    &quot;cost&quot;: <span class="number">1.15</span>,</span><br><span class="line">    &quot;key_parts_used_for_access&quot;: [</span><br><span class="line">      &quot;a&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;ranges&quot;: [</span><br><span class="line">    ],</span><br><span class="line">    &quot;chosen&quot;: <span class="literal">false</span>,</span><br><span class="line">    &quot;cause&quot;: &quot;cost&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>skip_scan_range:</strong></p><p>是否使用了skip scan。</p><p>在之前的版本中，如果要使用到索引进行扫描，条件必须满足索引前缀列，比如索引idx(col1,col2), 如果where条件只包含col2的话，是无法有效的使用idx的, 它需要扫描索引上所有的行，然后再根据col2上的条件过滤。</p><p>MySQL从8.0.13版本开始支持一种新的range scan方式，称为Loose Skip Scan。该优化可以避免全量索引扫描，而是根据每个col1上的值+col2上的条件，启动多次range scan。每次range scan根据构建的key值直接在索引上定位，直接忽略了那些不满足条件的记录。</p><p>skip scan range的使用需要保证：</p><ul><li>表具有至少一个复合索引([A_1, …, A_k,] B_1, …, B_m, C [, D_1, …, D_n]，A、D可以为空)</li><li>该查询仅引用一张表</li><li>该查询不使用 GROUP BY 或 DISTINCT</li><li>该查询仅引用索引中的列</li><li>A_1, …, A_k 上的谓词必须是相等谓词并且它们必须是常量，（包括IN操作）</li><li>查询必须是联合查询，也就是说条件必须是：(cond1(key_part1) OR cond2(key_part1)) AND (cond1(key_part2) OR …) AND …</li><li>C上必须有一个范围条件</li><li>D 列上的条件是允许的。 D 上的条件必须与 C 上的范围条件结合起来。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;skip_scan_range&quot;: &#123;</span><br><span class="line">  &quot;type&quot;: &quot;skip_scan&quot;,</span><br><span class="line">  &quot;index&quot;: index_used_for_skip_scan,</span><br><span class="line">  &quot;key_parts_used_for_access&quot;: [key_parts_used_for_access],</span><br><span class="line">  &quot;range&quot;: [<span class="keyword">range</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和group_index_range一样，这里也会出现best_skip_scan_summary部分，在此不多分析。<br>参考：<a href="http://mysql.taobao.org/monthly/2019/05/06/">MySQL · 引擎特性 · Skip Scan Range</a></p><p><strong>analyzing_range_alternatives:</strong></p><p>这时候优化器已经根据cost选出了一个最佳的访问方式（Table Scan vs Quick Range Scan），接下来优化器会继续分析各个索引的使用成本，包括range_scan_alternatives（range扫描分析）、analyzing_roworder_intersect（index merge分析）两个阶段，分别针对不同的情况进行执行代价的分析，从中选择出更优的执行计划。</p><ul><li>range_scan_alternatives：单独查看范围索引（Index Range Scan）是否有最有的方案，这些可能的选择都放在range_scan_alternatives中，可以看到具体使用的索引、索引估算代价的来源（dive、statistics、histogram等）、是否使用一些特殊的优化模式（rowid_ordered、using_mrr、index_only），已经该索引内存占用的比例。</li><li>analyzing_roworder_intersect：是否使用合并索引，即基于多个索引共同方式，也就是通过row ids排序后进行交集和并集的访问方式（index(a) &#x3D; 10 and index(b) &#x3D; 10 -&gt; a &#x3D; 10 and b &#x3D; 10）</li></ul><p>“chosen”代表是否该快速访问方式被使用，”cause”是被拒绝的原因，通常都会看到是由于cost被剪枝掉。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&quot;analyzing_range_alternatives&quot;: &#123;</span><br><span class="line">  &quot;range_scan_alternatives&quot;: [               # 扫描分析</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;index&quot;: &quot;kb&quot;,                         # 索引名</span><br><span class="line">      &quot;ranges&quot;: [                            # 扫描的条件范围</span><br><span class="line">        &quot;0 &lt; b&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;index_dives_for_eq_ranges&quot;: <span class="literal">true</span>,     # 是否使用了index dive，受eq_range_index_dive_limit参数影响</span><br><span class="line">      &quot;rowid_ordered&quot;: <span class="literal">false</span>,                # 该<span class="keyword">range</span>扫描的结果集是否根据<span class="keyword">primary</span> key进行排序</span><br><span class="line">      &quot;using_mrr&quot;: <span class="literal">false</span>,                    # 是否用到了MRR</span><br><span class="line">      &quot;index_only&quot;: <span class="literal">false</span>,                   # 是否使用了覆盖索引</span><br><span class="line">      &quot;in_memory&quot;: <span class="number">1</span>,                        # 是否在内存里，用来计算访问的数据page不在内存而在磁盘，由于IO访问造成的代价，<span class="number">1</span>指的是数据都在内存中</span><br><span class="line">      &quot;rows&quot;: <span class="number">5</span>,                             # 扫描的行数</span><br><span class="line">      &quot;cost&quot;: <span class="number">2.01</span>,                          # 索引的使用成本</span><br><span class="line">      &quot;chosen&quot;: <span class="literal">true</span>                         # 是否使用了该索引</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;analyzing_roworder_intersect&quot;: &#123;          # 是否使用了索引合并（index <span class="keyword">merge</span>），如果未使用，会在cause中展示原因；如果使用了索引合并，会在该部分展示索引合并的代价</span><br><span class="line">    &quot;usable&quot;: <span class="literal">false</span>,</span><br><span class="line">    &quot;cause&quot;: &quot;too_few_roworder_scans&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在之前的分析中，介绍了全表扫描和覆盖索引的成本，这里针对二级索引并且需要回表的情况，给出成本的计算公式：</p><blockquote><p>在无需回表的情况下，计算方式为：</p><p>io_cost &#x3D; (要读取的索引页的数量) * avg_single_page_cost</p><p>cpu_cost &#x3D; (记录数) * row_evaluate_cost</p></blockquote><p>每次回表，还需要再进行一次IO和一次判断：</p><p><code>io_cost = (记录数) * avg_single_page_cost</code></p><p><code>cpu_cost = (记录数) *  row_evaluate_cost</code></p><p>需要注意的是当索引需要回表扫描时，在rows_estimation阶段并不会计算这个值，在considered_execution_plans阶段会重新加上这部分成本。</p><p>综上，针对二级索引并且需要回表的场景，全部成本的计算公式为：</p><p><code>io_cost = (要读取的索引页的数量) * avg_single_page_cost + (记录数) * avg_single_page_cost</code></p><p><code>cpu_cost = (记录数) * row_evaluate_cost + (记录数) *  row_evaluate_cost</code></p><p><strong>chosen_range_access_summary：</strong></p><p>得出了一定的中间结果之后，在summary阶段汇总前一阶段的中间结果确认最后的方案。</p><p>如果整个range分析过程中，有被选中的range扫描方式被选中，可以看到chosen_range_access_summary属性，否则没有。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&quot;chosen_range_access_summary&quot;: &#123;</span><br><span class="line">  &quot;range_access_plan&quot;: &#123;            # <span class="keyword">range</span>扫描最终选择的执行计划</span><br><span class="line">    &quot;type&quot;: &quot;range_scan&quot;,           # 展示执行计划的type，如果使用了索引合并，则会显示index_roworder_intersect</span><br><span class="line">    &quot;index&quot;: &quot;kb&quot;,                  # 索引名</span><br><span class="line">    &quot;rows&quot;: <span class="number">5</span>,                      # 扫描的行数</span><br><span class="line">    &quot;ranges&quot;: [                     # <span class="keyword">range</span>扫描的条件范围</span><br><span class="line">      &quot;0 &lt; b&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;rows_for_plan&quot;: <span class="number">5</span>,               # 该执行计划的扫描行数</span><br><span class="line">  &quot;cost_for_plan&quot;: <span class="number">2.01</span>,            # 该执行计划的执行代价</span><br><span class="line">  &quot;chosen&quot;: <span class="literal">true</span>                    # 是否选择该执行计划</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-8-execution-plan-for-potential-materialization"><a href="#3-2-8-execution-plan-for-potential-materialization" class="headerlink" title="3.2.8 execution_plan_for_potential_materialization"></a>3.2.8 execution_plan_for_potential_materialization</h3><p>execution_plan_for_potential_materialization有两个对应的函数，一是sql&#x2F;sql_optimizer.cc的optimize_semijoin_nests_for_materialization，二是sql&#x2F;sql_optimizer.cc的compare_costs_of_subquery_strategies。</p><p>对于子查询，优化器有三种优化策略，分别是：</p><ul><li>半连接策略（semi-join）：半连接优化技术，本质上是把子查询上拉到父查询中，与父查询的表做join&#x2F;semi-join的操作</li><li>子查询物化策略：物化子查询，子查询的结果通常缓存在内存或临时表中</li><li>转换为相关子查询：把半连接转换为EXISTS操作。本质上是把父表的条件下推到子查询</li></ul><p>如果半连接参数关闭（set optimizer_switch&#x3D;’semijoin&#x3D;off’），则可以使用物化策略或转换为子查询策略，或者如果子查询中存在像 group by 子句这样的限制因素，又或者因为成本问题不能转换为半连接，那就要在物化和转换为子查询策略中二选一了。使用哪种由函数decide_subquery_strategy决定，该函数会调用compare_costs_of_subquery_strategies进行两种策略的代价计算，选择代价小的优化策略。</p><p>实际上，compare_costs_of_subquery_strategies会调用optimize_semijoin_nests_for_materialization，这个函数又会调用Optimize_table_order::choose_table_order，对embeding、semijoin的子查询做局部的 join reorder，此时输出结果与considered_execution_plans部分格式相同，我们放在下一节里统一介绍，这里先跳过。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> optimizer_switch<span class="operator">=</span><span class="string">&#x27;semijoin=off&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> a <span class="operator">&lt;</span> <span class="number">5</span> <span class="keyword">and</span> a <span class="keyword">in</span> (<span class="keyword">select</span> a <span class="keyword">from</span> t2);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;execution_plan_for_potential_materialization&quot;: &#123;                                                                                                                                                                                                                     [<span class="number">90</span><span class="operator">/</span><span class="number">1913</span>]</span><br><span class="line">              &quot;steps&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;considered_execution_plans&quot;: [</span><br><span class="line">                    ... # 见下一节</span><br><span class="line">                  ]</span><br><span class="line">                &#125;</span><br><span class="line">              ],</span><br><span class="line">              &quot;subq_mat_decision&quot;: &#123;                                    # 使用物化方式执行子查询的成本</span><br><span class="line">                &quot;parent_fanouts&quot;: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    &quot;select#&quot;: <span class="number">1</span>,</span><br><span class="line">                    &quot;subq_attached_to_table&quot;: <span class="literal">true</span>,</span><br><span class="line">                    &quot;table&quot;: &quot;`t1`&quot;,</span><br><span class="line">                    &quot;fanout&quot;: <span class="number">4</span>,                                        # 表示预估的主查询t1表里满足a <span class="operator">&lt;</span> <span class="number">5</span>的记录数量</span><br><span class="line">                    &quot;cacheable&quot;: <span class="literal">true</span></span><br><span class="line">                  &#125;</span><br><span class="line">                ],</span><br><span class="line">                &quot;cost_to_create_and_fill_materialized_table&quot;: <span class="number">2.249</span>,    # 表示创建临时表的成本，加上把子查询中的所有记录都写入临时表的成本</span><br><span class="line">                &quot;cost_of_one_EXISTS&quot;: <span class="number">0.349</span>,</span><br><span class="line">                &quot;number_of_subquery_evaluations&quot;: <span class="number">4</span>,</span><br><span class="line">                &quot;cost_of_materialization&quot;: <span class="number">2.649</span>,                       # 表示使用物化方式执行 <span class="keyword">IN</span> 子查询的总成本</span><br><span class="line">                &quot;cost_of_EXISTS&quot;: <span class="number">1.396</span>,                                # 转换为相关子查询的执行成本</span><br><span class="line">                &quot;chosen&quot;: <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>cost_of_materialization 表示使用物化方式执行 IN 子查询的总成本，计算公式为：</p><p><code>cost_of_materialization = cost_to_create_and_fill_materialized_table + number_of_subquery_evaluations * (io_cost + cpu_cost + import_cost)</code></p><p>后面括号里的结果可以由该SQL得到：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  cost_name, cost_value, default_value</span><br><span class="line"><span class="keyword">FROM</span> mysql.server_cost</span><br><span class="line"><span class="keyword">WHERE</span> cost_name <span class="operator">=</span> <span class="string">&#x27;memory_temptable_row_cost&#x27;</span></span><br></pre></td></tr></table></figure><p>查询 cost_name 等于 memory_temptable_row_cost 的成本常数，因为使用的是内存临时表。<br>如果子查询使用的是磁盘临时表，则需要查询 cost_name 等于 disk_temptable_row_cost 的成本常数。</p><p>cost_of_EXISTS为转换为子查询的执行成本，计算公式为：</p><p><code>cost_of_EXISTS = cost_of_one_EXISTS * number_of_subquery_evaluations</code></p><h3 id="3-2-9-considered-execution-plans"><a href="#3-2-9-considered-execution-plans" class="headerlink" title="3.2.9 considered_execution_plans"></a>3.2.9 considered_execution_plans</h3><p>considered_execution_plans对应sql&#x2F;sql_planner.cc的Optimize_table_order::choose_table_order函数，负责对比各可行计划的开销，并选择相对最优的执行计划。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">considered_execution_plans&#123; ：对比各可行计划的代价，选择相对最优的执行计划</span><br><span class="line">  plan_prefix：前置的执行计划</span><br><span class="line">  table：涉及的表名，如果有别名，也会展示出来</span><br><span class="line">  best_access_path：当前最优的执行顺序信息结果集。通过对比considered_access_paths，选择一个最优的访问路径</span><br><span class="line">    considered_access_paths：当前考虑的访问路径</span><br><span class="line">      access_type：表示使用索引的方式，可参照为explain中的type字段</span><br><span class="line">      index：索引</span><br><span class="line">      rows：行数</span><br><span class="line">      cost：开销</span><br><span class="line">      chosen：是否选择这种执行路径</span><br><span class="line">  condition_filtering_pct：类似于explain中的filtered列，这是一个估算值</span><br><span class="line">  rows_for_plan：该执行计划最终的扫描行数，这里的行数其实也是估算值，是由considered_access_paths的resulting_rows相乘之后再乘以condition_filtering_pct获得</span><br><span class="line">  cost_for_plan：该执行计划的执行代价，由considered_access_paths的cost相加而得</span><br><span class="line">  chosen：是否选择了该执行计划</span><br><span class="line">  rest_of_plan：多表之间的JOIN会出现该部分，来分析被驱动表的代价，来确定多表之间的JOIN顺序。如果是三表JOIN则rest_of_plan下还会存在下级的rest_of_plan</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单表场景只会考虑Range和Ref的访问方式（Ref access vs. table&#x2F;index scan）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">table</span> scan</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t3  <span class="keyword">where</span> b<span class="operator">=</span><span class="number">5</span>; # (<span class="keyword">no</span> index <span class="keyword">on</span> b)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;considered_execution_plans&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;plan_prefix&quot;: [</span><br><span class="line">                ],</span><br><span class="line">                &quot;table&quot;: &quot;`t3`&quot;,</span><br><span class="line">                &quot;best_access_path&quot;: &#123;</span><br><span class="line">                  &quot;considered_access_paths&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;rows_to_scan&quot;: <span class="number">5</span>,</span><br><span class="line">                      &quot;access_type&quot;: &quot;scan&quot;,</span><br><span class="line">                      &quot;resulting_rows&quot;: <span class="number">5</span>,</span><br><span class="line">                      &quot;cost&quot;: <span class="number">0.75</span>,</span><br><span class="line">                      &quot;chosen&quot;: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;condition_filtering_pct&quot;: <span class="number">100</span>,</span><br><span class="line">                &quot;rows_for_plan&quot;: <span class="number">5</span>,</span><br><span class="line">                &quot;cost_for_plan&quot;: <span class="number">0.75</span>,</span><br><span class="line">                &quot;chosen&quot;: <span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># <span class="keyword">ref</span> access</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> c, d <span class="keyword">from</span> t5 <span class="keyword">where</span> c <span class="operator">=</span> <span class="number">5</span> <span class="keyword">and</span> d <span class="operator">=</span> <span class="number">5</span>; # index(c, d)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;considered_execution_plans&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;plan_prefix&quot;: [</span><br><span class="line">                ],</span><br><span class="line">                &quot;table&quot;: &quot;`t5`&quot;,</span><br><span class="line">                &quot;best_access_path&quot;: &#123;</span><br><span class="line">                  &quot;considered_access_paths&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;access_type&quot;: &quot;ref&quot;,</span><br><span class="line">                      &quot;index&quot;: &quot;kcd&quot;,</span><br><span class="line">                      &quot;rows&quot;: <span class="number">1</span>,</span><br><span class="line">                      &quot;cost&quot;: <span class="number">0.35</span>,</span><br><span class="line">                      &quot;chosen&quot;: <span class="literal">true</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;access_type&quot;: &quot;range&quot;,</span><br><span class="line">                      &quot;range_details&quot;: &#123;</span><br><span class="line">                        &quot;used_index&quot;: &quot;kcd&quot;</span><br><span class="line">                      &#125;,</span><br><span class="line">                      &quot;chosen&quot;: <span class="literal">false</span>,</span><br><span class="line">                      &quot;cause&quot;: &quot;heuristic_index_cheaper&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;condition_filtering_pct&quot;: <span class="number">100</span>,</span><br><span class="line">                &quot;rows_for_plan&quot;: <span class="number">1</span>,</span><br><span class="line">                &quot;cost_for_plan&quot;: <span class="number">0.35</span>,</span><br><span class="line">                &quot;chosen&quot;: <span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># <span class="keyword">range</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> b <span class="keyword">from</span> t5 <span class="keyword">where</span> b <span class="operator">&gt;</span> <span class="number">3</span> <span class="keyword">and</span> b <span class="operator">&lt;</span> <span class="number">5</span>; # index(b)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;considered_execution_plans&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;plan_prefix&quot;: [</span><br><span class="line">                ],</span><br><span class="line">                &quot;table&quot;: &quot;`t5`&quot;,</span><br><span class="line">                &quot;best_access_path&quot;: &#123;</span><br><span class="line">                  &quot;considered_access_paths&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;rows_to_scan&quot;: <span class="number">1</span>,</span><br><span class="line">                      &quot;access_type&quot;: &quot;range&quot;,</span><br><span class="line">                      &quot;range_details&quot;: &#123;</span><br><span class="line">                        &quot;used_index&quot;: &quot;kb&quot;</span><br><span class="line">                      &#125;,</span><br><span class="line">                      &quot;resulting_rows&quot;: <span class="number">1</span>,</span><br><span class="line">                      &quot;cost&quot;: <span class="number">0.46</span>,</span><br><span class="line">                      &quot;chosen&quot;: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;condition_filtering_pct&quot;: <span class="number">100</span>,</span><br><span class="line">                &quot;rows_for_plan&quot;: <span class="number">1</span>,</span><br><span class="line">                &quot;cost_for_plan&quot;: <span class="number">0.46</span>,</span><br><span class="line">                &quot;chosen&quot;: <span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如果多表还要进行贪婪算法，选出最有的连接顺序和方法。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">join</span> t2 <span class="keyword">on</span> t1.a<span class="operator">=</span>t2.a;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line"># 这里会出现两部分，第一部分是t1做驱动表，t2做被驱动表，此时rest_of_plan会记录t2的代价；另一部分就是t2做驱动表</span><br><span class="line"># 驱动表的分析及格式和单表场景一样，rest_of_plan也具有同样的格式</span><br><span class="line"># 这里只给出一个rest_of_plan的例子</span><br><span class="line">...</span><br><span class="line">                &quot;rest_of_plan&quot;: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    &quot;plan_prefix&quot;: [</span><br><span class="line">                      &quot;`t2`&quot;</span><br><span class="line">                    ],</span><br><span class="line">                    &quot;table&quot;: &quot;`t1`&quot;,</span><br><span class="line">                    &quot;best_access_path&quot;: &#123;</span><br><span class="line">                      &quot;considered_access_paths&quot;: [</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;access_type&quot;: &quot;eq_ref&quot;,</span><br><span class="line">                          &quot;index&quot;: &quot;PRIMARY&quot;,</span><br><span class="line">                          &quot;rows&quot;: <span class="number">1</span>,</span><br><span class="line">                          &quot;cost&quot;: <span class="number">1.75</span>,</span><br><span class="line">                          &quot;chosen&quot;: <span class="literal">true</span>,</span><br><span class="line">                          &quot;cause&quot;: &quot;clustered_pk_chosen_by_heuristics&quot;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                          &quot;rows_to_scan&quot;: <span class="number">5</span>,</span><br><span class="line">                          &quot;filtering_effect&quot;: [</span><br><span class="line">                          ],</span><br><span class="line">                          &quot;final_filtering_effect&quot;: <span class="number">1</span>,</span><br><span class="line">                          &quot;access_type&quot;: &quot;scan&quot;,</span><br><span class="line">                          &quot;using_join_cache&quot;: <span class="literal">true</span>,</span><br><span class="line">                          &quot;buffers_needed&quot;: <span class="number">1</span>,</span><br><span class="line">                          &quot;resulting_rows&quot;: <span class="number">5</span>,</span><br><span class="line">                          &quot;cost&quot;: <span class="number">2.75</span>,</span><br><span class="line">                          &quot;chosen&quot;: <span class="literal">false</span></span><br><span class="line">                        &#125;</span><br><span class="line">                      ]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>通过在驱动表上做额外的where条件过滤（Condition Filtering），能够将驱动表限制在一个更小的范围，以便优化器能够做出更优的执行计划。如果有条件过滤中的where条件不在索引条件中，并且有表连接的场景，还可以关注filtering_effect的值，通过set optimizer_switch&#x3D;”condition_fanout_filter&#x3D;on”;可以关闭该优化。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> t1.a <span class="keyword">from</span> t1 <span class="keyword">where</span> <span class="keyword">exists</span>(</span><br><span class="line">          <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> t2 <span class="keyword">inner</span> <span class="keyword">join</span> t3 <span class="keyword">on</span> t3.a <span class="operator">=</span>t2.a</span><br><span class="line">                            <span class="keyword">inner</span> <span class="keyword">join</span> t4 <span class="keyword">on</span> t4.a <span class="operator">=</span> t3.a </span><br><span class="line">                              <span class="keyword">inner</span> <span class="keyword">join</span> t1 <span class="keyword">on</span> t1.a <span class="operator">=</span> t4.a</span><br><span class="line">          <span class="keyword">where</span> t1.a <span class="operator">=</span> t4.a <span class="keyword">and</span> t2.b<span class="operator">&gt;</span><span class="number">0</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">                  &quot;considered_execution_plans&quot;: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      &quot;plan_prefix&quot;: [</span><br><span class="line">                      ],</span><br><span class="line">                      &quot;table&quot;: &quot;`t2`&quot;,</span><br><span class="line">                      &quot;best_access_path&quot;: &#123;</span><br><span class="line">                        &quot;considered_access_paths&quot;: [</span><br><span class="line">                          ...</span><br><span class="line">                          &#123;</span><br><span class="line">                            &quot;rows_to_scan&quot;: <span class="number">5</span>,</span><br><span class="line">                            &quot;filtering_effect&quot;: [</span><br><span class="line">                            ],</span><br><span class="line">                            &quot;final_filtering_effect&quot;: <span class="number">1</span>,</span><br><span class="line">                            &quot;access_type&quot;: &quot;range&quot;,</span><br><span class="line">                            &quot;range_details&quot;: &#123;</span><br><span class="line">                              &quot;used_index&quot;: &quot;kb&quot;</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &quot;resulting_rows&quot;: <span class="number">5</span>,</span><br><span class="line">                            &quot;cost&quot;: <span class="number">2.51</span>,</span><br><span class="line">                            &quot;chosen&quot;: <span class="literal">true</span></span><br><span class="line">                          &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>semi-join的优化也会显示在这里。semi-join一般有五种策略分别是FirstMatch、LooseScan、MaterializeLookup、MaterializeScan、DuplicatesWeedout。可以通过<code>set @@optimizer_switch=&#39;materialization=on,semijoin=on,loosescan=on,firstmatch=on,duplicateweedout=on,subquery_materialization_cost_based=on&#39;;</code>来强制关闭某种策略。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> t1.a <span class="keyword">from</span> t1 <span class="keyword">where</span> <span class="keyword">exists</span>(</span><br><span class="line">          <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> t2 <span class="keyword">inner</span> <span class="keyword">join</span> t3 <span class="keyword">on</span> t3.a <span class="operator">=</span>t2.a</span><br><span class="line">                            <span class="keyword">inner</span> <span class="keyword">join</span> t4 <span class="keyword">on</span> t4.a <span class="operator">=</span> t3.a </span><br><span class="line">                              <span class="keyword">inner</span> <span class="keyword">join</span> t1 <span class="keyword">on</span> t1.a <span class="operator">=</span> t4.a</span><br><span class="line">          <span class="keyword">where</span> t1.a <span class="operator">=</span> t4.a <span class="keyword">and</span> t2.b<span class="operator">&gt;</span><span class="number">0</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">                                &quot;semijoin_strategy_choice&quot;: [</span><br><span class="line">                                  &#123;</span><br><span class="line">                                    &quot;strategy&quot;: &quot;FirstMatch&quot;,</span><br><span class="line">                                    &quot;recalculate_access_paths_and_cost&quot;: &#123;</span><br><span class="line">                                      &quot;tables&quot;: [</span><br><span class="line">                                        &#123;</span><br><span class="line">                                          &quot;table&quot;: &quot;`t2`&quot;,</span><br><span class="line">                                          &quot;best_access_path&quot;: &#123;</span><br><span class="line">                                            &quot;considered_access_paths&quot;: [</span><br><span class="line">                                              &#123;</span><br><span class="line">                                                &quot;access_type&quot;: &quot;ref&quot;,</span><br><span class="line">                                                &quot;index&quot;: &quot;ka&quot;,</span><br><span class="line">                                                &quot;usable&quot;: <span class="literal">false</span>,</span><br><span class="line">                                                &quot;chosen&quot;: <span class="literal">false</span></span><br><span class="line">                                              &#125;,</span><br><span class="line">                                              &#123;</span><br><span class="line">                                                &quot;access_type&quot;: &quot;ref&quot;,</span><br><span class="line">                                                &quot;index&quot;: &quot;primary_key&quot;,</span><br><span class="line">                                                &quot;usable&quot;: <span class="literal">false</span>,</span><br><span class="line">                                                &quot;chosen&quot;: <span class="literal">false</span></span><br><span class="line">                                              &#125;,</span><br><span class="line">                                              &#123;</span><br><span class="line">                                                &quot;rows_to_scan&quot;: <span class="number">5</span>,</span><br><span class="line">                                                &quot;filtering_effect&quot;: [</span><br><span class="line">                                                ],</span><br><span class="line">                                                &quot;final_filtering_effect&quot;: <span class="number">1</span>,</span><br><span class="line">                                                &quot;access_type&quot;: &quot;range&quot;,</span><br><span class="line">                                                &quot;range_details&quot;: &#123;</span><br><span class="line">                                                  &quot;used_index&quot;: &quot;kb&quot;</span><br><span class="line">                                                &#125;,</span><br><span class="line">                                                &quot;resulting_rows&quot;: <span class="number">5</span>,</span><br><span class="line">                                                &quot;cost&quot;: <span class="number">12.55</span>,</span><br><span class="line">                                                &quot;chosen&quot;: <span class="literal">true</span></span><br><span class="line">                                              &#125;</span><br><span class="line">                                            ]</span><br><span class="line">                                          &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                      ]</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    &quot;cost&quot;: <span class="number">24.55</span>,</span><br><span class="line">                                    &quot;rows&quot;: <span class="number">5</span>,</span><br><span class="line">                                    &quot;chosen&quot;: <span class="literal">true</span></span><br><span class="line">                                  &#125;,</span><br><span class="line">                                  &#123;</span><br><span class="line">                                    &quot;strategy&quot;: &quot;MaterializeLookup&quot;,</span><br><span class="line">                                    &quot;cost&quot;: <span class="number">8.75</span>,</span><br><span class="line">                                    &quot;rows&quot;: <span class="number">5</span>,</span><br><span class="line">                                    &quot;duplicate_tables_left&quot;: <span class="literal">false</span>,</span><br><span class="line">                                    &quot;chosen&quot;: <span class="literal">true</span></span><br><span class="line">                                  &#125;,</span><br><span class="line">                                  &#123;</span><br><span class="line">                                    &quot;strategy&quot;: &quot;DuplicatesWeedout&quot;,</span><br><span class="line">                                    &quot;cost&quot;: <span class="number">28.55</span>,</span><br><span class="line">                                    &quot;rows&quot;: <span class="number">5</span>,</span><br><span class="line">                                    &quot;duplicate_tables_left&quot;: <span class="literal">false</span>,</span><br><span class="line">                                    &quot;chosen&quot;: <span class="literal">false</span></span><br><span class="line">                                  &#125;</span><br><span class="line">                                ]</span><br><span class="line">...</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;final_semijoin_strategy&quot;: &quot;MaterializeLookup&quot;</span><br><span class="line">              &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="3-2-10-creating-tmp-table"><a href="#3-2-10-creating-tmp-table" class="headerlink" title="3.2.10 creating_tmp_table"></a>3.2.10 creating_tmp_table</h3><p>derived table物化需要创建临时表，物化derived table时会执行Query_block::execute()，因此也会出现这个信息（本来应该在join_execute中的）。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">creating_tmp_table：&#123;</span><br><span class="line">  tmp_table_info：临时表信息</span><br><span class="line">    table：临时表的名称</span><br><span class="line">    columns：临时表的列数</span><br><span class="line">    row_length：临时表的单行长度</span><br><span class="line">    key_length：临时表索引长度</span><br><span class="line">    unique_constraint：是否有使用唯一约束</span><br><span class="line">    makes_grouped_rows：是否有GROUP BY</span><br><span class="line">    cannot_insert_duplicates：是否是distinct</span><br><span class="line">    location：表的类型，比如内存表memory (heap)，TempTable（TempTable），或者是转换到磁盘的物理表disk (InnoDB)</span><br><span class="line">    row_limit_estimate：该临时表中能存储的最大行数，如果是MEMORY表，会出现该记录</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> t1.a <span class="keyword">from</span> t1 <span class="keyword">where</span> <span class="keyword">exists</span>(</span><br><span class="line">          <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> t2 <span class="keyword">inner</span> <span class="keyword">join</span> t3 <span class="keyword">on</span> t3.a <span class="operator">=</span>t2.a</span><br><span class="line">                            <span class="keyword">inner</span> <span class="keyword">join</span> t4 <span class="keyword">on</span> t4.a <span class="operator">=</span> t3.a </span><br><span class="line">                              <span class="keyword">inner</span> <span class="keyword">join</span> t1 <span class="keyword">on</span> t1.a <span class="operator">=</span> t4.a</span><br><span class="line">          <span class="keyword">where</span> t1.a <span class="operator">=</span> t4.a <span class="keyword">and</span> t2.b<span class="operator">&gt;</span><span class="number">0</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;creating_tmp_table&quot;: &#123;</span><br><span class="line">              &quot;tmp_table_info&quot;: &#123;</span><br><span class="line">                &quot;table&quot;: &quot;&lt;subquery2&gt;&quot;,</span><br><span class="line">                &quot;columns&quot;: <span class="number">1</span>,</span><br><span class="line">                &quot;row_length&quot;: <span class="number">9</span>,</span><br><span class="line">                &quot;key_length&quot;: <span class="number">8</span>,</span><br><span class="line">                &quot;unique_constraint&quot;: <span class="literal">false</span>,</span><br><span class="line">                &quot;makes_grouped_rows&quot;: <span class="literal">false</span>,</span><br><span class="line">                &quot;cannot_insert_duplicates&quot;: <span class="literal">true</span>,</span><br><span class="line">                &quot;location&quot;: &quot;TempTable&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="3-2-11-attaching-conditions-to-tables"><a href="#3-2-11-attaching-conditions-to-tables" class="headerlink" title="3.2.11 attaching_conditions_to_tables"></a>3.2.11 attaching_conditions_to_tables</h3><p>attaching_conditions_to_tables对应sql&#x2F;sql_optimizer.cc的make_join_query_block函数。这一部分基于considered_execution_plans中选择的执行计划，改造原有where条件，并针对表增加适当的附加条件，以便于单表数据的筛选。</p><p>这部分条件的增加主要是为了便于ICP（索引条件下推），但ICP是否开启并不影响这部分内容的构造。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">attaching_conditions_to_tables: &#123;</span><br><span class="line">  original_condition: 原始的条件语句</span><br><span class="line">  attached_conditions_computation： 使用启发式算法计算已使用的索引，如果已使用的索引的访问类型是ref，则计算用range能否使用组合索引中更多的列，如果可以，则用range的方式替换ref</span><br><span class="line">  attached_conditions_summary: 附加之后的情况汇总</span><br><span class="line">      table: 表名</span><br><span class="line">      attached: 附加的条件或原语句中能直接下推给单表筛选的条件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> b <span class="keyword">from</span> t5 <span class="keyword">where</span> b <span class="operator">&gt;</span> <span class="number">3</span> <span class="keyword">and</span> b <span class="operator">&lt;</span> <span class="number">5</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;attaching_conditions_to_tables&quot;: &#123;</span><br><span class="line">              &quot;original_condition&quot;: &quot;((`t5`.`b` &gt; 3) and (`t5`.`b` &lt; 5))&quot;,</span><br><span class="line">              &quot;attached_conditions_computation&quot;: [</span><br><span class="line">              ],</span><br><span class="line">              &quot;attached_conditions_summary&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                  &quot;table&quot;: &quot;`t5`&quot;,</span><br><span class="line">                  &quot;attached&quot;: &quot;((`t5`.`b` &gt; 3) and (`t5`.`b` &lt; 5))&quot;</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="3-2-12-optimizing-distinct-group-by-order-by"><a href="#3-2-12-optimizing-distinct-group-by-order-by" class="headerlink" title="3.2.12 optimizing_distinct_group_by_order_by"></a>3.2.12 optimizing_distinct_group_by_order_by</h3><p>optimizing_distinct_group_by_order_by对应sql&#x2F;sql_optimizer.cc的JOIN::optimize_distinct_group_order函数，用于优化DISTINCT，GROUP BY、ORDER BY子句，例如将 distinct 转换为 group by，消除不必要的 trivial order by 等。</p><p>给出三个example，这一过程比较易读，不多解释：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># 消除不必要的<span class="keyword">distinct</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">distinct</span> a <span class="keyword">from</span> t5; # <span class="keyword">primary</span> key(a)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;optimizing_distinct_group_by_order_by&quot;: &#123;</span><br><span class="line">              &quot;distinct_is_on_unique&quot;: <span class="literal">true</span>,</span><br><span class="line">              &quot;removed_distinct&quot;: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># <span class="keyword">distinct</span>转为<span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">distinct</span> b <span class="keyword">from</span> t5;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;optimizing_distinct_group_by_order_by&quot;: &#123;</span><br><span class="line">              &quot;changed_distinct_to_group_by&quot;: <span class="literal">true</span>,</span><br><span class="line">              &quot;simplifying_group_by&quot;: &#123;</span><br><span class="line">                &quot;original_clause&quot;: &quot;`t5`.`b`&quot;,</span><br><span class="line">                &quot;items&quot;: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    &quot;item&quot;: &quot;`t5`.`b`&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">                ],</span><br><span class="line">                &quot;resulting_clause_is_simple&quot;: <span class="literal">true</span>,</span><br><span class="line">                &quot;resulting_clause&quot;: &quot;`t5`.`b`&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># 简化<span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> b <span class="keyword">from</span> t5 <span class="keyword">where</span> b <span class="operator">&gt;</span> <span class="number">3</span> <span class="keyword">and</span> b <span class="operator">&lt;</span> <span class="number">5</span> <span class="keyword">order</span> <span class="keyword">by</span> d;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;optimizing_distinct_group_by_order_by&quot;: &#123;</span><br><span class="line">              &quot;simplifying_order_by&quot;: &#123;</span><br><span class="line">                &quot;original_clause&quot;: &quot;`t5`.`d`&quot;,</span><br><span class="line">                &quot;items&quot;: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    &quot;item&quot;: &quot;`t5`.`d`&quot;</span><br><span class="line">                  &#125;</span><br><span class="line">                ],</span><br><span class="line">                &quot;resulting_clause_is_simple&quot;: <span class="literal">true</span>,</span><br><span class="line">                &quot;resulting_clause&quot;: &quot;`t5`.`d`&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="3-2-13-reconsidering-access-paths-for-index-ordering"><a href="#3-2-13-reconsidering-access-paths-for-index-ordering" class="headerlink" title="3.2.13 reconsidering_access_paths_for_index_ordering"></a>3.2.13 reconsidering_access_paths_for_index_ordering</h3><p>reconsidering_access_paths_for_index_ordering对应sql&#x2F;sql_optimizer.cc中的函数test_if_skip_sort_order，表示最终对排序再进行一次索引选择优化。<br>如果使用了order by asc这种排序写法，优化器认为排序是个昂贵的操作，所以为了避免排序，如果order by引用的列上有索引，它认为limit n的n很小的话，基于这个索引做index scan也能很快执行完，就会选择index scan。</p><p>实际上，这个优化是有bug的：</p><p><a href="https://bugs.mysql.com/bug.php?id=100257">Optimizer chooses wrong index for ORDER BY LIMIT</a></p><p><a href="https://zhuanlan.zhihu.com/p/413950988">这个 MySQL bug 99% 的人会踩坑!</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> c,a <span class="keyword">from</span> t5 <span class="keyword">where</span> c <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">and</span> c <span class="operator">&lt;</span> <span class="number">5</span> <span class="keyword">order</span> <span class="keyword">by</span> a; # primary_key(a), index(c,b)</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;reconsidering_access_paths_for_index_ordering&quot;: &#123;</span><br><span class="line">              &quot;clause&quot;: &quot;ORDER BY&quot;,</span><br><span class="line">              &quot;steps&quot;: [</span><br><span class="line">              ],</span><br><span class="line">              &quot;index_order_summary&quot;: &#123;</span><br><span class="line">                &quot;table&quot;: &quot;`t5`&quot;,</span><br><span class="line">                &quot;index_provides_order&quot;: <span class="literal">true</span>,</span><br><span class="line">                &quot;order_direction&quot;: &quot;asc&quot;,</span><br><span class="line">                &quot;index&quot;: &quot;PRIMARY&quot;,</span><br><span class="line">                &quot;plan_changed&quot;: <span class="literal">true</span>,</span><br><span class="line">                &quot;access_type&quot;: &quot;index&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="3-2-14-finalizing-table-conditions"><a href="#3-2-14-finalizing-table-conditions" class="headerlink" title="3.2.14 finalizing_table_conditions"></a>3.2.14 finalizing_table_conditions</h3><p>finalizing_table_conditions对应sql&#x2F;sql_optimizer.cc的函数JOIN::finalize_table_conditions，负责进行最后一轮的 condition 优化，这一步主要是去除冗余的 filter，将缓存表达式中的常量，避免每一行数据都重新计算等，得到最终的、经过优化后的表条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> t1.a <span class="keyword">from</span> t1 <span class="keyword">where</span> <span class="keyword">exists</span>(</span><br><span class="line">          <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> t2 <span class="keyword">inner</span> <span class="keyword">join</span> t3 <span class="keyword">on</span> t3.a <span class="operator">=</span>t2.a</span><br><span class="line">                            <span class="keyword">inner</span> <span class="keyword">join</span> t4 <span class="keyword">on</span> t4.a <span class="operator">=</span> t3.a </span><br><span class="line">                              <span class="keyword">inner</span> <span class="keyword">join</span> t1 <span class="keyword">on</span> t1.a <span class="operator">=</span> t4.a</span><br><span class="line">          <span class="keyword">where</span> t1.a <span class="operator">=</span> t4.a <span class="keyword">and</span> t2.b<span class="operator">&gt;</span><span class="number">0</span>);</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;finalizing_table_conditions&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;table&quot;: &quot;`t2`&quot;,</span><br><span class="line">                &quot;original_table_condition&quot;: &quot;((`t2`.`a` = `t3`.`a`) and (`t2`.`b` &gt; 0))&quot;,</span><br><span class="line">                &quot;final_table_condition   &quot;: &quot;(`t2`.`b` &gt; 0)&quot;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;table&quot;: &quot;`t4`&quot;,</span><br><span class="line">                &quot;original_table_condition&quot;: &quot;(`t4`.`a` = `t3`.`a`)&quot;,</span><br><span class="line">                &quot;final_table_condition   &quot;: <span class="keyword">null</span></span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;table&quot;: &quot;`t1`&quot;,</span><br><span class="line">                &quot;original_table_condition&quot;: &quot;(`t1`.`a` = `t3`.`a`)&quot;,</span><br><span class="line">                &quot;final_table_condition   &quot;: <span class="keyword">null</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="3-2-15-refine-plan"><a href="#3-2-15-refine-plan" class="headerlink" title="3.2.15 refine_plan"></a>3.2.15 refine_plan</h3><p>refine_plan对应sql&#x2F;sql_select.cc的函数make_join_readinfo，负责改善执行计划，做执行前的 plan 调整，比如分配 join buffer、index条件下推等。</p><p>如果只展示了对应的表对象没有其他的字段的话，说明在之前已经确定的执行计划中没有需要再优化的地方，可直接应用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">table</span>: &#123; 涉及的表名及其别名</span><br><span class="line">  pushed_index_condition: 可使用到ICP的条件句</span><br><span class="line">  table_condition_attached: 在attaching_conditions_to_tables阶段添加了附加条件的条件语句</span><br><span class="line">  access_type: 优化后的索引访问类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-16-considering-tmp-tables"><a href="#3-2-16-considering-tmp-tables" class="headerlink" title="3.2.16 considering_tmp_tables"></a>3.2.16 considering_tmp_tables</h3><p>considering_tmp_tables对应sql&#x2F;sql_select.cc的函数JOIN::make_tmp_tables_info，这是 MySQL 查询优化的最后一步，为执行计划中各个 SQL 算子按需分配 tmp table。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> a, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> t1_count <span class="keyword">from</span> t1 <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2 <span class="keyword">where</span> a<span class="operator">=</span>b <span class="keyword">and</span> a <span class="operator">&lt;</span> c) <span class="keyword">group</span> <span class="keyword">by</span> a <span class="keyword">order</span> <span class="keyword">by</span> a;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;considering_tmp_tables&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;adding_tmp_table_in_plan_at_position&quot;: <span class="number">2</span>,</span><br><span class="line">                &quot;write_method&quot;: &quot;continuously_update_group_row&quot;</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;adding_sort_to_table&quot;: &quot;&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="3-3-join-execution"><a href="#3-3-join-execution" class="headerlink" title="3.3 join_execution"></a>3.3 join_execution</h2><p>join_execution段落展示了执行阶段的执行过程，trace有三大部分构成，其中join_preparation、join_optimization可以分析explain的过程，但是在join_execution阶段，如果分析的语句是explain的话，该阶段的代码是空结构体，只有在真正执行语句之后，该阶段的代码才会有具体的步骤过程。</p><p>join_execution主要分为两部分：</p><ul><li>临时表信息</li><li>排序信息</li></ul><h3 id="3-3-1-临时表信息"><a href="#3-3-1-临时表信息" class="headerlink" title="3.3.1 临时表信息"></a>3.3.1 临时表信息</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">creating_tmp_table：&#123;</span><br><span class="line">  tmp_table_info：临时表信息</span><br><span class="line">    table：临时表的名称</span><br><span class="line">    columns：临时表的列数</span><br><span class="line">    row_length：临时表的单行长度</span><br><span class="line">    key_length：临时表索引长度</span><br><span class="line">    unique_constraint：是否有使用唯一约束</span><br><span class="line">    makes_grouped_rows：是否有GROUP BY</span><br><span class="line">    cannot_insert_duplicates：是否是distinct</span><br><span class="line">    location：表的类型，比如内存表memory (heap)，TempTable（TempTable），或者是转换到磁盘的物理表disk (InnoDB)</span><br><span class="line">    row_limit_estimate：该临时表中能存储的最大行数，如果是MEMORY表，会出现该记录</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果临时表的大小超过了设置的max_heap_table_size或者是tmp_table_size参数的话，会在此步骤后引发多一个步骤：converting_tmp_table_to_ondisk（将临时表落地到磁盘中），这里没有展示。</p><p>example：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> optimizer_switch<span class="operator">=</span><span class="string">&#x27;derived_merge=off&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> a <span class="keyword">from</span> t1) tt;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;creating_tmp_table&quot;: &#123;</span><br><span class="line">              &quot;tmp_table_info&quot;: &#123;</span><br><span class="line">                &quot;table&quot;: &quot;tt&quot;,</span><br><span class="line">                &quot;in_plan_at_position&quot;: <span class="number">0</span>,</span><br><span class="line">                &quot;columns&quot;: <span class="number">1</span>,</span><br><span class="line">                &quot;row_length&quot;: <span class="number">5</span>,</span><br><span class="line">                &quot;key_length&quot;: <span class="number">0</span>,</span><br><span class="line">                &quot;unique_constraint&quot;: <span class="literal">false</span>,</span><br><span class="line">                &quot;makes_grouped_rows&quot;: <span class="literal">false</span>,</span><br><span class="line">                &quot;cannot_insert_duplicates&quot;: <span class="literal">false</span>,</span><br><span class="line">                &quot;location&quot;: &quot;TempTable&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            &quot;materialize&quot;: &#123;</span><br><span class="line">              &quot;select#&quot;: <span class="number">2</span>,</span><br><span class="line">              &quot;steps&quot;: [</span><br><span class="line">              ]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="3-3-2-排序信息"><a href="#3-3-2-排序信息" class="headerlink" title="3.3.2 排序信息"></a>3.3.2 排序信息</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filesort_information：排序的基本信息 </span><br><span class="line">filesort_priority_queue_optimization 是否用到优先级队列堆排序的优化，通常LIMIT会用到该优化 </span><br><span class="line">filesort_execution 文件排序执行 </span><br><span class="line">filesort_summary 排序用到的内存情况和大小 </span><br></pre></td></tr></table></figure><p>example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> b <span class="keyword">from</span> t1 <span class="keyword">order</span> <span class="keyword">by</span> b <span class="keyword">desc</span> limit <span class="number">3</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.optimizer_trace\G</span><br><span class="line">...</span><br><span class="line">            &quot;sorting_table&quot;: &quot;t1&quot;,</span><br><span class="line">            &quot;filesort_information&quot;: [</span><br><span class="line">              &#123;</span><br><span class="line">                &quot;direction&quot;: &quot;desc&quot;,</span><br><span class="line">                &quot;expression&quot;: &quot;`t1`.`b`&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;filesort_priority_queue_optimization&quot;: &#123;</span><br><span class="line">              &quot;limit&quot;: <span class="number">3</span>,</span><br><span class="line">              &quot;chosen&quot;: <span class="literal">false</span>,</span><br><span class="line">              &quot;cause&quot;: &quot;sort_is_cheaper&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;filesort_execution&quot;: [</span><br><span class="line">            ],</span><br><span class="line">            &quot;filesort_summary&quot;: &#123;</span><br><span class="line">              &quot;memory_available&quot;: <span class="number">2097152</span>,</span><br><span class="line">              &quot;key_size&quot;: <span class="number">9</span>,</span><br><span class="line">              &quot;row_size&quot;: <span class="number">18</span>,</span><br><span class="line">              &quot;max_rows_per_buffer&quot;: <span class="number">15</span>,</span><br><span class="line">              &quot;num_rows_estimate&quot;: <span class="number">15</span>,</span><br><span class="line">              &quot;num_rows_found&quot;: <span class="number">5</span>,</span><br><span class="line">              &quot;num_initial_chunks_spilled_to_disk&quot;: <span class="number">0</span>,</span><br><span class="line">              &quot;peak_memory_used&quot;: <span class="number">32832</span>,</span><br><span class="line">              &quot;sort_algorithm&quot;: &quot;std::sort&quot;,</span><br><span class="line">              &quot;unpacked_addon_fields&quot;: &quot;skip_heuristic&quot;,</span><br><span class="line">              &quot;sort_mode&quot;: &quot;&lt;fixed_sort_key, additional_fields&gt;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="4-参考文档"><a href="#4-参考文档" class="headerlink" title="4 参考文档"></a>4 参考文档</h1><p>[1] <a href="https://zhuanlan.zhihu.com/p/475410214">庖丁解牛-图解查询分析和调优利器Optimizer Trace</a></p><p>[2] <a href="http://mysql.taobao.org/monthly/2023/07/02/">MySQL·源码分析·索引选择</a></p><p>[3] <a href="https://blog.csdn.net/eddielee9217/article/details/116748751">MySQL OPTIMIZER TRACE 详解</a></p><p>[4] <a href="https://cloud.tencent.com/developer/article/2311852">cost量化分析</a></p><p>[5] <a href="https://zhuanlan.zhihu.com/p/640558012">「MySQL 8.0」 通过 Optimizer Trace 概览查询优化</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 功能介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL捉虫：glibc导致mysqld_safe无法启动</title>
      <link href="/2023/11/13/MySQL%E6%8D%89%E8%99%AB%EF%BC%9Aglibc%E5%AF%BC%E8%87%B4mysqld-safe%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/"/>
      <url>/2023/11/13/MySQL%E6%8D%89%E8%99%AB%EF%BC%9Aglibc%E5%AF%BC%E8%87%B4mysqld-safe%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-现象"><a href="#1-现象" class="headerlink" title="1 现象"></a>1 现象</h2><p>glibc本身携带的内存管理库ptmalloc内存管理上存在各种各样的问题，导致MySQL这种长时间运行的实例经常出现OOM的现象，具体原因可以参考这一篇文章：<a href="https://wenfh2020.com/2021/04/08/glibc-memory-leak/">剖析 stl + glibc “内存泄漏” 原因</a>。所以在工业界大家普遍使用jemalloc或者tcmalloc。</p><p>但是使用在配置文件中加入<code>malloc-lib</code>参数，指定使用jemalloc后，出现了实例无法启动的情况：</p><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2023-10-24T07:40:36.995687Z mysqld_safe mysqld from pid file /home/work/mysql-5.7.38//var/mysql.pid ended</span><br><span class="line">2023-10-24T07:43:14.917924Z mysqld_safe Logging to &#x27;/home/work/mysql-5.7.38//log/mysql.err&#x27;.</span><br><span class="line">2023-10-24T07:43:14.937321Z mysqld_safe Starting mysqld daemon with databases from /home/work/mysql-5.7.38//var</span><br><span class="line">nohup: relocation error: /opt/compiler/gcc-8.2/lib/libpthread.so.0: symbol __libc_vfork, version GLIBC_PRIVATE not defined in file libc.so.6 with link time reference</span><br><span class="line">2023-10-24T07:43:14.943059Z mysqld_safe mysqld from pid file /home/work/mysql-5.7.38//var/mysql.pid ended</span><br></pre></td></tr></table></figure><h2 id="2-原因分析及问题定位"><a href="#2-原因分析及问题定位" class="headerlink" title="2 原因分析及问题定位"></a>2 原因分析及问题定位</h2><p>线上的机器环境中有两套工具链，一是系统路径下的（<code>/usr/bin</code>, <code>/usr/lib/</code>），glibc版本为2.17；二是后来人工部署并使用的opt路径下的（<code>/opt/compiler/gcc-8.2</code>），glibc版本为2.29。</p><p>（不得不承认我们的环境确实非常混乱，我也不知道为什么不用docker。）</p><p>线上所使用的实例是由opt目录下的gcc编译出来的，而nohup是系统路径下的二进制工具。</p><p>根据报错信息，报错原因是<code>libpthread.so</code>所需要的一个外部符号<code>__libc_vfork</code>并没有在装载的<code>libc.so</code>里找到：</p><p><img src="https://pic.imgdb.cn/item/662378a00ea9cb140390ca8c.png" alt="vfork"></p><p>增加<code>malloc-lib</code>参数后，实际上mysqld_safe是将其处理为一个<code>LD_PRELOAD</code>参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cmd=&quot;`mysqld_ld_preload_text`$NOHUP_NICENESS&quot;</span><br><span class="line"></span><br><span class="line">for i in  &quot;$ledir/$MYSQLD&quot; &quot;$defaults&quot; &quot;--basedir=$MY_BASEDIR_VERSION&quot; \</span><br><span class="line">  &quot;--datadir=$DATADIR&quot; &quot;--plugin-dir=$plugin_dir&quot; &quot;$USER_OPTION&quot;</span><br><span class="line">do</span><br><span class="line">  cmd=&quot;$cmd &quot;`shell_quote_string &quot;$i&quot;`</span><br><span class="line">done</span><br><span class="line">cmd=&quot;$cmd $args&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Avoid <span class="string">&#x27;nohup: ignoring input&#x27;</span> warning</span></span><br><span class="line">test -n &quot;$NOHUP_NICENESS&quot; &amp;&amp; cmd=&quot;$cmd &lt; /dev/null&quot;</span><br></pre></td></tr></table></figure><p>在mysqld_safe的输出信息中也可以得到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld_safe Adding &#x27;/home/work/mysql-5.7.38//lib/jemalloc/lib/libjemalloc.so&#x27; to LD_PRELOAD for mysqld</span><br></pre></td></tr></table></figure><p>在启动mysqld时，会在开头添加一段<code>LD_PRELOAD</code>先将jemalloc的相关库装载进去。</p><p>strace可以捕获和记录进程的所有系统调用，以及这个进程接收的所有信号。</p><p>使用strace分析在系统nohup下，增加对jemalloc库的<code>LD_PRELOAD</code>后启动mysqld的文件打开结果如下。所有文件都有一个寻找的路径，为了方便阅读，我省略了一些可执行文件依次寻找的过程中未找到的一些记录。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">$ strace -f -e trace=file -o strace_jemalloc.txt <span class="built_in">env</span> LD_PRELOAD=/home/work/mysql-5.7.38//lib/jemalloc/lib/libjemalloc.so <span class="built_in">nohup</span> ./mysql-5.7.38/libexec/mysqld --version</span></span><br><span class="line"></span><br><span class="line">19446 execve(&quot;/usr/bin/env&quot;, [&quot;env&quot;, &quot;LD_PRELOAD=/home/work/mys&quot;..., &quot;nohup&quot;, &quot;./mysql-5.7.38/libexec/mysqld&quot;, &quot;--version&quot;], [/* 42 vars */]) = 0</span><br><span class="line">19446 faccessat(AT_FDCWD, &quot;/etc/ld.so.preload&quot;, R_OK) = -1 ENOENT (No such file or directory)</span><br><span class="line">19446 openat(AT_FDCWD, &quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">19446 openat(AT_FDCWD, &quot;/lib64/libc.so.6&quot;, O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">19446 openat(AT_FDCWD, &quot;/usr/lib/locale/locale-archive&quot;, O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">省略了在PATH下寻找<span class="built_in">nohup</span>的一些过程 <span class="comment">#</span></span></span><br><span class="line">19446 execve(&quot;/usr/bin/nohup&quot;, [&quot;nohup&quot;, &quot;./mysql-5.7.38/libexec/mysqld&quot;, &quot;--version&quot;], [/* 43 vars */]) = 0</span><br><span class="line">19446 openat(AT_FDCWD, &quot;/home/work/mysql-5.7.38//lib/jemalloc/lib/libjemalloc.so&quot;, O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">19446 faccessat(AT_FDCWD, &quot;/etc/ld.so.preload&quot;, R_OK) = -1 ENOENT (No such file or directory)</span><br><span class="line">19446 openat(AT_FDCWD, &quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">19446 openat(AT_FDCWD, &quot;/lib64/libc.so.6&quot;, O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">19446 openat(AT_FDCWD, &quot;/opt/compiler/gcc-8.2/lib/tls/aarch64/libm.so.6&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)</span><br><span class="line">19446 newfstatat(AT_FDCWD, &quot;/opt/compiler/gcc-8.2/lib/tls/aarch64&quot;, 0xffffeb03c0e0, 0) = -1 ENOENT (No such file or directory)</span><br><span class="line">19446 openat(AT_FDCWD, &quot;/opt/compiler/gcc-8.2/lib/tls/libm.so.6&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)</span><br><span class="line">19446 newfstatat(AT_FDCWD, &quot;/opt/compiler/gcc-8.2/lib/tls&quot;, 0xffffeb03c0e0, 0) = -1 ENOENT (No such file or directory)</span><br><span class="line">19446 openat(AT_FDCWD, &quot;/opt/compiler/gcc-8.2/lib/aarch64/libm.so.6&quot;, O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)</span><br><span class="line">19446 newfstatat(AT_FDCWD, &quot;/opt/compiler/gcc-8.2/lib/aarch64&quot;, 0xffffeb03c0e0, 0) = -1 ENOENT (No such file or directory)</span><br><span class="line">19446 openat(AT_FDCWD, &quot;/opt/compiler/gcc-8.2/lib/libm.so.6&quot;, O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">19446 openat(AT_FDCWD, &quot;/opt/compiler/gcc-8.2/lib/libstdc++.so.6&quot;, O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">19446 openat(AT_FDCWD, &quot;/opt/compiler/gcc-8.2/lib/libdl.so.2&quot;, O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">19446 openat(AT_FDCWD, &quot;/opt/compiler/gcc-8.2/lib/libgcc_s.so.1&quot;, O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">19446 openat(AT_FDCWD, &quot;/opt/compiler/gcc-8.2/lib/libpthread.so.0&quot;, O_RDONLY|O_CLOEXEC) = 3</span><br><span class="line">19446 +++ exited with 127 +++</span><br></pre></td></tr></table></figure><p>借助strace多次进行分析，确认使用<code>LD_PRELOAD</code>后，库的链接顺序为：</p><ol><li><code>LD_PRELOAD</code>指定的库</li><li>之后接的可执行文件依赖的库</li><li><code>LD_PRELOAD</code>指定库依赖的库</li></ol><p>也就是说，jemalloc依赖的库的链接路径和其后接的可执行文件依赖的库的路径高度相关。</p><p>在本次遇到的现象中，nohup为系统库，用到了系统路径下的<code>libc.so</code>，因此在链接完<code>libjemalloc.so</code>后，将nohup依赖的库（最关键的就是<code>/lib64/libc.so.6</code>）链接进来。之后再装载libjemalloc.so所依赖的库时，它所依赖的<code>/opt/compiler/gcc-8.2/lib/libpthread.so</code>的符号<code>__libc_vfork</code>无法在系统路径下的<code>/lib64/libc.so.6</code>找到，从而触发异常，导致实例无法启动。</p><p>因此，如果用我们部署的gcc-8.2工具链编译出来的nohup，就会装载<code>/opt/compiler/gcc-8.2/lib/libc.so</code>，而非系统路径下的<code>libc.so</code>文件，也就不会导致<code>libjemalloc.so</code>（实际上是其依赖的<code>/opt/compiler/gcc-8.2/lib/libpthread.so</code>）出现符号未定义的问题。</p><h2 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3 解决方案"></a>3 解决方案</h2><p>使用gcc-8.2编译的nohup替换系统路径下的nohup。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Bugs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocksDB入门</title>
      <link href="/2023/07/30/RocksDB%E5%85%A5%E9%97%A8/"/>
      <url>/2023/07/30/RocksDB%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="/slices/MyRocks-intro.pptx" download="MyRocks-intro.pptx">下载PPT</a></p><div class="pdfobject-container" data-target="/pdf/MyRocks-intro.pdf" data-height="500px"></div>]]></content>
      
      
      <categories>
          
          <category> RocksDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 功能介绍 </tag>
            
            <tag> RocksDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL源码分析：主从同步</title>
      <link href="/2023/03/20/MySQL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%9A%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/"/>
      <url>/2023/03/20/MySQL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%9A%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="1-主从同步建立逻辑"><a href="#1-主从同步建立逻辑" class="headerlink" title="1 主从同步建立逻辑"></a>1 主从同步建立逻辑</h1><span id="more"></span><p><img src="https://pic.imgdb.cn/item/662379ff0ea9cb140393d55f.jpg" alt="replication"></p><h1 id="2-master"><a href="#2-master" class="headerlink" title="2 master"></a>2 master</h1><h2 id="2-1-binlog-dump过程"><a href="#2-1-binlog-dump过程" class="headerlink" title="2.1 binlog dump过程"></a>2.1 binlog dump过程</h2><p><img src="https://pic.imgdb.cn/item/66237a300ea9cb1403943141.png" alt="binlog_dump"></p><h2 id="2-2-源码分析"><a href="#2-2-源码分析" class="headerlink" title="2.2 源码分析"></a>2.2 源码分析</h2><p>注：以下基于异步复制</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">sql_parse.cc: dispatch_command</span><br><span class="line">  |- sql_parse.cc: register_slave                      // 将slave传来的用户信息注册到master上，包活host，uesr和password</span><br><span class="line">  |- sql_parse.cc: com_binlog_dump_gtid                // 从库执行request_dump，向主库发生命令</span><br><span class="line">  |  |                                                 // 在本case中，选择开启GTID与master_auto_position进行分析</span><br><span class="line">  |  |                                                 // 不开master_auto_position的话会调用com_binlog_dump函数</span><br><span class="line">  |  |                 // 读取pos、flags和server-id</span><br><span class="line">  |  |- rpl_master.cc: kill_zombie_dump_threads        // 检查该从库之前是否有对应的master dump线程没有关闭，如果有则将其关闭</span><br><span class="line">  |  |                                                 // master dump线程发完binlog事件后会进入等待状态，如果此时slave停止，然后重新连接到master，那么主库上会有2个dump线程</span><br><span class="line">  |  |                                                 // 一个是之前建立的处于等待binlog更新的dump线程，另一个是新建立连接的dump线程，此时之前建立的dump线程需要关闭</span><br><span class="line">  |  |                 // 有一个叫gtid_string的参数，是slave执行到的最后一个的GTID值，但就打了个log就free掉了，看起来没什么用的样子</span><br><span class="line">  |  |- rpl_master.cc: mysql_binlog_send               // 如果未开启auto position，会指定文件名和位置</span><br><span class="line">  |  |  |                                              // 开启的话name是空的, pos是4，4是binlog文件开头magic number的大小</span><br><span class="line">  |  |  |- rpl_master.cc: sender.run()</span><br><span class="line">  |  |  |  |                        // 设置开始发送的binlog文件名和文件位置，文件名是当前slave读到的master binlog的文件，位置是4，如果之前reset过的话会设置为binlog的最后一个文件，然后逐步开始往前慢慢找</span><br><span class="line">  |  |  |  |- rpl_binlog_sender.cc: init               // 初始化上下文，检查dump请求是否合法，检查binlog的状态是否正常，会根据slave传来的dump命令更新m_exclude_gtid</span><br><span class="line">  |  |  |  |  |- rpl_binlog_sender.cc: init_heartbeat_period        // 启动心跳</span><br><span class="line">  |  |  |  |  |                        // 给packet分配空间</span><br><span class="line">  |  |  |  |  |                        // 检查是否开启GTID</span><br><span class="line">  |  |  |  |  |                        // 一系列检查和初始化</span><br><span class="line">  |  |  |  |  |- rpl_binlog_sender.cc: check_start_file             // 进行从库GTID值是否可行的判断，确保从库的gtid_executed必须是主库的子集</span><br><span class="line">  |  |  |  |  |                                                     // 取出从库关于主库server_uuid的 GTID是小于等于 主库的GTID 如果不是则报错</span><br><span class="line">  |  |  |  |  |                                                     // 判断主库的主库的GTID_PURGED是否是从库GTID的子集 不是则报错, 简单的说就是主库已经清理了从库拉取需要的GTID</span><br><span class="line">  |  |  |  |  |                                                     // 还存在一种特殊情况比如主库手动删除了binary, 这就涉及到实际的binlog扫描, </span><br><span class="line">  |  |  |  |  |- rpl_binlog_sender.cc: RUN_HOOK(Binlog_transmit_delegate::transmit_start)    // 这里返回的是0，不会调用函数</span><br><span class="line">  |  |  |  |  |                                                                              // 如果开启了半同步复制会调用binlog_transmit_delegate -&gt; transmit_start，然后调入repl_semi_binlog_dump_start，在启动的时候判断主从是否是半同步，如果是需要加入到ack receiver进行管理和更改统计值Rpl_semi_sync_master_clients</span><br><span class="line">  |  |  |  |  // 开启循环1</span><br><span class="line">  |  |  |  |- rpl_binlog_sender.cc: fake_rotate_event     // 解决之前没有rotate event发送的场景，log_file是现在slave读到的master binlog的文件名，start_pos是4</span><br><span class="line">  |  |  |  |- rpl_binlog_sender.cc: open_binlog_file      // log_file是现在slave读到的master binlog的文件名</span><br><span class="line">  |  |  |  |  |- mysql_file.h: mysql_file_open            // 以只读的形式打开对应的binlog文件</span><br><span class="line">  |  |  |  |  |- mf_iocache.c: init_io_cache_ext          // 初始化IO CACHE中的各种变量，分配内存</span><br><span class="line">  |  |  |  |- rpl_binlog_sender.cc: send_binlog        // 发送二进制日志</span><br><span class="line">  |  |  |  |  |- rpl_binlog_sender.cc: send_format_description_event // 每次打开binlog文件时正式发送的第一个event</span><br><span class="line">  |  |  |  |  | // 设置开始位置</span><br><span class="line">  |  |  |  |  | // 开启循环2</span><br><span class="line">  |  |  |  |  |- rpl_binlog_sender.cc: get_binlog_end_pos           // 不断的等新的log_cache(IO CACHE)，确定结束位置end_pos</span><br><span class="line">  |  |  |  |  |  |                        // do-while循环</span><br><span class="line">  |  |  |  |  |  |- rpl_binlog_sender.cc: mysql_bin_log.is_active   // 判断当前的binlog文件是否在被持续写入</span><br><span class="line">  |  |  |  |  |  |                        // 如果没有，比较当前dump线程的读取位置和binlog文件的结束位置，如果相等返回0，如果不等返回文件结束位置</span><br><span class="line">  |  |  |  |  |  |                        // 如果有，说明现在master还在持续产生binlog，判断当前dump线程的读取位置和binlog文件结束位置，如果不等就返回结束位置</span><br><span class="line">  |  |  |  |  |  |                        // 如果相等，说明数据可能还在net buffer里，刷新一下然后继续等</span><br><span class="line">  |  |  |  |  |- rpl_binlog_sender.cc: send_events                  // 发送log_cache</span><br><span class="line">  |  |  |  |  |  |- rpl_binlog_sender.cc: read_event                // 读取event主函数</span><br><span class="line">  |  |  |  |  |  |  |- rpl_binlog_sender.cc: peek_event_length      // 读取event长度</span><br><span class="line">  |  |  |  |  |  |  |- rpl_binlog_sender.cc: reset_transmit_packet  // 为event发送重置线程的传输包缓冲大小</span><br><span class="line">  |  |  |  |  |  |  |- rpl_binlog_sender.cc: read_log_event         // 读取event，写入packet包内存</span><br><span class="line">  |  |  |  |  |  |  |- rpl_binlog_sender.cc: set_last_pos           // 设置下一次读取位置</span><br><span class="line">  |  |  |  |  |  |- rpl_binlog_sender.cc: check_event_type          // 检查事件类型</span><br><span class="line">  |  |  |  |  |  |                                                  // 如果是auto_position=ON不能有匿名event的存在 如果有则报错</span><br><span class="line">  |  |  |  |  |  |                                                  // 如果是GTID_MODE=ON不能有匿名event 存在 否则报错</span><br><span class="line">  |  |  |  |  |  |                                                  // 如果是GITD_MODE=OFF不能有GTID的event存在</span><br><span class="line">  |  |  |  |  |  |  // ####发送前####</span><br><span class="line">  |  |  |  |  |  |- rpl_binlog_sender.cc: before_send_hook          // 设置包头的sync位，告知slave是否等待event回复</span><br><span class="line">  |  |  |  |  |  |- rpl_binlog_sender.cc: skip_event                // mysql维护了一个gtid set，所有在这个集合里的事件都不能发送给slave</span><br><span class="line">  |  |  |  |  |  |                                                  // 如果skip：可能由于跳过的event很多，造成在心跳周期内没有event发送给从库，导致从库认为主库宕机</span><br><span class="line">  |  |  |  |  |  |                                                  //          为避免这种情况，在跳过event过程中，也会进行周期时间检查，定期发送心跳事件</span><br><span class="line">  |  |  |  |  |  |- rpl_binlog_sender.cc: send_heartbeat_event      // 发送心跳包事件</span><br><span class="line">  |  |  |  |  |  |- rpl_binlog_sender.cc: send_packet               // 向slave发送包</span><br><span class="line">  |  |  |  |  |  |- rpl_binlog_sender.cc: after_send_hook           // 如果事件可以跳过，假装收到slave的回复，直接上报当前读取的binlog位置</span><br><span class="line">  |  |  |  |  |  |                                                  // 否则， 读取slave的回复，以便了解进度，并上报slave回复的位置</span><br><span class="line">  |  |  |  |  |  |  |- rpl_binlog_sender.cc: RUN_HOOK               // binlog_transmit-&gt;after_send_event，如果开了半同步复制会调用repl_semi_after_send_event</span><br><span class="line">  |  |  |  |  | // 关闭循环2</span><br><span class="line">  |  |  |  |- rpl_binlog_sender.cc: set_last_file                   // 当前这个binlog文件读完了，设置下一个要读的文件</span><br><span class="line">  |  |  |  |- rpl_binlog_sender.cc: find_next_log</span><br><span class="line">  |  |  |  |- rpl_binlog_sender.cc: end_io_cache</span><br><span class="line">  |  |  |  |- rpl_binlog_sender.cc: mysql_file_close</span><br><span class="line">  |  |  |  | // 关闭循环1</span><br><span class="line">  |  |- rpl_master.cc: unregister_slave                // 每次发送完会解除注册</span><br></pre></td></tr></table></figure><h1 id="3-slave"><a href="#3-slave" class="headerlink" title="3 slave"></a>3 slave</h1><h2 id="3-1-源码分析"><a href="#3-1-源码分析" class="headerlink" title="3.1 源码分析"></a>3.1 源码分析</h2><p>注：以下基于半同步复制</p><h3 id="3-1-1-io线程"><a href="#3-1-1-io线程" class="headerlink" title="3.1.1 io线程"></a>3.1.1 io线程</h3><p>当START SLAVE语句在从库开始执行之后，从库创建一个IO线程，该线程连接到主库并请求主库发送binlog到从库上。IO线程读取主库传过来的binlog并写入本地的relay log中。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">sql_parse.cc: mysql_execute_command</span><br><span class="line">  |- rpl_slave.cc: start_slave_cmd</span><br><span class="line">  |  |  // 会判断lex-&gt;mi.for_channel，然后执行不同的分支</span><br><span class="line">  |  |- rpl_slave.cc: start_slave // lex-&gt;mi.for_channel == false进入这个函数，否则进下一个</span><br><span class="line">  |  |  |  // 会判断有几个实例，一个的话就只执行一次start_slave，如果好几个的话就依次start_slave（调用的就是下面那个函数）</span><br><span class="line">  |  |- rpl_slave.cc: start_slave</span><br><span class="line">  |  |  |- rpl_slave.cc: check_access                // 权限检查</span><br><span class="line">  |  |  |- rpl_slave.cc: mi-&gt;channel_wrlock()</span><br><span class="line">  |  |  |- rpl_slave.cc: lock_slave_threads(mi)     // 停止运行线程</span><br><span class="line">  |  |  |- rpl_slave.cc: init_thread_mask           // 获取停止运行的线程的掩码</span><br><span class="line">  |  |  | // mi中设定用户、密码和授权插件（mi：Master_info）</span><br><span class="line">  |  |  | // 对mi进行了各种初始化设置</span><br><span class="line">  |  |  |- rpl_slave.cc: start_slave_threads         // 先创建I/O线程，无误再创建SQL线程</span><br><span class="line">  |  |  |  |- rpl_slave.cc: start_slave_thread</span><br><span class="line">  |  |  |  |  |- rpl_slave.cc: mysql_mutex_lock(start_lock);            // 给io线程加锁</span><br><span class="line">  |  |  |  |  |- rpl_slave.cc: mysql_thread_create    // 创建I/O线程</span><br><span class="line">  |  |  |  |  |  |- rpl_slave.cc: handle_slave_io      // IO线程处理函数，建立主从，负责将master数据写入slave</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: my_thread_init</span><br><span class="line">  |  |  |  |  |  |  |    // 创建一个THD的对象，一个THD的对象就相当于一个连接</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: init_slave_thread</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: RUN_HOOK           // 钩子函数，实际调用Binlog_relay_IO_delegate::thread_start，最后会调用repl_semisync.slaveStart</span><br><span class="line">  |  |  |  |  |  |  |  |- semisync_slave.cc: repl_semisync.slaveStart   // 判断是否是semi sync，设置全局变量 rpl_semi_sync_slave_status</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: mysql_init         // 初始化一个MYSQL结构体的指针，称为mysql，主要作用是与master通信，之后io线程获取主库的信息，注册从库，拉取binlog，都将依赖这个指针。</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: safe_connect       // 连上master</span><br><span class="line">  |  |  |  |  |  |  |  |- rpl_slave.cc:connect_to_master</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: get_master_version_and_clock        // 获取master的所需信息,包括主库的版本，时间，server_id，字符集校验规则，时区等等信息</span><br><span class="line">  |  |  |  |  |  |  |                                                    // 如果发现主库的server_id与从库的server_id相同，则会报错</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: get_master_uuid                     // 获取主库的server_uuid，如果主库的server_uuid与从库的server_uuid相同，也会报错</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: io_thread_init_commands             // 把从库的server_uuid作为session变量设置到连接上，发送给主库</span><br><span class="line">  |  |  |  |  |  |  |</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: register_slave_on_master            // 把自己注册到master上</span><br><span class="line">  |  |  |  |  |  |  |  |- rpl_slave.cc: net_store_data                   // 设置数据包</span><br><span class="line">  |  |  |  |  |  |  |  |- rpl_slave.cc: simple_command                   // slave把自己的ID、IP、端口、用户名提交给master，用于注册    </span><br><span class="line">  |  |  |  |  |  |  |  |                                                 // 同时会发送COM_REGISTER_SLAVE命令</span><br><span class="line">  |  |  |  |  |  |  |</span><br><span class="line">  |  |  |  |  |  |  |- // 开启while循环1， 不断检测io是否被kill（io_slave_killed）</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: request_dump      // 开始请求数据，向master请求binlog数据</span><br><span class="line">  |  |  |  |  |  |  |  |-rpl_slave.cc: RUN_HOOK        // 调用relay_io-&gt;before_request_transmit()，最终调用repl_semi_slave_request_dump</span><br><span class="line">  |  |  |  |  |  |  |  |  |- semisync_slave_plugin.cc：mysql_real_query   // 检查master是否开启了semi-sync </span><br><span class="line">  |  |  |  |  |  |  |  |  |- semisync_slave_plugin.cc：mysql_real_query   // 告诉master自己需要的是半同步复制</span><br><span class="line">  |  |  |  |  |  |  |  |- // 判断一下是不是GTID，是的话再进行一些初始化设置，添加当前执行过和已拉取的GTID set</span><br><span class="line">  |  |  |  |  |  |  |  |-rpl_slave.cc: int2store       // 存一堆东西到ptr_buffer里，回头发给master</span><br><span class="line">  |  |  |  |  |  |  |  |-rpl_slave.cc: simple_command  // 发送dump数据请求</span><br><span class="line">  |  |  |  |  |  |  |  |                               // 同时发送COM_BINLOG_DUMP_GTID/COM_BINLOG_DUMP命令</span><br><span class="line">  |  |  |  |  |  |  |</span><br><span class="line">  |  |  |  |  |  |  |- // 开启while循环2，不断检测io是否被kill （io_slave_killed）</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: read_event        // 读取event并存放到本地relay log中</span><br><span class="line">  |  |  |  |  |  |  |  |- client.c: cli_safe_read      // 读server传来的一个包（packet）</span><br><span class="line">  |  |  |  |  |  |  |  |  |- client.c: my_net_read     </span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: RUN_HOOK          // 调用binlog_relay_io-&gt;after_read_event，最终调用repl_semi_slave_read_event</span><br><span class="line">  |  |  |  |  |  |  |  |- semisync_slave_plugin.cc: repl_semisync.slaveReadSyncHeader    // 确定网络包头是否有semi-sync标记</span><br><span class="line">  |  |  |  |  |  |  |</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: queue_event       // 将接收到的event保存在relay-log中</span><br><span class="line">  |  |  |  |  |  |  |                                  // 里面会对relay log加锁解锁</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: RUN_HOOK          // 调用binlog_relay_io-&gt;after_queue_event，最终调用repl_semi_slave_queue_event</span><br><span class="line">  |  |  |  |  |  |  |  |- semisync_slave.cc: my_net_write    // 发送回复</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: flush_master_info</span><br><span class="line">  |  |  |  |  |  |  |  // while2循环结束</span><br><span class="line">  |  |  |  |  |  |  |  // while1循环结束</span><br><span class="line">  |  |  |  |  |- rpl_slave.cc: mysql_mutex_unlock(start_lock);</span><br><span class="line">  |  |  |  |  |</span><br><span class="line">  |  |  |  |  |- rpl_slave.cc: start_slave_thread       // 创建SQL线程</span><br><span class="line">  |  |  |- rpl_slave.cc: unlock_slave_threads(mi) </span><br><span class="line">  |  |  |- rpl_slave.cc: mi-&gt;channel_unlock();</span><br></pre></td></tr></table></figure><h3 id="3-1-2-sql线程"><a href="#3-1-2-sql线程" class="headerlink" title="3.1.2 sql线程"></a>3.1.2 sql线程</h3><p>sql线程负责读取relay log并进行真正的执行。</p><p>与 MySQL 从库中提供的多线程并发机制相关的，有两个函数的入口：<code>handle_slave_worker()</code>和<code>handle_slave_sql()</code>；前者为真正的工作函数，后者作为协调器会启动和分配 worker 线程。其中，<code>handle_slave_sql()</code>主要调用了<code>slave_worker_exec_job_group()</code>，该函数会利用 C++ 的多态性，调用相应 event 的<code>do_apply_event()</code>虚函数，以便将不同的 event 操作在从库上重做一遍。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">sql_parse.cc: mysql_execute_command</span><br><span class="line">  |- rpl_slave.cc: start_slave_cmd</span><br><span class="line">  |  |- rpl_slave.cc: start_slave</span><br><span class="line">  |  |- // mi中设定用户、密码和授权插件（mi：Master_info）</span><br><span class="line">  |  |- // 对mi进行了各种初始化设置</span><br><span class="line">  |  |  |- rpl_slave.cc: start_slave_threads         // 先创建I/O线程，无误再创建SQL线程</span><br><span class="line">  |  |  |  |- rpl_slave.cc: start_slave_thread</span><br><span class="line">  |  |  |  |  |- rpl_slave.cc: mysql_thread_create    // 创建I/O线程</span><br><span class="line">  |  |  |  |  | ﻿ |- rpl_slave.cc: handle_slave_io      // IO线程处理函数，建立主从，负责将master数据写入slave</span><br><span class="line">  |  |  |  |</span><br><span class="line">  |  |  |  |- rpl_slave.cc: start_slave_thread       // 创建SQL线程</span><br><span class="line">  |  |  |  |  |- rpl_slave.cc: mysql_thread_create</span><br><span class="line">  |  |  |  |  |  |- rpl_slave.cc: handle_slave_sql        // SQL线程处理函数，负责应用relay-log</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: my_thread_init       // 为线程分配特定于线程的内存</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: init_slave_thread    // 初始化slave线程</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: init_for_queries     // 初始化THD用于语句处理</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc:set_thd_in_use_temporary_tables    // 为已经保存的临时表设置(重置)sql_thd</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: add_thd              // 将sql线程加入到全局线程</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: RUN_HOOK             // binlog_relay_io-&gt; applier_start，最终调用repl_semi_slave_sql_start</span><br><span class="line">  |  |  |  |  |  |  |  |- semisync_slave_plugin.cc: repl_semi_slave_sql_start   // 直接返回0，啥也没干</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: slave_start_workers  // 开启工作池</span><br><span class="line">  |  |  |  |  |  |  |  |- rpl_slave.cc: init_workers      // 初始化工作池，预留空间</span><br><span class="line">  |  |  |  |  |  |  |  |- rpl_slave.cc: init_hash_workers</span><br><span class="line">  |  |  |  |  |  |  |  |- rpl_slave.cc: slave_start_single_worker    // 需要n个worker，对每个worker都执行一遍实例化，执行真正的创建</span><br><span class="line">  |  |  |  |  |  |  |  |  |- rpl_slave.cc: create_worker</span><br><span class="line">  |  |  |  |  |  |  |  |  |- rpl_slave.cc: init_worker</span><br><span class="line">  |  |  |  |  |  |  |  |  |- rpl_slave.cc: mysql_thread_create</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  // 以下操作是在一个线程里</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |- rpl_slave.cc: handle_slave_worker    // 用于并行复制的worker线程（工作线程</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  |- rpl_slave.cc: my_thread_init</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  |- rpl_slave.cc: init_slave_thread</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  |  // 开启while1循环</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  |- rpl_slave.cc: slave_worker_exec_job_group</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  |  |- rpl_rli_pdb.cc: pop_jobs_item              // 拿到一个job item</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  |  |- // 开启while2循环</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  |  |- rpl_rli_pdb.cc: is_gtid_event              // 判断是否是gtid</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  |  |- rpl_rli_pdb.cc: set_future_event_relay_log_pos</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  |  |- rpl_rli_pdb.cc: slave_worker_exec_event    // 拿到event后，应用offer</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  |  |  |- rpl_rli_pdb.cc: do_apply_event_worker</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  |  |  |  |- log_event.cc: do_apply_event         // 最终调用mysql_parse函数执行SQL语句，像执行一个原始SQL一样在从库上重新执行一次</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |- log_event.cc: Query_log_event::do_apply_event</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |- sql_parse.cc: mysql_parse</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  |  |- rpl_rli_pdb.cc: remove_item_from_jobs</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  |  |- rpl_rli_pdb.cc: pop_jobs_item              // 拿到下一个job item</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  |  |- // while2循环结束</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  |  |- rpl_rli_pdb.cc: slave_worker_ends_group</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  |  |- rpl_rli_pdb.cc: remove_item_from_jobs</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  |  // while1循环结束</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |  // 以上操作是在一个线程里</span><br><span class="line">  |  |  |  |  |  |  |</span><br><span class="line">  |  |  |  |  |  |  |  // 以下为读取数据的操作</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc : init_relay_log_pos     // 打开并初始化relay log</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc : check_temp_dir         // 检查命令使用的临时目录</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc : execute_init_command   // 执行初始化slave变量</span><br><span class="line">  |  |  |  |  |  |  |-  // 开启while3循环，只要sql线程没有被killed就一直执行后面的操作</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: exec_relay_log_event    // 读取event并执行，推进relay log的pos</span><br><span class="line">  |  |  |  |  |  |  |  |- rpl_slave.cc: next_event           // 从cache或者relaylog中读取event</span><br><span class="line">  |  |  |  |  |  |  |  |  |- // while(!sql_slave_killed(...) //只要线程未被kill就一直执行</span><br><span class="line">  |  |  |  |  |  |  |  |  |- rli-&gt;set_event_start_pos        // 拿到当前relay log的起始位置</span><br><span class="line">  |  |  |  |  |  |  |  |  |- log_event.cc: Log_event::read_log_event    // 读取记录，第一参数为IO_CACHE</span><br><span class="line">  |  |  |  |  |  |  |  |  |- my_b_read()                                // 从磁盘读取头部，并检查头部信息是否合法</span><br><span class="line">  |  |  |  |  |  |  |  |  | ... ...</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |- log_event.cc: Write_rows_log_event      // 根据不同的event类型，创建ev对象</span><br><span class="line">  |  |  |  |  |  |  |  |  |  |- log_event.cc: Update_rows_log_event</span><br><span class="line">  |  |  |  |  |  |  |  |  | ... ...</span><br><span class="line">  |  |  |  |  |  |  |  |- rpl_slave.cc: apply_event_and_update_pos      // 执行event并修改当前读的位置</span><br><span class="line">  |  |  |  |  |  |  |  |  |- log_event.cc: Log_event::apply_event       // 判断event是否可以并行应用，如果不可以，就在当前线程(SQL线程)去处理这个event</span><br><span class="line">  |  |  |  |  |  |  |  |  |                                             // 如果可以并行应用，则会返回上一层函数apply_event_and_update_pos</span><br><span class="line">  |  |  |  |  |  |  |  |  |                                             // 将event丢进入一个队列，后续worker线程会去这个队列中取出event处理</span><br><span class="line">  |  |  |  |  |  |  |  |  |- rpl_rli_pdb.cc: append_item_to_jobs        // 发送给workers线程</span><br><span class="line">  |  |  |  |  |  |  |-  // while3结束</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: RUN_HOOK                // binlog_relay_io -&gt; applier_stop，实际调用repl_semi_slave_sql_stop，实际就简单地返回0</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc:slave_stop_workers       // 结束worker线程</span><br><span class="line">  |  |  |  |  |  |  |- rpl_slave.cc: // 一系列收尾工作，清空上下文，重置db，释放资源等</span><br></pre></td></tr></table></figure><h1 id="4-参考文档"><a href="#4-参考文档" class="headerlink" title="4 参考文档"></a>4 参考文档</h1><p>[1] <a href="https://segmentfault.com/a/1190000037509500">【Mysql源码分析】基于行的复制实现之“主从关系建立”</a></p><p>[2] <a href="https://www.jianshu.com/p/586d533501a7">MySQL dump线程分析</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL功能介绍：DDL log与原子DDL的实现</title>
      <link href="/2022/12/13/MySQL%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D%EF%BC%9ADDL_log%E4%B8%8E%E5%8E%9F%E5%AD%90DDL%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/12/13/MySQL%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D%EF%BC%9ADDL_log%E4%B8%8E%E5%8E%9F%E5%AD%90DDL%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h2><p>原子性，通俗来说就是指一条命令要么全部执行，要么全部不执行。</p><p>当我们使用MySQL来存储应用数据的时候，MySQL同样也需要存储这些元数据。在MySQL8.0之前的版本中，这些元数据被存放在许多不同的文件中（.FRM，.PAR，.OPT，.TRN，.TRG文件等），这就导致了一系列弊端，包括数据可能不一致、API接口的复杂性等等，在之前的月报<a href="http://mysql.taobao.org/monthly/2018/03/02/">[5]</a>中也有详细描述。元数据被放在许多不同的文件中，导致数据可能不一致的具体表现为：</p><ol><li>Server层的metadata和Storage Engine层的metadata数据不一致；</li><li>InnoDB中的metadata和数据不一致；</li><li>Binlog和数据不一致。</li></ol><span id="more"></span><p><img src="https://pic.imgdb.cn/item/662377890ea9cb14038e2fd3.png" alt="MySQL8.0之前的元数据持久化存储方案"></p><p>也是由于上述原因，MySQL一开始并没能实现DDL的原子性操作，举例来说，我们创建表时如果发生crash，建表不完整，可能会遗留下ibd文件或者.frm文件，这些文件不仅浪费了表空间，还有可能对后续的DDL操作造成影响。</p><p>为了实现AtomicDDL，MySQL 8.0进行了大刀阔斧的改革，目前，只有InnoDB存储引擎支持原子DDL。</p><p>MySQL8.0之后，分散的元数据被统一存放在Data Dictionary中，用户、Server层、引擎都可以通过DD的访问接口查询或者更新Metadata。与DD表有关的源码阅读可以参考之前的月报<a href="http://mysql.taobao.org/monthly/2018/03/02/">[5]</a>。</p><p><img src="https://pic.imgdb.cn/item/662377890ea9cb14038e3155.png" alt="MySQL8.0的元数据持久化存储方案"></p><p>此外，（以下全针对InnoDB存储引擎）还引入了一个特殊的数据结构DDL_log。InnoDB中通过DDL_log来保证DDL的原子性。在DDL执行期间跟踪文件和结构的创建，然后在提交&#x2F;回滚时使用它来正确清理。</p><h2 id="2-DDL-log"><a href="#2-DDL-log" class="headerlink" title="2 DDL log"></a>2 DDL log</h2><p>为了实现原子DDL的提交和回滚，InnoDB存储引擎引入了一个表DDL_LOG，这是一个受保护的表，不允许外部用户查询和修改，包括对该表进行DDL以及DML。该表用来存储DDL执行期间InnoDB存储引擎需要对物理文件以及相关系统表操作的记录，对于添加到DDL_LOG的每一条记录，都会附加一个trx_id（事务id），因此在提交&#x2F;回滚时，可以用事务标识这些条目，并采取适当的操作。在InnoDB提交&#x2F;回滚和相应的操作之后，事务的所有记录将从DDL_LOG中删除。为了保证SERVER crash的时候DDL还能支持原子性，这个表必须尽快持久化，它需要进行同步刷新，不受<code>innodb_flush_log_at_trx_commit</code>的控制。</p><p>DDL Log Table的定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE mysql.<span class="built_in">innodb_ddl_log</span> (</span><br><span class="line">  id BIGINT UNSIGNED NOT <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY KEY, <span class="comment">// DDL log记录的唯一标志符</span></span><br><span class="line">  thread_id BIGINT UNSIGNED NOT <span class="literal">NULL</span>, <span class="comment">// 每个DDL日志记录分配一个thread_id，用于重放和删除属于特定DDL操作的DDL日志</span></span><br><span class="line">  type INT UNSIGNED NOT <span class="literal">NULL</span>, <span class="comment">// DDL操作的类型，包括FREE RENAME等</span></span><br><span class="line">  space_id INT UNSIGNED, <span class="comment">// 表空间的id</span></span><br><span class="line">  page_no INT UNSIGNED, <span class="comment">// 包含分配信息的页，比如索引树的root</span></span><br><span class="line">  index_id BIGINT UNSIGNED, <span class="comment">// 索引id</span></span><br><span class="line">  table_id BIGINT UNSIGNED, <span class="comment">// 表id</span></span><br><span class="line">  old_file_path <span class="built_in">VARCHAR</span>(<span class="number">512</span>) COLLATE UTF8_BIN, <span class="comment">// 旧的表空间文件路径，用于创建或删除表空间文件的DDL操作，也用于重命名表空间的DDL操作</span></span><br><span class="line">  new_file_path <span class="built_in">VARCHAR</span>(<span class="number">512</span>) COLLATE UTF8_BIN, <span class="comment">// 新的表空间文件路径，用于重命名表空间文件的DDL操作。</span></span><br><span class="line">  <span class="built_in">KEY</span>(thread_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>DDL语句的执行分为以下几个阶段，有时候prepare和perform阶段可以在commit之前反复执行：</p><ol><li>prepare：创建所需的对象并把DDL log写入<code>mysql.innodb_ddl_log</code>；</li><li>perform：执行DDL操作；</li><li>commit：更新数据字典并提交数据字典事务；</li><li>Post-DDL：重放和从<code>mysql.innodb_ddl_log</code>中删除DDL log。</li></ol><p>DDL操作类型如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum class</span> <span class="title class_">Log_Type</span> : <span class="type">uint32_t</span> &#123;</span><br><span class="line">  <span class="comment">/** Smallest log type */</span></span><br><span class="line">  SMALLEST_LOG = <span class="number">1</span>,</span><br><span class="line">  <span class="comment">/** Drop an index tree */</span></span><br><span class="line">  FREE_TREE_LOG = <span class="number">1</span>,</span><br><span class="line">  <span class="comment">/** Delete a file */</span></span><br><span class="line">  DELETE_SPACE_LOG,</span><br><span class="line">  <span class="comment">/** Rename a file */</span></span><br><span class="line">  RENAME_SPACE_LOG,</span><br><span class="line">  <span class="comment">/** Drop the entry in innodb_table_metadata */</span></span><br><span class="line">  DROP_LOG,</span><br><span class="line">  <span class="comment">/** Rename table in dict cache. */</span></span><br><span class="line">  RENAME_TABLE_LOG,</span><br><span class="line">  <span class="comment">/** Remove a table from dict cache */</span></span><br><span class="line">  REMOVE_CACHE_LOG,</span><br><span class="line">  <span class="comment">/** Alter Encrypt a tablespace */</span></span><br><span class="line">  ALTER_ENCRYPT_TABLESPACE_LOG,</span><br><span class="line">  <span class="comment">/** Biggest log type */</span></span><br><span class="line">  BIGGEST_LOG = ALTER_ENCRYPT_TABLESPACE_LOG</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>FREE_TREE_LOG：删除指定的索引。</li><li>DELETE_SPACE_LOG：删除指定的idb表空间文件。</li><li>RENAME_SPACE_LOG：删除指定的idb表空间文件。</li><li>DROP_LOG：从<code>mysql.innodb_dynamic_metadata</code>表中删除指定表的信息。</li><li>RENAME_TABLE_LOG：重命名dictionary cache中的表。</li><li>REMOVE_CACHE_LOG：删除dictionary cache中指定的表。</li><li>ALTER_ENCRYPT_TABLESPACE_LOG：用于记录对tablespace加密属性的修改。</li></ol><p>DDL Log可以看作是Redo Log和Undo Log的一个合集。有些DDL把它用作Redo，有些DDL把它用做Undo，还有些DDL会把它同时当作Redo和Undo。有些DDL log是随着父事务一起提交的，有些则在Post-DDL阶段再执行，Post-DDL发生在父事提交或回滚之后，若事务回滚，根据DDL log做逆操作，若事务提交，在Post-DDL阶段做最后真正不可逆操作，在之后的小节会针对典型命令的操作过程进行分析。</p><h2 id="3-CREATE-TABLE的执行"><a href="#3-CREATE-TABLE的执行" class="headerlink" title="3 CREATE TABLE的执行"></a>3 CREATE TABLE的执行</h2><p>执行一条最简单的CREATE TABLE，来分析整个的代码执行逻辑。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> t1(a <span class="type">int</span>);</span><br></pre></td></tr></table></figure><p>创建表的执行过程如下：</p><ol><li>在SQL层，创建表对象（Table Object），然后对SE（Storage Engine）进行初始函数调用，以便SE能够初始化它对DDL的处理；</li><li>SE添加它此时拥有的SE私有数据，并将控制权返回给SQL层；</li><li>然后将表存储在DD表中。对于支持原子DDL的存储引擎来说，此时还没有提交；</li><li>SQL层构建所有的内部结构，然后调用SE层的建表函数；</li><li>SE创建表空间&#x2F;表&#x2F;索引树，在DDL_LOG中记录上述物理文件和创建的索引，更新SE私有数据，并将控制权返回给SQL层。所有关于新表空间&#x2F;索引的信息都通过DD对象传递给server层；</li><li>SQL层写入二进制日志，并根据执行状态提交或回滚事务；</li><li>SQL层在SE中调用一个post_ddl()的钩子函数对文件和树进行适当的清理，并删除事务的DDL_LOG中的条目。如果事务回滚，则post_ddl()会删除表空间和索引树。</li></ol><p>详细地调用流程为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">mysql_create_table</span><br><span class="line">    --&gt; mysql_create_table_no_lock</span><br><span class="line">        --&gt; create_table_impl</span><br><span class="line">            --&gt; rea_create_base_table</span><br><span class="line">                --&gt; dd::create_table  //创建dd::Table</span><br><span class="line">                |    --&gt; dd::create_dd_user_table / dd::create_dd_system_table </span><br><span class="line">                |        // 根据create_info填充dd::Table</span><br><span class="line">                --&gt; dd::cache::Dictionary_client::store&lt;dd::Table&gt; </span><br><span class="line">                |   // 判断dd:Table是否已经存入数据字典，如果没有才进入这个函数</span><br><span class="line">                |    --&gt; dd::cache::Storage_adapter::store&lt;dd::Table&gt; // 将创建好的dd:Table存入dd表</span><br><span class="line">                |        --&gt; dd::Weak_object_impl::store</span><br><span class="line">                |            --&gt; dd::Table_impl::store_attributes // 更新mysql.tables</span><br><span class="line">                |            --&gt; dd::Table_impl::store_children </span><br><span class="line">                |                // 更新建表相关的数据字典表如indexes，foreign_keys，partitions</span><br><span class="line">                --&gt; ha_create_table // 实际创建表</span><br><span class="line">                    --&gt; handler::ha_create</span><br><span class="line">                    |    --&gt; ha_innobase::create // 创建InnoDB表</span><br><span class="line">                    |        --&gt; innobase_basic_ddl::create_impl&lt;dd::Table&gt;</span><br><span class="line">                    |            --&gt; create_table_info_t::create_table</span><br><span class="line">                    |            |    --&gt; create_table_info_t::create_table_def </span><br><span class="line">                    |            |    |   // 创建基于InnoDB数据库的表定义，检查表名是否合规</span><br><span class="line">                    |            |    |   // 确定列数之后，在内存中创建了空的表</span><br><span class="line">                    |            |    |    --&gt; dict_mem_table_create</span><br><span class="line">                    |            |    |       // 在内存中创建表对象（空的，只申请了空间），设置了表的一些参数</span><br><span class="line">                    |            |    |   // 然后对这张表进行了基础的填充，包括设定一些名称、为表加列</span><br><span class="line">                    |            |    |   // 此时还没有对应的idb文件生成</span><br><span class="line">                    |            |    |    --&gt; row_create_table_for_mysql</span><br><span class="line">                    |            |    |       --&gt; dict_build_table_def // 在不更新系统表的情况下创建表定义definition</span><br><span class="line">                    |            |    |       |    --&gt; dict_build_tablespace_for_table </span><br><span class="line">                    |            |    |       |        // 创建表空间，由table-&gt;name确定ibd文件的路径</span><br><span class="line">                    |            |    |       |        // 之后写入ddl log文件，再创建ibd文件</span><br><span class="line">                    |            |    |       |        --&gt; Log_DDL::write_delete_space_log </span><br><span class="line">                    |            |    |       |        |   // 调用Log_DDL::insert_delete_space_log写入ddl log</span><br><span class="line">                    |            |    |       |        --&gt; fil_ibd_create // 这个函数执行完之后才真正创建了ibd文件</span><br><span class="line">                    |            |    |       --&gt; dict_table_add_system_columns // 给表加入系统列（system columns）</span><br><span class="line">                    |            |    |       --&gt; dict_table_add_to_cache // 将要创建的表加入dictionary cache</span><br><span class="line">                    |            |    |       --&gt; Log_DDL::write_remove_cache_log</span><br><span class="line">                    |            |    --&gt; create_clustered_index_when_no_primary // 添加主键索引</span><br><span class="line">                    |            |    |    --&gt; dict_mem_index_create</span><br><span class="line">                    |            |    |    |   // 在内存中申请了index的空间，设置了type、table_name等的参数</span><br><span class="line">                    |            |    |    --&gt; row_create_index_for_mysql</span><br><span class="line">                    |            |    |        --&gt; dict_build_index_def</span><br><span class="line">                    |            |    |            // 创建index定义，不更新系统表，</span><br><span class="line">                    |            |    |            // 更新了index_id，index-&gt;space和index-&gt;trx_id</span><br><span class="line">                    |            |    |        --&gt; dict_index_add_to_cache_w_vcol // 将index写入dictionary cache</span><br><span class="line">                    |            |    |        --&gt; dict_create_index_tree_in_mem</span><br><span class="line">                    |            |    |            --&gt; btr_create // 创建index树，返回root页</span><br><span class="line">                    |            |    |            --&gt; Log_DDL::write_free_tree_log</span><br><span class="line">                    |            |    |                // 这里是先创建了索引然后再写入的ddl log，所以如果这时crash，</span><br><span class="line">                    |            |    |                // 索引还在，却没有办法找到索引对应的空间了</span><br><span class="line">                    |            |    |                // 但是因为这种情况很少见，所以可以接受。</span><br><span class="line">                    |            |    |                // 不过对create table来说，如果file_per_table为true</span><br><span class="line">                    |            |    |                // crash回滚的时候会删除整个表空间的。</span><br><span class="line">                    |            |    --&gt; create_index // 有定义索引的话，会继续创建二级索引，本例没有就暂时不看了</span><br><span class="line">                    |            --&gt; create_table_info_t::create_table_update_global_dd&lt;dd::Table&gt; </span><br><span class="line">                    |                // 更新全局data dictionary，创建tablespace表</span><br><span class="line">                    |            --&gt; create_table_info_t::create_table_update_dict // 更新InnoDB数据库中的表</span><br><span class="line">                    |                --&gt; innobase_copy_frm_flags_from_create_info</span><br><span class="line">                    |                    // 有些flag位存在.frm文件里，拷贝他们过来</span><br><span class="line">                    |                --&gt; dict_stats_update // 更新一些表和索引的统计信息用于优化</span><br><span class="line">                    |                --&gt; innobase_parse_hint_from_comment</span><br><span class="line">                    |                    // 统计表和索引之间的联系，在dictionary中更新</span><br><span class="line">                    --&gt; Dictionary_client::update // 更新持久化了的dictionary对象，但是共享缓存里的内容不变</span><br><span class="line">    --&gt; write_bin_log // 写入binlog文件</span><br><span class="line">    --&gt; Log_DDL::post_ddl // 对文件和树进行适当的清理，删除DDL_LOG中的记录。</span><br><span class="line">                  // 如果事务回滚，则post_ddl()物理删除表空间/ibd (file-per-table)并删除表的索引树。</span><br></pre></td></tr></table></figure><h2 id="4-典型命令的操作过程"><a href="#4-典型命令的操作过程" class="headerlink" title="4 典型命令的操作过程"></a>4 典型命令的操作过程</h2><p>MySQL提供了一个选项<code>innodb_print_ddl_logs</code>，通过设置该参数可以让MySQL将DDL logs写入stderr，从而可以从错误日志中看到一些典型命令的操作过程。 </p><p><code>log_error_verbosity</code>是<code>log_warnings</code>的替代，当它等于3时表示各种信息都会写入错误日志，包括ERROR，WARNING和INFORMATION。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="keyword">GLOBAL</span> innodb_print_ddl_logs <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="keyword">GLOBAL</span> log_error_verbosity <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="4-1-CREATE-DATABASE"><a href="#4-1-CREATE-DATABASE" class="headerlink" title="4.1 CREATE DATABASE"></a>4.1 CREATE DATABASE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database my_test;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>创建数据库没有DDL log记录，所以如果创建数据库时中途失败，之后可能需要手动清除数据。</p><h3 id="4-2-CREATE-TABLE"><a href="#4-2-CREATE-TABLE" class="headerlink" title="4.2 CREATE TABLE"></a>4.2 CREATE TABLE</h3><p><strong>no index</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> t1(a <span class="type">int</span>, b <span class="type">int</span>) <span class="keyword">partition</span> <span class="keyword">by</span> hash(a) partitions <span class="number">2</span>;</span><br><span class="line">Query OK, <span class="number">0</span><span class="keyword">rows</span> affected(<span class="number">0.59</span> sec)</span><br><span class="line"></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">2</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">2</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">2</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: REMOVE CACHE, id<span class="operator">=</span><span class="number">3</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1063</span>, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p0]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">3</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">4</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">2</span>, index_id<span class="operator">=</span><span class="number">149</span>, page_no<span class="operator">=</span><span class="number">4</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">4</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">5</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">3</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">5</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: REMOVE CACHE, id<span class="operator">=</span><span class="number">6</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1064</span>, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p1]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">6</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">7</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">3</span>, index_id<span class="operator">=</span><span class="number">150</span>, page_no<span class="operator">=</span><span class="number">4</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">7</span></span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">begin</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">end</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br></pre></td></tr></table></figure><p>所有插入的记录都是单独的事务，已经进行操作的反向操作。对于创建table space来说，它的反向操作就是<code>DELETE_SPACE_LOG</code>。</p><p>所得到的ddl log还含有DDL log delete 操作，它其实也是记录，用来删除ddl log。如果最后DDL事务成功提交，delete操作最后就会起到作用，DDL log被清空，但如果DDL事务中途失败了，delete操作会回滚，insert的记录得到保留，这些ddl log会清理遗留的垃圾文件。</p><p>对建表逻辑来说，它包含三类：DELETE SPACE、REMOVE CACHE和FREE。因为建表时对其进行了分区，所以上述三条命令是呈分区倍数出现的。首先建立了第一个分区表，将其写入dictionary cache，再建立索引，然后再对后续的分区表进行同样的操作。ddl log记录的便是这些操作的逆向逻辑：删除数据文件，释放内存中的数据字典信息，删除索引btree。当事务最终提交，ddl log会将这些记录删除。在这里DDL log起到的就是Undo。</p><p><strong>with index</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> t2(a <span class="type">int</span>, b <span class="type">int</span>, key index_a(a)) <span class="keyword">partition</span> <span class="keyword">by</span> hash(a) partitions <span class="number">2</span>;</span><br><span class="line">Query OK, <span class="number">0</span><span class="keyword">rows</span> affected(<span class="number">0.60</span> sec)</span><br><span class="line"></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">8</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">4</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t2#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">8</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: REMOVE CACHE, id<span class="operator">=</span><span class="number">9</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1066</span>, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t2#P#p0]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">9</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">10</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">4</span>, index_id<span class="operator">=</span><span class="number">151</span>, page_no<span class="operator">=</span><span class="number">4</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">10</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">11</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">4</span>, index_id<span class="operator">=</span><span class="number">152</span>, page_no<span class="operator">=</span><span class="number">5</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">11</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">12</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">5</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t2#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">12</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: REMOVE CACHE, id<span class="operator">=</span><span class="number">13</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1067</span>, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t2#P#p1]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">13</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">14</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">5</span>, index_id<span class="operator">=</span><span class="number">153</span>, page_no<span class="operator">=</span><span class="number">4</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">14</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">15</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">5</span>, index_id<span class="operator">=</span><span class="number">154</span>, page_no<span class="operator">=</span><span class="number">5</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">15</span></span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">begin</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">end</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br></pre></td></tr></table></figure><p>相比于不含key的建表逻辑，可以看到这次的ddl log里多了两条FREE，应该就是对每一个分区建立索引的操作。</p><h3 id="4-3-ADD-COLUMN"><a href="#4-3-ADD-COLUMN" class="headerlink" title="4.3 ADD COLUMN"></a>4.3 ADD COLUMN</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> t1 <span class="keyword">add</span> <span class="keyword">column</span> c <span class="type">int</span>;</span><br><span class="line">Query OK, <span class="number">0</span><span class="keyword">rows</span> affected(<span class="number">0.38</span> sec)Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">begin</span> <span class="keyword">for</span> thread id : <span class="number">12</span>[InnoDB] DDL log post ddl : <span class="keyword">end</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br></pre></td></tr></table></figure><p>没有涉及对物理文件的改动，不需要ddl log来保证原子性，因此也没有ddl log记录。</p><h3 id="4-4-ADD-KEY"><a href="#4-4-ADD-KEY" class="headerlink" title="4.4 ADD KEY"></a>4.4 ADD KEY</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> t1 <span class="keyword">add</span> key loc_a(a);</span><br><span class="line">Query OK, <span class="number">0</span><span class="keyword">rows</span> affected(<span class="number">0.12</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">16</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">2</span>, index_id<span class="operator">=</span><span class="number">155</span>, page_no<span class="operator">=</span><span class="number">5</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">16</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">17</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">3</span>, index_id<span class="operator">=</span><span class="number">156</span>, page_no<span class="operator">=</span><span class="number">5</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">17</span></span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">begin</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">end</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br></pre></td></tr></table></figure><p>创建索引采用inplace创建的方式，没有临时文件，但如果异常发生的话，依然需要在发生异常时清理临时索引。ADD KEY需要对每一个分区都建立新的索引，这里有两个分区，所以有两条FREE记录。</p><h3 id="4-5-DROP-KEY"><a href="#4-5-DROP-KEY" class="headerlink" title="4.5 DROP KEY"></a>4.5 DROP KEY</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> t2 <span class="keyword">add</span> key index_b(b);</span><br><span class="line">Query OK, <span class="number">0</span><span class="keyword">rows</span> affected(<span class="number">4.50</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> t2 <span class="keyword">drop</span> key index_b;</span><br><span class="line">Query OK, <span class="number">0</span><span class="keyword">rows</span> affected(<span class="number">0.16</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 关注第二句</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">20</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">4</span>, index_id<span class="operator">=</span><span class="number">157</span>, page_no<span class="operator">=</span><span class="number">6</span>]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">21</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">5</span>, index_id<span class="operator">=</span><span class="number">158</span>, page_no<span class="operator">=</span><span class="number">6</span>]</span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">begin</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">21</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">5</span>, index_id<span class="operator">=</span><span class="number">158</span>, page_no<span class="operator">=</span><span class="number">6</span>]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">20</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">4</span>, index_id<span class="operator">=</span><span class="number">157</span>, page_no<span class="operator">=</span><span class="number">6</span>]</span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">end</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br></pre></td></tr></table></figure><p>DROP KEY的逻辑和前面几条命令的逻辑都不同，在执行阶段它只记录了ddl logs，记下需要删除的索引树，但并没有执行真正的删除，这也是因为如果删了之后发生crash，恢复起来会比较麻烦，它真正的删除操作是在post ddl阶段进行的。这里的DDL log就相当于Redo。</p><h3 id="4-6-DROP-COLUMN"><a href="#4-6-DROP-COLUMN" class="headerlink" title="4.6 DROP COLUMN"></a>4.6 DROP COLUMN</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> t1 <span class="keyword">drop</span> <span class="keyword">column</span> c;</span><br><span class="line">Query OK, <span class="number">0</span><span class="keyword">rows</span> affected(<span class="number">0.69</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">22</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">6</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1063<span class="number">-4028979805.</span>ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">22</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: REMOVE CACHE, id<span class="operator">=</span><span class="number">23</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1069</span>, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1063<span class="number">-4028979805</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">23</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">24</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">6</span>, index_id<span class="operator">=</span><span class="number">159</span>, page_no<span class="operator">=</span><span class="number">4</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">24</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">25</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">6</span>, index_id<span class="operator">=</span><span class="number">160</span>, page_no<span class="operator">=</span><span class="number">5</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">25</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">26</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">7</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1064<span class="number">-4028979806.</span>ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">26</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: REMOVE CACHE, id<span class="operator">=</span><span class="number">27</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1070</span>, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1064<span class="number">-4028979806</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">27</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">28</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">7</span>, index_id<span class="operator">=</span><span class="number">161</span>, page_no<span class="operator">=</span><span class="number">4</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">28</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">29</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">7</span>, index_id<span class="operator">=</span><span class="number">162</span>, page_no<span class="operator">=</span><span class="number">5</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">29</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">30</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1063</span>]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">31</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1064</span>]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">32</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">2</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1069<span class="number">-4028979807.</span>ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">32</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME <span class="keyword">TABLE</span>, id<span class="operator">=</span><span class="number">33</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1063</span>, old_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1069<span class="number">-4028979807</span>, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p0]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">33</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">34</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">6</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p0.ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1063<span class="number">-4028979805.</span>ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">34</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME <span class="keyword">TABLE</span>, id<span class="operator">=</span><span class="number">35</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1069</span>, old_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p0, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1063<span class="number">-4028979805</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">35</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">36</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">3</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1070<span class="number">-4028979808.</span>ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">36</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME <span class="keyword">TABLE</span>, id<span class="operator">=</span><span class="number">37</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1064</span>, old_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1070<span class="number">-4028979808</span>, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p1]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">37</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">38</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">7</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p1.ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1064<span class="number">-4028979806.</span>ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">38</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME <span class="keyword">TABLE</span>, id<span class="operator">=</span><span class="number">39</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1070</span>, old_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p1, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1064<span class="number">-4028979806</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">39</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">40</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1063</span>]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">41</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">2</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1069<span class="number">-4028979807.</span>ibd]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">42</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1064</span>]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">43</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">3</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1070<span class="number">-4028979808.</span>ibd]</span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">begin</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">43</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">3</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1070<span class="number">-4028979808.</span>ibd]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">42</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1064</span>]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">41</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">2</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1069<span class="number">-4028979807.</span>ibd]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">40</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1063</span>]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">31</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1064</span>]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">30</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1063</span>]</span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">end</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br></pre></td></tr></table></figure><p>alter table有很多种，这里是最复杂的重建表的逻辑。这种情况下DDL log既是redo，也是undo。<br>执行阶段首先是建立了两个分区表，一开始走了create table的逻辑，然后记录下要删除的原来的表（此时只是记录，留作post-ddl阶段再执行），之后是一系列重命名操作，把旧的表空间和旧的表重命名为新的，这里记录的也是实际执行过程的逆操作。之前的表空间和表名（以A代称）先被重命名成另外一个中间名（以C代称），然后把最初创建的新的表空间和表名（代称为B）重命名为正确的表名，也就是最开始的A名。而被代替的旧表和旧表空间C，先记录下来ddl log，等到post-ddl阶段再做删除。</p><h3 id="4-7-RENAME-INDEX"><a href="#4-7-RENAME-INDEX" class="headerlink" title="4.7 RENAME INDEX"></a>4.7 RENAME INDEX</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> t1 renameindex loc_a <span class="keyword">to</span> loc_aa;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.12</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">begin</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">end</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br></pre></td></tr></table></figure><p>没有涉及对物理文件的改动，不需要ddl log来保证原子性，因此也没有ddl log记录。</p><h3 id="4-8-RENAME-COLUMN"><a href="#4-8-RENAME-COLUMN" class="headerlink" title="4.8 RENAME COLUMN"></a>4.8 RENAME COLUMN</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> t1 <span class="keyword">add</span> key loc_b(b);</span><br><span class="line">Query OK, <span class="number">0</span><span class="keyword">rows</span> affected(<span class="number">4.24</span> sec)Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> t1 rename <span class="keyword">column</span> b <span class="keyword">to</span> bb;</span><br><span class="line">Query OK, <span class="number">0</span><span class="keyword">rows</span> affected(<span class="number">0.12</span> sec)Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 关注第二句</span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">begin</span> <span class="keyword">for</span> thread id : <span class="number">12</span>[InnoDB] DDL log post ddl : <span class="keyword">end</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br></pre></td></tr></table></figure><p>没有涉及对物理文件的改动，不需要ddl log来保证原子性，因此也没有ddl log记录。</p><h3 id="4-9-RENAME-TABLE"><a href="#4-9-RENAME-TABLE" class="headerlink" title="4.9 RENAME TABLE"></a>4.9 RENAME TABLE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> rename <span class="keyword">table</span> t1 <span class="keyword">to</span> t11;</span><br><span class="line">Query OK, <span class="number">0</span><span class="keyword">rows</span> affected(<span class="number">0.11</span> sec)</span><br><span class="line"></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">8</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">2</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t11#P#p0.ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">8</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME <span class="keyword">TABLE</span>, id<span class="operator">=</span><span class="number">9</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1063</span>, old_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t11#P#p0, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p0]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">9</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">10</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">3</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t11#P#p1.ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">10</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME <span class="keyword">TABLE</span>, id<span class="operator">=</span><span class="number">11</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1064</span>, old_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t11#P#p1, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p1]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">11</span></span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">begin</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">end</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br></pre></td></tr></table></figure><p>对每个分区的表空间和表进行了rename操作。</p><h3 id="4-10-REBUILD"><a href="#4-10-REBUILD" class="headerlink" title="4.10 REBUILD"></a>4.10 REBUILD</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> t1 engine<span class="operator">=</span>InnoDB;</span><br><span class="line">Query OK, <span class="number">0</span><span class="keyword">rows</span> affected(<span class="number">0.72</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">46</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">8</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1069<span class="number">-4028979809.</span>ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">46</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: REMOVE CACHE, id<span class="operator">=</span><span class="number">47</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1071</span>, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1069<span class="number">-4028979809</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">47</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">48</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">8</span>, index_id<span class="operator">=</span><span class="number">165</span>, page_no<span class="operator">=</span><span class="number">4</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">48</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">49</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">8</span>, index_id<span class="operator">=</span><span class="number">166</span>, page_no<span class="operator">=</span><span class="number">5</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">49</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">50</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">8</span>, index_id<span class="operator">=</span><span class="number">167</span>, page_no<span class="operator">=</span><span class="number">6</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">50</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">51</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">9</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1070<span class="number">-4028979810.</span>ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">51</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: REMOVE CACHE, id<span class="operator">=</span><span class="number">52</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1072</span>, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1070<span class="number">-4028979810</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">52</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">53</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">9</span>, index_id<span class="operator">=</span><span class="number">168</span>, page_no<span class="operator">=</span><span class="number">4</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">53</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">54</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">9</span>, index_id<span class="operator">=</span><span class="number">169</span>, page_no<span class="operator">=</span><span class="number">5</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">54</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">55</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">9</span>, index_id<span class="operator">=</span><span class="number">170</span>, page_no<span class="operator">=</span><span class="number">6</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">55</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">56</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1069</span>]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">57</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1070</span>]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">58</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">6</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1071<span class="number">-4028979811.</span>ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">58</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME <span class="keyword">TABLE</span>, id<span class="operator">=</span><span class="number">59</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1069</span>, old_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1071<span class="number">-4028979811</span>, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p0]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">59</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">60</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">8</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p0.ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1069<span class="number">-4028979809.</span>ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">60</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME <span class="keyword">TABLE</span>, id<span class="operator">=</span><span class="number">61</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1071</span>, old_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p0, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1069<span class="number">-4028979809</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">61</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">62</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">7</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1072<span class="number">-4028979812.</span>ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">62</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME <span class="keyword">TABLE</span>, id<span class="operator">=</span><span class="number">63</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1070</span>, old_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1072<span class="number">-4028979812</span>, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p1]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">63</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">64</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">9</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p1.ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1070<span class="number">-4028979810.</span>ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">64</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME <span class="keyword">TABLE</span>, id<span class="operator">=</span><span class="number">65</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1072</span>, old_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p1, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1070<span class="number">-4028979810</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">65</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">66</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1069</span>]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">67</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">6</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1071<span class="number">-4028979811.</span>ibd]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">68</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1070</span>]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">69</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">7</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1072<span class="number">-4028979812.</span>ibd]</span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">begin</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">69</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">7</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1072<span class="number">-4028979812.</span>ibd]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">68</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1070</span>]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">67</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">6</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1071<span class="number">-4028979811.</span>ibd]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">66</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1069</span>]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">57</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1070</span>]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">56</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1069</span>]</span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">end</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br></pre></td></tr></table></figure><p>rebuild的逻辑和alter table … add column一样，都是重建表，二者的ddl log也极其相似，在这里就不再重复rebuild的实现逻辑了。</p><h3 id="4-11-CHANGE-COLUMN"><a href="#4-11-CHANGE-COLUMN" class="headerlink" title="4.11 CHANGE COLUMN"></a>4.11 CHANGE COLUMN</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> t1 change <span class="keyword">column</span> bb b <span class="type">char</span>(<span class="number">10</span>);</span><br><span class="line">Query OK, <span class="number">0</span><span class="keyword">rows</span> affected(<span class="number">5.28</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">70</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">10</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>e525_c#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">70</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: REMOVE CACHE, id<span class="operator">=</span><span class="number">71</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1073</span>, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>e525_c#P#p0]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">71</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">72</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">10</span>, index_id<span class="operator">=</span><span class="number">171</span>, page_no<span class="operator">=</span><span class="number">4</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">72</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">73</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">10</span>, index_id<span class="operator">=</span><span class="number">172</span>, page_no<span class="operator">=</span><span class="number">5</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">73</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">74</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">10</span>, index_id<span class="operator">=</span><span class="number">173</span>, page_no<span class="operator">=</span><span class="number">6</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">74</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">75</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">11</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>e525_c#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">75</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: REMOVE CACHE, id<span class="operator">=</span><span class="number">76</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1074</span>, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>e525_c#P#p1]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">76</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">77</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">11</span>, index_id<span class="operator">=</span><span class="number">174</span>, page_no<span class="operator">=</span><span class="number">4</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">77</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">78</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">11</span>, index_id<span class="operator">=</span><span class="number">175</span>, page_no<span class="operator">=</span><span class="number">5</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">78</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">79</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">11</span>, index_id<span class="operator">=</span><span class="number">176</span>, page_no<span class="operator">=</span><span class="number">6</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">79</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">80</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">8</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#sql2<span class="operator">-</span>e525<span class="operator">-</span>c#P#p0.ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">80</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME <span class="keyword">TABLE</span>, id<span class="operator">=</span><span class="number">81</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1071</span>, old_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#sql2<span class="operator">-</span>e525<span class="operator">-</span>c#P#p0, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p0]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">81</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">82</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">9</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#sql2<span class="operator">-</span>e525<span class="operator">-</span>c#P#p1.ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">82</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME <span class="keyword">TABLE</span>, id<span class="operator">=</span><span class="number">83</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1072</span>, old_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#sql2<span class="operator">-</span>e525<span class="operator">-</span>c#P#p1, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p1]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">83</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">84</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">10</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p0.ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>e525_c#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">84</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME <span class="keyword">TABLE</span>, id<span class="operator">=</span><span class="number">85</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1073</span>, old_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p0, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>e525_c#P#p0]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">85</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">86</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">11</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p1.ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>e525_c#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">86</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME <span class="keyword">TABLE</span>, id<span class="operator">=</span><span class="number">87</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1074</span>, old_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p1, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>e525_c#P#p1]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">87</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">88</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1071</span>]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">89</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">8</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#sql2<span class="operator">-</span>e525<span class="operator">-</span>c#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">90</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1072</span>]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">91</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">9</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#sql2<span class="operator">-</span>e525<span class="operator">-</span>c#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">begin</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">91</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">9</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#sql2<span class="operator">-</span>e525<span class="operator">-</span>c#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">90</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1072</span>]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">89</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">8</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#sql2<span class="operator">-</span>e525<span class="operator">-</span>c#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">88</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1071</span>]</span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">end</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">begin</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">end</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br></pre></td></tr></table></figure><p>和rebuild和alter table … add column也很相似，首先也是走了建表的逻辑，创建了name前缀为<code>#sql-e525_c</code>的表和表空间，之前的一通操作之后这里有三个key（包含默认的primary），所以有三个FREE的逻辑。之后就是重命名的逻辑，借助一个中间名<code>#sql2-e525-c</code>（注意最后下划线不一样），把新创建的表和表空间和之前的进行交换，原来的表和表空间重命名为#sql2-e525-c 开头的文件，新生成的<code>#sql-e525_c</code>开头的表和表空间重命名为正确的名字（<code>t1#P#p0</code>等），最后记录删除旧表和表空间的log，也就是现在开头为<code>#sql2-e525-c</code>的表空间和表，在post-ddl阶段执行。</p><h3 id="4-12-MODIFY-COLUMN"><a href="#4-12-MODIFY-COLUMN" class="headerlink" title="4.12 MODIFY COLUMN"></a>4.12 MODIFY COLUMN</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> t1 modify <span class="keyword">column</span> b <span class="type">int</span>;</span><br><span class="line">Query OK, <span class="number">0</span><span class="keyword">rows</span> affected(<span class="number">0.89</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">92</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">12</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>e525_c#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">92</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: REMOVE CACHE, id<span class="operator">=</span><span class="number">93</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1076</span>, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>e525_c#P#p0]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">93</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">94</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">12</span>, index_id<span class="operator">=</span><span class="number">177</span>, page_no<span class="operator">=</span><span class="number">4</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">94</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">95</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">12</span>, index_id<span class="operator">=</span><span class="number">178</span>, page_no<span class="operator">=</span><span class="number">5</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">95</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">96</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">12</span>, index_id<span class="operator">=</span><span class="number">179</span>, page_no<span class="operator">=</span><span class="number">6</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">96</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">97</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">13</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>e525_c#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">97</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: REMOVE CACHE, id<span class="operator">=</span><span class="number">98</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1077</span>, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>e525_c#P#p1]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">98</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">99</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">13</span>, index_id<span class="operator">=</span><span class="number">180</span>, page_no<span class="operator">=</span><span class="number">4</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">99</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">100</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">13</span>, index_id<span class="operator">=</span><span class="number">181</span>, page_no<span class="operator">=</span><span class="number">5</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">100</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">101</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">13</span>, index_id<span class="operator">=</span><span class="number">182</span>, page_no<span class="operator">=</span><span class="number">6</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">101</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">102</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">10</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#sql2<span class="operator">-</span>e525<span class="operator">-</span>c#P#p0.ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">102</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME <span class="keyword">TABLE</span>, id<span class="operator">=</span><span class="number">103</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1073</span>, old_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#sql2<span class="operator">-</span>e525<span class="operator">-</span>c#P#p0, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p0]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">103</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">104</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">11</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#sql2<span class="operator">-</span>e525<span class="operator">-</span>c#P#p1.ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">104</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME <span class="keyword">TABLE</span>, id<span class="operator">=</span><span class="number">105</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1074</span>, old_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#sql2<span class="operator">-</span>e525<span class="operator">-</span>c#P#p1, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p1]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">105</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">106</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">12</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p0.ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>e525_c#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">106</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME <span class="keyword">TABLE</span>, id<span class="operator">=</span><span class="number">107</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1076</span>, old_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p0, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>e525_c#P#p0]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">107</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">108</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">13</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p1.ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>e525_c#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">108</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME <span class="keyword">TABLE</span>, id<span class="operator">=</span><span class="number">109</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1077</span>, old_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t1#P#p1, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>e525_c#P#p1]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">109</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">110</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1073</span>]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">111</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">10</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#sql2<span class="operator">-</span>e525<span class="operator">-</span>c#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">112</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1074</span>]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">113</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">11</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#sql2<span class="operator">-</span>e525<span class="operator">-</span>c#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">begin</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">113</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">11</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#sql2<span class="operator">-</span>e525<span class="operator">-</span>c#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">112</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1074</span>]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">111</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">10</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#sql2<span class="operator">-</span>e525<span class="operator">-</span>c#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">110</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1073</span>]</span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">end</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">begin</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">end</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br></pre></td></tr></table></figure><p>和CHANGE COLUMN的逻辑一样，就不再多说了。</p><h3 id="4-13-TRUNCATE-TABLE"><a href="#4-13-TRUNCATE-TABLE" class="headerlink" title="4.13 TRUNCATE TABLE"></a>4.13 TRUNCATE TABLE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">truncate</span> <span class="keyword">table</span> t2;</span><br><span class="line">Query OK, <span class="number">0</span><span class="keyword">rows</span> affected(<span class="number">0.65</span> sec)</span><br><span class="line"></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">114</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">4</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1066<span class="number">-4028979813.</span>ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t2#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">114</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">115</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1066</span>]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">116</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">4</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1066<span class="number">-4028979813.</span>ibd]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">117</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">14</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t2#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">117</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: REMOVE CACHE, id<span class="operator">=</span><span class="number">118</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1079</span>, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t2#P#p0]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">118</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">119</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">14</span>, index_id<span class="operator">=</span><span class="number">183</span>, page_no<span class="operator">=</span><span class="number">4</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">119</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">120</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">14</span>, index_id<span class="operator">=</span><span class="number">184</span>, page_no<span class="operator">=</span><span class="number">5</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">120</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: RENAME SPACE, id<span class="operator">=</span><span class="number">121</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">5</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1067<span class="number">-4028979814.</span>ibd, new_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t2#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">121</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">122</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1067</span>]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">123</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">5</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1067<span class="number">-4028979814.</span>ibd]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">124</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">15</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t2#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">124</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: REMOVE CACHE, id<span class="operator">=</span><span class="number">125</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1080</span>, new_file_path<span class="operator">=</span>my_test<span class="operator">/</span>t2#P#p1]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">125</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">126</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">15</span>, index_id<span class="operator">=</span><span class="number">185</span>, page_no<span class="operator">=</span><span class="number">4</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">126</span></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">FREE</span>, id<span class="operator">=</span><span class="number">127</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">15</span>, index_id<span class="operator">=</span><span class="number">186</span>, page_no<span class="operator">=</span><span class="number">5</span>]</span><br><span class="line">[InnoDB] DDL logdelete : <span class="number">127</span></span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">begin</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">123</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">5</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1067<span class="number">-4028979814.</span>ibd]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">122</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1067</span>]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">116</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">4</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>#<span class="keyword">sql</span><span class="operator">-</span>ib1066<span class="number">-4028979813.</span>ibd]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">115</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1066</span>]</span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">end</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br></pre></td></tr></table></figure><p>首先先把旧的表空间找个临时的名称先存起来，记录一下要删除旧的表和这个旧的表空间（先记录，post-ddl再删除），然后走了创建表的逻辑，也就是用空的表空间和表来代替原来的旧的表空间和表。post-ddl阶段删除原来的表空间和表。</p><h3 id="4-14-DROP-TABLE"><a href="#4-14-DROP-TABLE" class="headerlink" title="4.14 DROP TABLE"></a>4.14 DROP TABLE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> <span class="keyword">table</span> t2;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.09</span> sec)</span><br><span class="line"></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">128</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1079</span>]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">129</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">14</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t2#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">130</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1080</span>]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">131</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">15</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t2#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">begin</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">131</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">15</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t2#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">130</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1080</span>]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">129</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">14</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t2#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">128</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1079</span>]</span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">end</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br></pre></td></tr></table></figure><p>记录删除操作，留在post-ddl阶段再执行。</p><h3 id="4-15-DROP-DATABASE"><a href="#4-15-DROP-DATABASE" class="headerlink" title="4.15 DROP DATABASE"></a>4.15 DROP DATABASE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> database my_test;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.14</span> sec)</span><br><span class="line"></span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">154</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1081</span>]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">155</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">16</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">156</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1082</span>]</span><br><span class="line">[InnoDB] DDL log <span class="keyword">insert</span> : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">157</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">17</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">begin</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">157</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">17</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p1.ibd]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">156</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1082</span>]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DELETE</span> SPACE, id<span class="operator">=</span><span class="number">155</span>, thread_id<span class="operator">=</span><span class="number">12</span>, space_id<span class="operator">=</span><span class="number">16</span>, old_file_path<span class="operator">=</span>.<span class="operator">/</span>my_test<span class="operator">/</span>t1#P#p0.ibd]</span><br><span class="line">[InnoDB] DDL log replay : [DDL record: <span class="keyword">DROP</span>, id<span class="operator">=</span><span class="number">154</span>, thread_id<span class="operator">=</span><span class="number">12</span>, table_id<span class="operator">=</span><span class="number">1081</span>]</span><br><span class="line">[InnoDB] DDL log post ddl : <span class="keyword">end</span> <span class="keyword">for</span> thread id : <span class="number">12</span></span><br></pre></td></tr></table></figure><p>只记录了删除表的操作，也就是只记录了drop table的逻辑，和create database的逻辑相似，涉及创建数据库和删除数据库的操作不受ddl log保护，不支持原子性。</p><h2 id="5-参考文献"><a href="#5-参考文献" class="headerlink" title="5 参考文献"></a>5 参考文献</h2><p>[1] <a href="https://dev.mysql.com/doc/refman/8.0/en/atomic-ddl.html">13.1.1 Atomic Data Definition Statement Support</a></p><p>[2] <a href="https://mysqlserverteam.com/atomic-ddl-in-mysql-8-0/">Atomic DDL in MySQL 8.0</a></p><p>[3] <a href="http://mysqlserverteam.com/mysql-8-0-data-dictionary-architecture-and-design/">MySQL 8.0: Data Dictionary Architecture and Design</a></p><p>[4] <a href="http://mysql.taobao.org/monthly/2020/05/05/">MySQL · 源码分析 · 8.0 · DDL的那些事</a></p><p>[5] <a href="http://mysql.taobao.org/monthly/2018/03/02/">MySQL · 源码分析 · 原子DDL的实现过程</a></p><p>[6] <a href="http://mysql.taobao.org/monthly/2018/07/02/">MySQL · 源码分析 · 8.0 原子DDL的实现过程续</a></p><p>[7] <a href="https://developer.aliyun.com/article/692258">深入解读MySQL8.0 新特性 ：Crash Safe DDL</a></p><p>[8] <a href="https://mp.weixin.qq.com/s/yym9E9gkrxqflL5dOTU6BA">Atomic DDL揭秘</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 功能介绍 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
